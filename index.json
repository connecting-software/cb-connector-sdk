{
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.AnyCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.AnyCriteria.html",
    "title": "Class AnyCriteria | CB Connector SDK website",
    "keywords": "Class AnyCriteria Represents any/some operator that compares a scalar value with a single-column set of values. Inheritance System.Object FilterCriteria ComparisonCriteria QuantifierCriteria AnyCriteria Implements IFilterCriteria Inherited Members ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class AnyCriteria : QuantifierCriteria, IFilterCriteria Constructors AnyCriteria(IEnumerable<IArgument>) Initializes a new instance of the AnyCriteria class. Declaration public AnyCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also QuantifierCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.AllCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.AllCriteria.html",
    "title": "Class AllCriteria | CB Connector SDK website",
    "keywords": "Class AllCriteria Represents all operator that compares a scalar value with a single-column set of values. Inheritance System.Object FilterCriteria ComparisonCriteria QuantifierCriteria AllCriteria Implements IFilterCriteria Inherited Members ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class AllCriteria : QuantifierCriteria, IFilterCriteria Constructors AllCriteria(IEnumerable<IArgument>) Initializes a new instance of the AllCriteria class. Declaration public AllCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also QuantifierCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.BlockCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.BlockCriteria.html",
    "title": "Class BlockCriteria | CB Connector SDK website",
    "keywords": "Class BlockCriteria Represents a set whose criteria are enclosed in parentheses. Inheritance System.Object FilterCriteria UnaryCriteria BlockCriteria Implements IFilterCriteria Inherited Members UnaryCriteria.FilterCriteria FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria Assembly : CB.Connector.dll Syntax public class BlockCriteria : UnaryCriteria, IFilterCriteria Remarks Parentheses are often used to build more complex expressions, search criteria, and so on. Constructors BlockCriteria(IFilterCriteria) Initializes a new instance of the BlockCriteria class. Declaration public BlockCriteria(IFilterCriteria filter) Parameters Type Name Description IFilterCriteria filter An IFilterCriteria object. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also UnaryCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.ComparisonCriteriaFactory.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.ComparisonCriteriaFactory.html",
    "title": "Class ComparisonCriteriaFactory | CB Connector SDK website",
    "keywords": "Class ComparisonCriteriaFactory Factory implementation that always creates comparison criteria. Inheritance System.Object ComparisonCriteriaFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class ComparisonCriteriaFactory Properties Instance Gets an instance of ComparisonCriteriaFactory Factory. Declaration public static ComparisonCriteriaFactory Instance { get; } Property Value Type Description ComparisonCriteriaFactory Methods CreateCriteria(String, Boolean, ICollection<IArgument>) Creates a comparison criteria. Declaration public ComparisonCriteria CreateCriteria(string operation, bool notApplied, ICollection<IArgument> args) Parameters Type Name Description System.String operation The operation as a sting. System.Boolean notApplied true if not operator is applied; otherwise false . System.Collections.Generic.ICollection < IArgument > args The collection of arguments that follows the operator. Returns Type Description ComparisonCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.ComparisonCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.ComparisonCriteria.html",
    "title": "Class ComparisonCriteria | CB Connector SDK website",
    "keywords": "Class ComparisonCriteria Provides an abstract class for comparisons used in search criteria. Inheritance System.Object FilterCriteria ComparisonCriteria BasicComparisonCriteria ExtendedComparisonCriteria QuantifierCriteria Implements IFilterCriteria Inherited Members FilterCriteria.Childes FilterCriteria.Parent FilterCriteria.Filter(Object[], Object) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public abstract class ComparisonCriteria : FilterCriteria, IFilterCriteria Constructors ComparisonCriteria(IEnumerable<IArgument>) Initializes a new instance of the ComparisonCriteria class. Declaration protected ComparisonCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Fields Arguments Gets the list of arguments that follows the operator. Declaration protected readonly List<IArgument> Arguments Field Value Type Description System.Collections.Generic.List < IArgument > Properties Args Order matters. Gets the collection of arguments that follows the operator. Declaration public IEnumerable<IArgument> Args { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IArgument > Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also FilterCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.BetweenCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.BetweenCriteria.html",
    "title": "Class BetweenCriteria | CB Connector SDK website",
    "keywords": "Class BetweenCriteria Represents between operator that checks whether an attribute value is within a range. Inheritance System.Object FilterCriteria ComparisonCriteria ExtendedComparisonCriteria BetweenCriteria Implements IFilterCriteria Inherited Members ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class BetweenCriteria : ExtendedComparisonCriteria, IFilterCriteria Constructors BetweenCriteria(IArgument, IArgument, IArgument) Initializes a new instance of the BetweenCriteria class. Declaration public BetweenCriteria(IArgument expression, IArgument begin, IArgument end) Parameters Type Name Description IArgument expression The expression to test for in the range defined by begin and end . IArgument begin The begin of an inclusive range. IArgument end The end of an inclusive range. BetweenCriteria(IEnumerable<IArgument>) Initializes a new instance of the BetweenCriteria class. Declaration public BetweenCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Properties Begin Gets the begin of an inclusive range. Declaration public IArgument Begin { get; } Property Value Type Description IArgument The begin of an inclusive range. End Gets the end of an inclusive range. Declaration public IArgument End { get; } Property Value Type Description IArgument The end of an inclusive range. Expression Gets the expression to test for in the given range. Declaration public IArgument Expression { get; } Property Value Type Description IArgument The expression to test for in the given range. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ExtendedComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.JoinType.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.JoinType.html",
    "title": "Enum JoinType | CB Connector SDK website",
    "keywords": "Enum JoinType Represents an enumeration that defines literals used to specify the type of join operation. Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public enum JoinType Fields Name Description Cross Indicates that Join is a cross join object. Full Indicates that Join is a full join object. Inner Indicates that Join is an inner join object. Left Indicates that Join is a left join object. Right Indicates that Join is a right join object. Extension Methods ConnectorPropertiesExtensions.TryParse(Type, Object) ConnectorPropertiesExtensions.Parse(Type) ConnectorPropertiesExtensions.Decrypt(String) ConnectorPropertiesExtensions.Encrypt(String) ConnectorPropertiesExtensions.IsEncrypted(String, Encoding)"
  },
  "api/CB.Connector.Command.DataHandler.Argument.IIdentifier.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.IIdentifier.html",
    "title": "Interface IIdentifier | CB Connector SDK website",
    "keywords": "Interface IIdentifier Represents an argument that may uniquely identify a value. Inherited Members ITypedElement.Type ITypedElement.IsNullable ITypedElement.DefaultValue INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Command.DataHandler.Argument Assembly : CB.Connector.dll Syntax public interface IIdentifier : IArgument, ITypedElement, INamedElement, IElement Remarks An identifier is often used to represent aliases, constants, variables, column name and so forth. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IArgument"
  },
  "api/CB.Connector.Command.DataHandler.Argument.IColumnArgument.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.IColumnArgument.html",
    "title": "Interface IColumnArgument | CB Connector SDK website",
    "keywords": "Interface IColumnArgument Represents an identifier that may represent a column-reference. A column contains values, one in each row of a table. Inherited Members IColumn.IsUnique IColumn.IsForeignKey IColumn.IsPrimaryKey IColumn.IsAutoincrementable IColumn.IsSearchable IColumn.IsReadOnly IColumn.IsSortable IOrdinalElement.Ordinal ITypedElement.Type ITypedElement.IsNullable ITypedElement.DefaultValue INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Command.DataHandler.Argument Assembly : CB.Connector.dll Syntax public interface IColumnArgument : IColumn, IProperty, IOrdinalElement, IIdentifier, IArgument, ITypedElement, INamedElement, IElement Properties ArgumentColumn Gets the column-reference. Declaration IArgument ArgumentColumn { get; } Property Value Type Description IArgument IsRequired Gets a value indicating whether this instance is required. Declaration bool IsRequired { get; } Property Value Type Description System.Boolean IsSourceColumn Gets a value indicating whether this instance is a column-reference whose values come directly from the database. Declaration bool IsSourceColumn { get; } Property Value Type Description System.Boolean MetadataColumn Gets the column that has its place on the model. Declaration IColumn MetadataColumn { get; } Property Value Type Description IColumn Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IColumn IIdentifier"
  },
  "api/CB.Connector.Command.DataHandler.Argument.Classes.Set.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.Classes.Set.html",
    "title": "Class Set | CB Connector SDK website",
    "keywords": "Class Set Represents a set of values. A set that represents a well-defined collection of distinct values. Inheritance System.Object Set Block SetTable Implements IArgument ITypedElement INamedElement IElement Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.Argument.Classes Assembly : CB.Connector.dll Syntax public class Set : IArgument, ITypedElement, INamedElement, IElement Constructors Set() Initializes a new instance of the Set class that is empty. Declaration public Set() Set(IEnumerable<IArgument>) Initializes a new instance of the Set class as a wrapper for the specified enumerable. Declaration public Set(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection whose elements are copied to the new list. Properties Args Gets a collection of arguments. Declaration public virtual IEnumerable<IArgument> Args { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IArgument > Count Gets the number of arguments contained in the Set . Declaration public virtual int Count { get; } Property Value Type Description System.Int32 DefaultValue Gets the default value of this instance. Declaration public object DefaultValue { get; } Property Value Type Description System.Object The default value. Description Gets or sets the description defined for IElement . Declaration public IDescriptor Description { get; set; } Property Value Type Description IDescriptor The description. IsNullable Gets a value indicating whether this instance that can accepts null values. Declaration public bool IsNullable { get; set; } Property Value Type Description System.Boolean true if this instance does not accept null values; otherwise, false . Item[Int32] Gets the argument at the specified index. Declaration public virtual IArgument this[int index] { get; } Parameters Type Name Description System.Int32 index The zero-based index of the argument to get. Property Value Type Description IArgument Name Gets the name of the named element. Declaration public virtual string Name { get; } Property Value Type Description System.String The name of the named element. Remarks Must not exceed 128 characters QualifiedName Gets the name that allows the named element to be identified within a hierarchy of nested namespaces. Declaration public string QualifiedName { get; } Property Value Type Description System.String The qualified name. Remarks It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the named element itself. Type Gets the type of this instance. Declaration public virtual IDataType Type { get; } Property Value Type Description IDataType Returns the data type. Methods Add(IArgument) Adds an IArgument object to the end of the Set . Declaration public virtual void Add(IArgument arg) Parameters Type Name Description IArgument arg The object to be added to the end of the Set . Clear() Removes all arguments from the Set . Declaration public void Clear() Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Explicit Interface Implementations INamedElement.Owner Gets or sets the owner of the named element. Declaration INamedElement INamedElement.Owner { get; set; } Returns Type Description INamedElement A System.String value that specifies the owner of the named element. Implements IArgument ITypedElement INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IArgument"
  },
  "api/CB.Connector.Command.DataHandler.Argument.Classes.CbIdentifier.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.Classes.CbIdentifier.html",
    "title": "Class CbIdentifier | CB Connector SDK website",
    "keywords": "Class CbIdentifier Represents the names that uniquely identify an element. This class cannot be inherited. Inheritance System.Object CbIdentifier Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.Argument.Classes Assembly : CB.Connector.dll Syntax public sealed class CbIdentifier Properties ColumnName Gets the name of the column. Declaration public string ColumnName { get; } Property Value Type Description System.String The name of the column. Database Gets the name of the database. Declaration public string Database { get; } Property Value Type Description System.String The name of the table. IsColumn Gets a value indicating whether this instance represents a column. Declaration public bool IsColumn { get; } Property Value Type Description System.Boolean true if this instance represents a column; otherwise, false . IsSchema Gets a value indicating whether this instance represents a schema. Declaration public bool IsSchema { get; } Property Value Type Description System.Boolean true if this instance represents a schema; otherwise, false . IsTable Gets a value indicating whether this instance represents a table. Declaration public bool IsTable { get; } Property Value Type Description System.Boolean true if this instance represents a table; otherwise, false . Schema Gets the name of the schema. Declaration public string Schema { get; } Property Value Type Description System.String The name of the table. TableName Gets the name of the table. Declaration public string TableName { get; } Property Value Type Description System.String The name of the table. Methods GetSchemaName() Gets the full name of the schema. Declaration public string GetSchemaName() Returns Type Description System.String The full name of the schema. GetTableName() Gets the full name of the table. Declaration public string GetTableName() Returns Type Description System.String The full name of the table. ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Command.DataHandler.Argument.Classes.Block.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.Classes.Block.html",
    "title": "Class Block | CB Connector SDK website",
    "keywords": "Class Block Represents a set whose values are enclosed in parentheses. Inheritance System.Object Set Block Implements IArgument ITypedElement INamedElement IElement Inherited Members Set.Args Set.Count Set.Item[Int32] Set.Add(IArgument) Set.Clear() Set.Equals(Object) Set.GetHashCode() Set.Type Set.IsNullable Set.DefaultValue Set.Description Set.Name Set.QualifiedName Set.INamedElement.Owner System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.Argument.Classes Assembly : CB.Connector.dll Syntax public class Block : Set, IArgument, ITypedElement, INamedElement, IElement Constructors Block(IArgument) Initializes a new instance of the Block class. Declaration public Block(IArgument body) Parameters Type Name Description IArgument body The values enclosed in parentheses. Implements IArgument ITypedElement INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also Set"
  },
  "api/CB.Connector.Collections.Classes.ElementCollection-1.html": {
    "href": "api/CB.Connector.Collections.Classes.ElementCollection-1.html",
    "title": "Class ElementCollection<T> | CB Connector SDK website",
    "keywords": "Class ElementCollection<T> Provides the base class for a generic collection of key/value pairs that can be individually accessed by index and by key. Default implementation for Eager Loading . Inheritance System.Object ElementCollection<T> Implements IElementCollection <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable IIndexableCollection < System.String , T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Collections.Classes Assembly : CB.Connector.dll Syntax public class ElementCollection<T> : IElementCollection<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IIndexableCollection<string, T> where T : INamedElement Type Parameters Name Description T The type of elements in the collection. Constructors ElementCollection(IEnumerable<T>, Func<T, String>) Initializes a new instance of the ElementCollection<T> class as a wrapper for the specified enumerable. Declaration public ElementCollection(IEnumerable<T> elements, Func<T, string> keySelector = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> elements The collection whose elements are copied to the new collection. System.Func <T, System.String > keySelector A function to extract a key from an element. ElementCollection(Func<T, String>) Initializes a new instance of the ElementCollection<T> class that is empty. Declaration public ElementCollection(Func<T, string> keySelector = null) Parameters Type Name Description System.Func <T, System.String > keySelector A function to extract a key from an element. ElementCollection(Int32, Func<T, String>) Initializes a new instance of the ElementCollection<T> class that is empty, has the specified initial capacity. Declaration public ElementCollection(int capacity, Func<T, string> keySelector = null) Parameters Type Name Description System.Int32 capacity The initial number of elements that this instance can contain. System.Func <T, System.String > keySelector A function to extract a key from an element. Properties Count Gets the number of elements contained in the ElementCollection<T> . Declaration public int Count { get; } Property Value Type Description System.Int32 The number of elements contained in the ElementCollection<T> . Elements Gets the lookup dictionary of the ElementCollection<T> . Declaration protected IDictionary<string, T> Elements { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , T> The lookup dictionary of the ElementCollection<T> , if it exists; otherwise, null. IsReadOnly Gets a value indicating whether the ElementCollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean true if ElementCollection<T> is read-only; otherwise, false . Item[Int32] Gets or sets the element at the specified index. Declaration public virtual T this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the element. Property Value Type Description T The type of the value in the collection. Exceptions Type Condition System.NotSupportedException Cannot set value. Values Gets a collection containing the values in the ElementCollection<T> . Declaration public ICollection<T> Values { get; } Property Value Type Description System.Collections.Generic.ICollection <T> A collection containing the values in the ElementCollection<T> . Methods Add(T) Adds an item to the ElementCollection<T> . Declaration public void Add(T item) Parameters Type Name Description T item The object to add to the ElementCollection<T> . Clear() Removes all items from the ElementCollection<T> . Declaration public void Clear() Contains(T) Determines whether the ElementCollection<T> contains a specific value. Declaration public bool Contains(T item) Parameters Type Name Description T item The object to locate in the ElementCollection<T> . Returns Type Description System.Boolean true if item is found in the ElementCollection<T> ; otherwise, false . Contains(String) Determines whether the collection contains an element with the specified key. Declaration public bool Contains(string key) Parameters Type Name Description System.String key The key to locate in the ElementCollection<T> . Returns Type Description System.Boolean true if the ElementCollection<T> contains an element with the key; otherwise, false . CopyTo(T[], Int32) Copies the elements of the ElementCollection<T> to an System.Array , starting at a particular System.Array index. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array The one-dimensional System.Array that is the destination of the elements copied from ElementCollection<T> . The System.Array must have zero-based indexing. System.Int32 arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition System.IndexOutOfRangeException GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> An enumerator that can be used to iterate through the collection. GetKeyForItem(T) Extracts the key from the specified element. Declaration public string GetKeyForItem(T item) Parameters Type Name Description T item The element from which to extract the key. Returns Type Description System.String The key for the specified element. Remove(T) Removes the first occurrence of a specific object from the ElementCollection<T> . Declaration public bool Remove(T item) Parameters Type Name Description T item The object to remove from the ElementCollection<T> . Returns Type Description System.Boolean true if item was successfully removed from the ElementCollection<T> ; otherwise, false . This method also returns false if item is not found in the original ElementCollection<T> . TryGetValue<TValue>(String, out TValue) Gets the value of the specified type associated with the specified key. Declaration public bool TryGetValue<TValue>(string key, out TValue value) where TValue : T Parameters Type Name Description System.String key The key of the value to get. TValue value When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the object that implements ElementCollection<T> contains an element with the specified key; otherwise, false . Type Parameters Name Description TValue The type of the value to get. Explicit Interface Implementations IIndexableCollection<String, T>.Item[String] Declaration T IIndexableCollection<string, T>.this[string key] { get; set; } Parameters Type Name Description System.String key Returns Type Description T IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements IElementCollection<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IIndexableCollection<TKey, TValue> Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also CB.Connector.Collections.IElementCollection"
  },
  "api/CB.Connector.Classes.Session.html": {
    "href": "api/CB.Connector.Classes.Session.html",
    "title": "Class Session | CB Connector SDK website",
    "keywords": "Class Session Provides an abstract class for ISession . Inheritance System.Object Session Implements ISession System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Classes Assembly : CB.Connector.dll Syntax public abstract class Session : ISession, IDisposable Constructors Session(IConnector) Initializes a new instance of the Session class. Declaration protected Session(IConnector connector) Parameters Type Name Description IConnector connector A IConnector that represents the connection to a CB Server. Properties Connector Returns an instance of a class that implements the IConnector interface. Declaration public IConnector Connector { get; } Property Value Type Description IConnector A IConnector that represents the connection to a CB Server. DatabaseName Gets or sets the name of the database. Declaration public string DatabaseName { get; set; } Property Value Type Description System.String The database name as a string. Disposed Gets or sets a value indicating whether this Session is disposed. Declaration protected bool Disposed { get; set; } Property Value Type Description System.Boolean true if disposed; otherwise, false . HandlerFactory Returns an instance of a class that implements the IDataHandlerFactory interface. Declaration public abstract IDataHandlerFactory HandlerFactory { get; } Property Value Type Description IDataHandlerFactory An IDataHandlerFactory object that processes the request. MetaModel Returns an instance of a class that implements the IMetaModel interface. Declaration public abstract IMetaModel MetaModel { get; } Property Value Type Description IMetaModel An IMetaModel object that represents the mapping between a database and data source objects. SessionId Gets the name of the session. Declaration public Guid SessionId { get; } Property Value Type Description System.Guid The name of the session. State Gets or sets the state of the session after a CB command is performed on the connection. Declaration public SessionState State { get; set; } Property Value Type Description SessionState An SessionState enumeration. Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Finalize() Finalizes an instance of the Session class. Declaration protected void Finalize() Implements ISession System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ISession"
  },
  "api/CB.Connector.Caching.html": {
    "href": "api/CB.Connector.Caching.html",
    "title": "Namespace CB.Connector.Caching | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Caching Classes CachingProviderBase Default implementation of ICachingProviderBase . Interfaces ICachingProviderBase Represents an object cache that implements an in-memory cache."
  },
  "api/CB.Connector.Authentication.OAuth.html": {
    "href": "api/CB.Connector.Authentication.OAuth.html",
    "title": "Namespace CB.Connector.Authentication.OAuth | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Authentication.OAuth Classes OAuth2Client Provides a base class for OAuth 2.0 client implementation. Interfaces IOAuth2Configuration Provides a base interface for configuring OAuth 2.0 authentication."
  },
  "api/CB.Connector.Authentication.OAuth.Extensions.OAuth2Extensions.html": {
    "href": "api/CB.Connector.Authentication.OAuth.Extensions.OAuth2Extensions.html",
    "title": "Class OAuth2Extensions | CB Connector SDK website",
    "keywords": "Class OAuth2Extensions Holds extension methods for OAuth 2.0 authentication mechanism. Inheritance System.Object OAuth2Extensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Authentication.OAuth.Extensions Assembly : CB.Connector.dll Syntax public static class OAuth2Extensions Methods TryGetValue(IEnumerable<OAuthApplicationParameter>, String, out Object) Gets the value associated with the specified key. Declaration public static bool TryGetValue(this IEnumerable<OAuthApplicationParameter> parameters, string key, out object value) Parameters Type Name Description System.Collections.Generic.IEnumerable < MG.Plugin.Security.OAuth.OAuthApplicationParameter > parameters Reference to the calling object. System.String key The key of the value to get. System.Object value When this method returns, contains the value associated with the specified key, if the key is found; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true is the parameters contains an element with the specified key; otherwise, false . TryGetValue(String, String, out String) Gets the value associated with the specified key. Declaration public static bool TryGetValue(this string content, string key, out string value) Parameters Type Name Description System.String content Reference to the calling object. System.String key The key whose value to get. System.String value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true is the content contains an element with the specified key; otherwise, false ."
  },
  "api/CB.Connector.Authentication.Infrastructure.Extensions.html": {
    "href": "api/CB.Connector.Authentication.Infrastructure.Extensions.html",
    "title": "Namespace CB.Connector.Authentication.Infrastructure.Extensions | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Authentication.Infrastructure.Extensions Classes RequestFactoryExtensions Holds extension methods for IRequestFactory ."
  },
  "api/CB.Connector.Authentication.BasicAuth.IBasicAuthConfiguration.html": {
    "href": "api/CB.Connector.Authentication.BasicAuth.IBasicAuthConfiguration.html",
    "title": "Interface IBasicAuthConfiguration | CB Connector SDK website",
    "keywords": "Interface IBasicAuthConfiguration Provides a base interface for configuring basic authentication. Namespace : CB.Connector.Authentication.BasicAuth Assembly : CB.Connector.dll Syntax public interface IBasicAuthConfiguration Remarks Basic Authentication is a simple, standard method for providing a username and password to the authentication mechanism. Properties DomainName The domain name of the user who is currently logged on. Declaration string DomainName { get; set; } Property Value Type Description System.String The name of the domain. Password The password of the user who is currently logged on. Declaration string Password { get; set; } Property Value Type Description System.String The password. UserName The username of the user who is currently logged on. Declaration string UserName { get; set; } Property Value Type Description System.String The name of the user. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Command.DataHandler.Argument.Classes.AggregateFunction.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.Classes.AggregateFunction.html",
    "title": "Class AggregateFunction | CB Connector SDK website",
    "keywords": "Class AggregateFunction Provides an abstract class for IValuedFunction . Inheritance System.Object AggregateFunction AggregateFunctionSource Implements IValuedFunction IArgument ITypedElement INamedElement IElement Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.Argument.Classes Assembly : CB.Connector.dll Syntax public abstract class AggregateFunction : IValuedFunction, IArgument, ITypedElement, INamedElement, IElement Remarks Aggregate functions are used to get information from several rows, process that information in some way (e.g. complex calculation) and deliver a single-row value. COUNT, AVG, MAX, MIN, and SUM are well-known SQL aggregate functions. Constructors AggregateFunction(IArgument) Initializes a new instance of the AggregateFunction class. Declaration protected AggregateFunction(IArgument parameter) Parameters Type Name Description IArgument parameter The parameter(s) for the function. Properties DefaultValue Gets the default value of this instance. Declaration public virtual object DefaultValue { get; } Property Value Type Description System.Object The default value. Description Gets or sets the description defined for IElement . Declaration public virtual IDescriptor Description { get; set; } Property Value Type Description IDescriptor The description. IsNullable Gets a value indicating whether this instance that can accepts null values. Declaration public virtual bool IsNullable { get; } Property Value Type Description System.Boolean true if this instance does not accept null values; otherwise, false . Metadata Gets the function that has its place on the model. Declaration public abstract IFunction Metadata { get; } Property Value Type Description IFunction Name Gets the name of the named element. Declaration public virtual string Name { get; } Property Value Type Description System.String The name of the named element. Remarks Must not exceed 128 characters Owner Gets or sets the owner of the named element. Declaration public virtual INamedElement Owner { get; set; } Property Value Type Description INamedElement A System.String value that specifies the owner of the named element. Parameter Gets the parameter(s) for the function. Declaration public IArgument Parameter { get; } Property Value Type Description IArgument QualifiedName Gets the name that allows the named element to be identified within a hierarchy of nested namespaces. Declaration public virtual string QualifiedName { get; } Property Value Type Description System.String The qualified name. Remarks It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the named element itself. Type Gets the type of this instance. Declaration public IDataType Type { get; } Property Value Type Description IDataType Returns the data type. Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements IValuedFunction IArgument ITypedElement INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IValuedFunction"
  },
  "api/CB.Connector.Command.DataHandler.Argument.Classes.ScalarValuedFunction.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.Classes.ScalarValuedFunction.html",
    "title": "Class ScalarValuedFunction | CB Connector SDK website",
    "keywords": "Class ScalarValuedFunction Provides an abstract class for IValuedFunction . Inheritance System.Object ScalarValuedFunction Implements IValuedFunction IArgument ITypedElement INamedElement IElement Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.Argument.Classes Assembly : CB.Connector.dll Syntax public class ScalarValuedFunction : IValuedFunction, IArgument, ITypedElement, INamedElement, IElement Remarks Scalar-valued functions are used to calculate a scalar (single) value. Constructors ScalarValuedFunction(IFunction, IArgument) Initializes a new instance of the ScalarValuedFunction class. Declaration public ScalarValuedFunction(IFunction metadata, IArgument parameter) Parameters Type Name Description IFunction metadata The metadata. IArgument parameter The parameter(s) for the function. Properties DefaultValue Gets the default value of this instance. Declaration public virtual object DefaultValue { get; } Property Value Type Description System.Object The default value. Description Gets or sets the description defined for IElement . Declaration public IDescriptor Description { get; set; } Property Value Type Description IDescriptor The description. IsNullable Gets a value indicating whether this instance that can accepts null values. Declaration public bool IsNullable { get; } Property Value Type Description System.Boolean true if this instance does not accept null values; otherwise, false . Metadata Gets the function that has its place on the model. Declaration public IFunction Metadata { get; } Property Value Type Description IFunction Name Gets the name of the named element. Declaration public string Name { get; } Property Value Type Description System.String The name of the named element. Remarks Must not exceed 128 characters Owner Gets or sets the owner of the named element. Declaration public virtual INamedElement Owner { get; set; } Property Value Type Description INamedElement A System.String value that specifies the owner of the named element. Parameter Gets the parameter(s) for the function. Declaration public IArgument Parameter { get; } Property Value Type Description IArgument QualifiedName Gets the name that allows the named element to be identified within a hierarchy of nested namespaces. Declaration public string QualifiedName { get; } Property Value Type Description System.String The qualified name. Remarks It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the named element itself. Type Gets the type of this instance. Declaration public IDataType Type { get; } Property Value Type Description IDataType Returns the data type. Implements IValuedFunction IArgument ITypedElement INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IValuedFunction"
  },
  "api/CB.Connector.Exceptions.ConnectorExceptionType.html": {
    "href": "api/CB.Connector.Exceptions.ConnectorExceptionType.html",
    "title": "Enum ConnectorExceptionType | CB Connector SDK website",
    "keywords": "Enum ConnectorExceptionType Specifies the connector exception types. Namespace : CB.Connector.Exceptions Assembly : CB.Connector.dll Syntax public enum ConnectorExceptionType Fields Name Description ConversionException Thrown to indicate that the conversion has failed to complete successfully. Required arguments: detailed error message. DataSourceException Thrown when the data source returns error. Required arguments: detailed error message. ExecutionException Thrown when attempting to retrieve the result that aborted by throwing an exception. Required arguments: detailed error message. ModelBuildException Thrown when model-building failures occur. Required arguments: detailed error message. ModelLoadException Thrown when model-loading failures occur. Required arguments: detailed error message. NotInitializedException Thrown when an object has not been initialized. Required arguments: detailed error message. NullException Thrown to indicate a null reference. Required arguments: the name of the null object. ReadOnlyException Thrown when there is an attempt to change the value for a read-only property. Required arguments: the name of the read-only property. SearchableException Thrown when there is an attempt to change search the value of a non-searchable property. Required arguments: the name of the non-searchable property. TestConnectionException Thrown when the connection failures occur. No required arguments UnexpectedException Thrown when an unexpected error occurs. Required arguments: detailed error message. UnsupportedDataTypeException Thrown when a specified data type is not supported. Required arguments: the name of the data type that is not supported. UnsupportedFilterCriteriaException Thrown when a specified filter criteria is not supported. Required arguments: the name of the filter criteria that is not supported. UnsupportedHandlerException Thrown when a specified data handler is not supported. Required arguments: the name of the handler that is not supported. UnsupportedOperationException Thrown to indicate that the requested operation is not supported. Required arguments: the name of the operation that is not supported. Extension Methods ConnectorPropertiesExtensions.TryParse(Type, Object) ConnectorPropertiesExtensions.Parse(Type) ConnectorPropertiesExtensions.Decrypt(String) ConnectorPropertiesExtensions.Encrypt(String) ConnectorPropertiesExtensions.IsEncrypted(String, Encoding)"
  },
  "api/CB.Connector.Collections.Classes.ColumnArgumentCollection.html": {
    "href": "api/CB.Connector.Collections.Classes.ColumnArgumentCollection.html",
    "title": "Class ColumnArgumentCollection | CB Connector SDK website",
    "keywords": "Class ColumnArgumentCollection Provides class for lazy loadable collection of IColumnArguments Inheritance System.Object LoadableCollection < IColumnArgument > ColumnArgumentCollection Implements IElementCollection < IColumnArgument > System.Collections.Generic.ICollection < IColumnArgument > System.Collections.Generic.IEnumerable < IColumnArgument > System.Collections.IEnumerable IIndexableCollection < System.String , IColumnArgument > Inherited Members LoadableCollection<IColumnArgument>.Loader LoadableCollection<IColumnArgument>.Ghost LoadableCollection<IColumnArgument>.Elements LoadableCollection<IColumnArgument>.IsLoaded LoadableCollection<IColumnArgument>.LoadedValues LoadableCollection<IColumnArgument>.GetEnumerator() LoadableCollection<IColumnArgument>.IEnumerable.GetEnumerator() LoadableCollection<IColumnArgument>.Add(IColumnArgument) LoadableCollection<IColumnArgument>.Clear() LoadableCollection<IColumnArgument>.Contains(IColumnArgument) LoadableCollection<IColumnArgument>.CopyTo(IColumnArgument[], Int32) LoadableCollection<IColumnArgument>.Remove(IColumnArgument) LoadableCollection<IColumnArgument>.Count LoadableCollection<IColumnArgument>.IsReadOnly LoadableCollection<IColumnArgument>.IIndexableCollection<String, IColumnArgument>.Item[String] LoadableCollection<IColumnArgument>.IIndexableCollection<String, IColumnArgument>.Item[Int32] LoadableCollection<IColumnArgument>.Values LoadableCollection<IColumnArgument>.GetKeyForItem(IColumnArgument) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Collections.Classes Assembly : CB.Connector.dll Syntax public class ColumnArgumentCollection : LoadableCollection<IColumnArgument>, IElementCollection<IColumnArgument>, ICollection<IColumnArgument>, IEnumerable<IColumnArgument>, IEnumerable, IIndexableCollection<string, IColumnArgument> Constructors ColumnArgumentCollection(ILoader, INamedElement, Func<IColumnArgument, String>) Constructor Declaration public ColumnArgumentCollection(ILoader loader, INamedElement ghost, Func<IColumnArgument, string> keySelector = null) Parameters Type Name Description ILoader loader INamedElement ghost System.Func < IColumnArgument , System.String > keySelector ColumnArgumentCollection(ILoader, Func<IColumnArgument, String>) Constructor Declaration public ColumnArgumentCollection(ILoader loader, Func<IColumnArgument, string> keySelector = null) Parameters Type Name Description ILoader loader System.Func < IColumnArgument , System.String > keySelector Methods Contains(String) Declaration public override bool Contains(string key) Parameters Type Name Description System.String key Returns Type Description System.Boolean Overrides CB.Connector.Collections.Classes.LoadableCollection<CB.Connector.Command.DataHandler.Argument.IColumnArgument>.Contains(System.String) TryGetValue<TValue>(String, out TValue) Declaration public override bool TryGetValue<TValue>(string key, out TValue value) where TValue : IColumnArgument Parameters Type Name Description System.String key TValue value Returns Type Description System.Boolean Type Parameters Name Description TValue Overrides CB.Connector.Collections.Classes.LoadableCollection<CB.Connector.Command.DataHandler.Argument.IColumnArgument>.TryGetValue<TValue>(System.String, TValue) Implements IElementCollection<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IIndexableCollection<TKey, TValue> Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IElementCollection <T>"
  },
  "api/CB.Connector.Collections.Classes.RequestedElementCollection.RequestedElement-1.html": {
    "href": "api/CB.Connector.Collections.Classes.RequestedElementCollection.RequestedElement-1.html",
    "title": "Class RequestedElementCollection.RequestedElement<T> | CB Connector SDK website",
    "keywords": "Class RequestedElementCollection.RequestedElement<T> Represents an element that was requested. Inheritance System.Object RequestedElementCollection.RequestedElement<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Collections.Classes Assembly : CB.Connector.dll Syntax public class RequestedElement<T> Type Parameters Name Description T The type of element. Constructors RequestedElement(T, Boolean) Initializes a new instance of the RequestedElementCollection.RequestedElement<T> class. Declaration public RequestedElement(T element, bool requested = true) Parameters Type Name Description T element The element. System.Boolean requested True value means that the element is requested. Properties Element Gets the element. Declaration public T Element { get; } Property Value Type Description T The element. Requested Gets a value indicating whether this RequestedElementCollection.RequestedElement<T> is requested. Declaration public bool Requested { get; } Property Value Type Description System.Boolean true if requested; otherwise, false . Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Property.InterfaceContractResolver.html": {
    "href": "api/CB.Connector.Property.InterfaceContractResolver.html",
    "title": "Class InterfaceContractResolver | CB Connector SDK website",
    "keywords": "Class InterfaceContractResolver Default implementation of Newtonsoft.Json.Serialization.DefaultContractResolver . Inheritance System.Object Newtonsoft.Json.Serialization.DefaultContractResolver InterfaceContractResolver Implements Newtonsoft.Json.Serialization.IContractResolver Inherited Members Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type) Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type) Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type) Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo, Newtonsoft.Json.Serialization.JsonPropertyCollection) Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo) Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type) Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type) Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type) Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type) Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type) Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type) Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type) Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type) Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type) Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo) Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String) Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveExtensionDataName(System.String) Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String) Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String) Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute Newtonsoft.Json.Serialization.DefaultContractResolver.NamingStrategy System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Property Assembly : CB.Connector.dll Syntax public class InterfaceContractResolver : DefaultContractResolver, IContractResolver Constructors InterfaceContractResolver(Type) Initializes a new instance of the InterfaceContractResolver class. Declaration public InterfaceContractResolver(Type type) Parameters Type Name Description System.Type type The type. Methods CreateProperties(Type, MemberSerialization) Creates properties for the given Newtonsoft.Json.Serialization.JsonContract . Declaration protected override IList<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization) Parameters Type Name Description System.Type type The type to create properties for. Newtonsoft.Json.MemberSerialization memberSerialization The member serialization mode for the type. Returns Type Description System.Collections.Generic.IList < Newtonsoft.Json.Serialization.JsonProperty > Properties for the given Newtonsoft.Json.Serialization.JsonContract . Overrides Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization) CreateProperty(MemberInfo, MemberSerialization) Creates a Newtonsoft.Json.Serialization.JsonProperty for the given System.Reflection.MemberInfo . Declaration protected override JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization) Parameters Type Name Description System.Reflection.MemberInfo member The member to create a Newtonsoft.Json.Serialization.JsonProperty for. Newtonsoft.Json.MemberSerialization memberSerialization The member's parent Newtonsoft.Json.MemberSerialization . Returns Type Description Newtonsoft.Json.Serialization.JsonProperty A created Newtonsoft.Json.Serialization.JsonProperty for the given System.Reflection.MemberInfo . Overrides Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization) Implements Newtonsoft.Json.Serialization.IContractResolver Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also Newtonsoft.Json.Serialization.DefaultContractResolver"
  },
  "api/CB.Connector.Collections.Classes.LoadableCollection-1.html": {
    "href": "api/CB.Connector.Collections.Classes.LoadableCollection-1.html",
    "title": "Class LoadableCollection<T> | CB Connector SDK website",
    "keywords": "Class LoadableCollection<T> Provides the base class for a generic collection of key/value pairs that can be individually accessed by index and by key. Default implementation for Lazy Loading . Inheritance System.Object LoadableCollection<T> ColumnArgumentCollection Implements IElementCollection <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable IIndexableCollection < System.String , T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Collections.Classes Assembly : CB.Connector.dll Syntax public class LoadableCollection<T> : IElementCollection<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IIndexableCollection<string, T> where T : INamedElement Type Parameters Name Description T The type of elements in the collection. Constructors LoadableCollection(ILoader, INamedElement, Func<T, String>) Initializes a new instance of the LoadableCollection<T> class. Declaration public LoadableCollection(ILoader loader, INamedElement ghost, Func<T, string> keySelector = null) Parameters Type Name Description ILoader loader An ILoader object that enable loading an element (or a set of elements). INamedElement ghost Corresponds to the real object, but not in its full state. It may be empty, or it may contain just some fields (such as the Name, QualifiedName, etc,). When the user tries to access some fields that haven't been loaded yet, the ghost object fully initializes itself. System.Func <T, System.String > keySelector A function to extract a key from an element. LoadableCollection(ILoader, Func<T, String>) Initializes a new instance of the LoadableCollection<T> class. Declaration public LoadableCollection(ILoader loader, Func<T, string> keySelector = null) Parameters Type Name Description ILoader loader An ILoader object that enable loading an element (or a set of elements). System.Func <T, System.String > keySelector A function to extract a key from an element. Fields Ghost ghost object (the collection owner) Declaration protected readonly INamedElement Ghost Field Value Type Description INamedElement Loader collection loader member Declaration protected readonly ILoader Loader Field Value Type Description ILoader Properties Count Gets the number of elements contained in the LoadableCollection<T> . Declaration public int Count { get; } Property Value Type Description System.Int32 The number of elements contained in the LoadableCollection<T> . Elements Gets the lookup dictionary of the LoadableCollection<T> . Declaration protected IDictionary<string, T> Elements { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , T> The lookup dictionary of the LoadableCollection<T> , if it exists; otherwise, null. IsLoaded Gets or sets a value indicating whether this instance is fully loaded. Declaration public bool IsLoaded { get; set; } Property Value Type Description System.Boolean true if this instance is fully loaded; otherwise, false . IsReadOnly Gets a value indicating whether the LoadableCollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean true if LoadableCollection<T> is read-only; otherwise, false . LoadedValues Gets a collection containing the loaded values in the generic collection of key/value pairs. Declaration public ICollection<T> LoadedValues { get; } Property Value Type Description System.Collections.Generic.ICollection <T> A collection containing the loaded values in the generic collection of key/value pairs. Values Gets a collection containing the values in the LoadableCollection<T> . Declaration public ICollection<T> Values { get; } Property Value Type Description System.Collections.Generic.ICollection <T> A collection containing the values in the LoadableCollection<T> . Methods Add(T) Adds an item to the LoadableCollection<T> . Declaration public void Add(T item) Parameters Type Name Description T item The object to add to the LoadableCollection<T> . Clear() Removes all items from the LoadableCollection<T> . Declaration public void Clear() Contains(T) Determines whether the LoadableCollection<T> contains a specific value. Declaration public bool Contains(T item) Parameters Type Name Description T item The object to locate in the LoadableCollection<T> . Returns Type Description System.Boolean true if item is found in the LoadableCollection<T> ; otherwise, false . Contains(String) Determines whether the collection contains an element with the specified key. Declaration public virtual bool Contains(string key) Parameters Type Name Description System.String key The key to locate in the LoadableCollection<T> . Returns Type Description System.Boolean true if the LoadableCollection<T> contains an element with the key; otherwise, false . CopyTo(T[], Int32) Copies the elements of the LoadableCollection<T> to an System.Array , starting at a particular System.Array index. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array The one-dimensional System.Array that is the destination of the elements copied from LoadableCollection<T> . The System.Array must have zero-based indexing. System.Int32 arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition System.IndexOutOfRangeException GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> An enumerator that can be used to iterate through the collection. GetKeyForItem(T) Extracts the key from the specified element. Declaration public string GetKeyForItem(T item) Parameters Type Name Description T item The element from which to extract the key. Returns Type Description System.String The key for the specified element. Remove(T) Removes the first occurrence of a specific object from the LoadableCollection<T> . Declaration public bool Remove(T item) Parameters Type Name Description T item The object to remove from the LoadableCollection<T> . Returns Type Description System.Boolean true if item was successfully removed from the LoadableCollection<T> ; otherwise, false . This method also returns false if item is not found in the original LoadableCollection<T> . TryGetValue<TValue>(String, out TValue) Gets the value of the specified type associated with the specified key. Declaration public virtual bool TryGetValue<TValue>(string key, out TValue value) where TValue : T Parameters Type Name Description System.String key The key of the value to get. TValue value When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the object that implements LoadableCollection<T> contains an element with the specified key; otherwise, false . Type Parameters Name Description TValue The type of the value to get. Explicit Interface Implementations IIndexableCollection<String, T>.Item[Int32] Declaration T IIndexableCollection<string, T>.this[int index] { get; set; } Parameters Type Name Description System.Int32 index Returns Type Description T IIndexableCollection<String, T>.Item[String] Declaration T IIndexableCollection<string, T>.this[string key] { get; set; } Parameters Type Name Description System.String key Returns Type Description T IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements IElementCollection<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IIndexableCollection<TKey, TValue> Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IElementCollection <T>"
  },
  "tutorials/topic1_3_3.html": {
    "href": "tutorials/topic1_3_3.html",
    "title": "Implementing DataHandlerFactory.cs | CB Connector SDK website",
    "keywords": "Implementing DataHandlerFactory.cs Creating the new class If you have choosen to create your connector solution using Visual Studio Project Template, you can skip this step. Start by creating a new HandlerFactory class. You need to implement methods from the the CB.Connector library, so a reference to this library is required in your class. using CB.Connector.Classes; using CB.Connector.Command.DataHandler; Implement the TryCreate method First implement the TryCreate method . This method is called by CB Server to check if your custom connector supports a specific SQL data manipulation command , and if so, to get a new data handler object, as shown in the following example: public override bool TryCreate(out Where handler) { //Where clause is supported by the custom connector. handler = new WhereHandler(Session); return true; } public virtual bool TryCreate(out Having handler) { //Having clause is not supported by the custom connector. handler = null; return false; }"
  },
  "tutorials/topic1_3.html": {
    "href": "tutorials/topic1_3.html",
    "title": "Implementing mandatory classes | CB Connector SDK website",
    "keywords": "Implementing mandatory classes The following mandatory classes requires implementation: A class extending BaseConnector.cs reference . A class defining the properties required to interact with your specific data source (see ConnectorProperties.cs reference ). A class extending DataHandlerFactory.cs reference . A class extending Session.cs reference ."
  },
  "tutorials/topic1_2.html": {
    "href": "tutorials/topic1_2.html",
    "title": "Adding the CB.Connector Library to your solution | CB Connector SDK website",
    "keywords": "Adding the CB.Connector Library to your solution Do the following: Copy CB.Connector.dll and CB.Connector.xml from the SDK .zip file to your project folder. In Visual Studio, right-click References and select Add References… in the Solution Explorer . Under Projects > Solution , click Browse . Find the path to CB.Connector.dll in your solution folder. Select it and click Open . Click Add ."
  },
  "tutorials/topic4.html": {
    "href": "tutorials/topic4.html",
    "title": "Reference | CB Connector SDK website",
    "keywords": "Reference This section provides reference information for: CB.Connector library CB custom connectors Supported SQL Commands Command Or Option Data Handler Description SELECT SelectSink Retrieves data DISTINCT Distinct Limits values to unique values AGGREGATE FUNCTIONS Aggregate Used with SELECT to return mathematical summaries on columns FROM TableSource, TableFunctionSource Specifies from which tables or table-valued functions to retrieve data INNER JOIN InnerJoin Returns only the rows with matching values in both tables RIGHT JOIN RightJoin Returns rows with matching values and includes all rows from the right table with unmatched values. LEFT JOIN LeftJoin Returns rows with matching values and includes all rows from the left table with unmatched values. CROSS JOIN CrossJoin Returns the Cartesian product between two or more tables FULL JOIN FullJoin Returns rows with matching values and includes all rows from both tables with unmatched values. WHERE Where Restricts the selection of rows based on a search criterion HAVING Having Restricts the selection of grouped rows based on a search criterion GROUP BY Aggregate Groups the selected rows based on one or more attributes ORDER BY OrderBy Orders the selected rows based on one or more attributes INSERT InsertSink Adds one or more rows of data UPDATE UpdateSink Modifies existing data DELETE DeleteSink Removes one or more rows of data EXEC ExecuteSink Executes a stored procedure or function Supported Data Types Primitive Types Type Description MgAnyType Type to which all other types conform MgBoolean Binary-valued logic (true, false or UNKNOWN) MgByteArray Binary data MgByte Unsigned 8-bit integer MgChar Unicode 16-bit character MgDateTime Date and time w/ time-zone offset MgDecimal Numeric values with decimal representation MgDouble Binary64 Floating-point number MgInt16 Signed 16-bit integer MgInt32 Signed 32-bit integer MgInt64 Signed 64-bit integer MgSbyte Signed 8-bit integer MgSingle Binary32 Floating-point number MgString Sequence of UTF-8 characters MgUInt16 Unsigned 32-bit integer MgUInt32 Unsigned 16-bit integer MgUInt64 Unsigned 64-bit integer Parametric Types Type Description ParametricType Parametrized over type Complex Types Type Description TableType Represents the definition of a table structure Supported SQL Functions Note Creating SQL scalar-valued, aggregate or table-valued functions is a task that you would perform when designing your custom connector. Arithmetic Functions Arithmetic Description add Add div Subtract mult Multiply sub Divide mod Raise to the power of Aggregate Functions Aggregate Description COUNT The number of rows with non-null values for a given attribute MIN The minimum attribute value found in an attribute MAX The maximum attribute value found in an attribute SUM The sum of all values for a given attribute AVG The average of all values for a given attribute Supported SQL Operators Comparison Operators Comparison Description = Equal to < Less than > Greater than <= Less than or equal to >= Greater than or equal to <>, !=, ^= Not equal to Logical Operators Logical Description AND Combines multiple conditions OR Combines multiple conditions NOT Negates a condition Special Operators Special Description BETWEEN Checks whether an attribute value is within a range IS NULL Checks whether an attribute value is null LIKE Checks whether an attribute value matches a given string pattern IN Checks whether an attribute value matches any value within a list Discovering Schemas The following sections show how to obtain schema information. System Procedures Query the following system procedures to access schema information, and statistics. Procedure Description SPSYSODBCTABLES Lists the available tables. SPSYSODBCCOLUMNS Describes the columns of the available tables. SPSYSODBCPRIMARYKEYS Describes the primary keys. SPSYSODBCPROCEDURES Describes the available stored procedures. SPSYSODBCPROCEDURECOLUMNS Lists all columns of a specified procedure. SPSYSODBCTYPES Lists the available types. SPSYSODBCSPECIALCOLUMNS Lists all columns of a table with special information. SPSYSODBCSTATISTICS Lists statistics and indices associated with a table. System Functions The following system functions return information about the database and database objects: Function Description SCOPE_IDENTITY Returns the last identity(ies) value(s) inserted into one or multiple column(s) in the same scope."
  },
  "tutorials/topic2.html": {
    "href": "tutorials/topic2.html",
    "title": "Samples | CB Connector SDK website",
    "keywords": "Samples We maintain a list of samples on the cb-connector-sdk-samples repo on Github. Each of the links below links to a folder in the sample repository. Generally these folders include a readme, and a project file for Visual Studio. Functionality Sample Description Link CBMSSQLConnector This very simple sample shows the basic structure of a connector. This sample shows how to implement a simple connector for Microsoft SQL Server (MSSQL) using CB Connector SDK. Github Link OAuth Sample Description Link CBGmailConnector This connector sample shows how to implement a simple connector for Gmail API using CB Connector SDK. Github Link"
  },
  "tutorials/topic1_4.html": {
    "href": "tutorials/topic1_4.html",
    "title": "Define your connector logic | CB Connector SDK website",
    "keywords": "Define your connector logic Finally, we get to the heart of the matter: supported SQL commands, functions, and operators. This is the hardest part of writing a custom connector, but with a little csharp knowledge, you can do it! Once you have defined the supported SQL commands, functions, and operators; and how the data will be processed you can handle API calls and returned results. The basic workflow for this is depicted below. Overview Most custom connectors will do the following: Transform an SQL query into an API operation. Call the API operation, and retrieve the data. If your data source provides a query language, you should start by defining a data structure containing the parts from which an API operation is constructed. Parse the data into a set of rows and columns. You will need to know how the data from your data source will be returned. Web APIs frequently return data in .json and .xml formats. If your data source paginates its data, you may need to make multiple API calls to get all the data. If your data source returns data in a compatible format, you may be able to parse and store the data in one simple call."
  },
  "tutorials/topic1_3_4.html": {
    "href": "tutorials/topic1_3_4.html",
    "title": "Implementing Session.cs | CB Connector SDK website",
    "keywords": "Implementing Session.cs Creating the new class If you have choosen to create your connector solution using Visual Studio Project Template, you can skip this step. Start by creating a new ExecutionSession class. A reference to CB.Connector library is required in your class. using CB.Connector; using CB.Connector.Classes; using CB.Connector.Metadata.MetaModel; using CB.Connector.Metadata.MetaModel.Factories; Implement the Constructor First implement the constructor. Do the following: Create an instance of a class that implements the IMetaModel interface. There are several options available for loading related data in custom connectors. It is important for you to understand these options. The following are the options for loading related data: Eager Loading , which is used to load all the needed objects at once (all the child objects will be loaded during a single call). A large amount of data is loaded at once. See IBuilder.cs reference . Lazy Loading , which is used to defer initialization of an object until the point at which is needed (a child object is loaded only when it is accessed for the first time). See ILoader.cs reference . Tip Depending on the size of those objects, it is recommended to use caching . Caching enables you to store data in memory for rapid access. Create an instance of a class that implements the IDataHandlerFactory interface. The following code example shows the final implementation: public ExecutionSession(Connector connector) : base(connector) { string connString = connector.ConnectorProperties.ConnectionString; if (connString == null) { throw new Exception(\"ConnectionString property is missing!\"); } string targetDatabase = connString.Split(';').FirstOrDefault(x => x.StartsWith(\"Database\", StringComparison.OrdinalIgnoreCase)); if (targetDatabase == null) { throw new Exception(\"Database in ConnectionString property is missing!\"); } int assignmentPos = targetDatabase.IndexOf('='); if (assignmentPos > 0) { targetDatabase = targetDatabase.Substring(assignmentPos + 1); } if (connector.CachingProvider.ContainsKey(targetDatabase)) { MetaModel = (IMetaModel)connector.CachingProvider.GetItem(targetDatabase, DateTime.UtcNow.AddMinutes(10)); } else { var loader = new SqlMetaDataLoader(this); MetaModel = LazyMetaModelFactory.Instance.CreateMetaModel(targetDatabase, \"dbo\", loader); connector.CachingProvider.AddItem(MetaModel.Name, MetaModel, DateTime.UtcNow.AddMinutes(10)); } HandlerFactory = new HandlerFactory(this); //Defines a data structure containing the query language definition of your data source. CommandInfo = new ContextSqlCommandInfo(); }"
  },
  "tutorials/topic1_1.html": {
    "href": "tutorials/topic1_1.html",
    "title": "Creating a new solution in Microsoft Visual Studio | CB Connector SDK website",
    "keywords": "Creating a new solution in Microsoft Visual Studio Creating a new solution Using Visual Studio Project Template Do the following: Install the VSIX Project Template . Installing the VSIX Project Template for Visual Studio will create a new Connector Class Library (.Net Framework) template in Visual Studio. Open Visual Studio and create a New Project . Select Other Languages > Visual C# > Connector Class Library (.NET Framework) . Name the project. The recommended format for the name is CB<YourSource>Connector . For example, CBGoogleConnector. Select your preferred Location . Click OK to open New CB Connector Class Library dialog box. Fill out the options as you want and click Finish to create your project. Creating a new empty solution Do the following: Open Visual Studio and create a New Project. Select Other Languages > Visual C# > Class Library (.NET Framework) . Name the project. The recommended format for the name is CB<YourSource>Connector . For example, CBGoogleConnector. Select your preferred Location . Click OK to create your project."
  },
  "tutorials/topic1.html": {
    "href": "tutorials/topic1.html",
    "title": "Getting Started | CB Connector SDK website",
    "keywords": "Getting Started Prerequisites The following prerequisites must be fulfilled in order to get started with CB Connector SDK: Microsoft .NET Framework 4.6 or later Microsoft Visual Studio 2010 or later Connect Bridge Platform with a license for connector development CB.Connector.dll Note Please contact us via e-mail at office@connecting-software.com for a free download of Connect Bridge Platform and CB Connector SDK, and we’ll respond within 24 hours. Getting Started with CB Connector SDK This guide contains a variety of documentation articles, walkthroughs and tutorials that can help you get started quickly. The following steps are required to create your own custom connector: Creating a new solution in Microsoft Visual Studio. Implementing mandatory classes Define your connector logic Building your solution Making your own custom connector recognizable by CB Server"
  },
  "tutorials/topic1_6.html": {
    "href": "tutorials/topic1_6.html",
    "title": "Making your own custom connector recognizable by CB Server | CB Connector SDK website",
    "keywords": "Making your own custom connector recognizable by CB Server Please contact us via e-mail at office@connecting-software.com for a valid license file including your custom connector name."
  },
  "tutorials/topic1_3_1.html": {
    "href": "tutorials/topic1_3_1.html",
    "title": "Implementing BaseConnector.cs | CB Connector SDK website",
    "keywords": "Implementing BaseConnector.cs Creating the new class If you have choosen to create your connector solution using Visual Studio Project Template, you can skip this step. Start by creating a new Connector class. You need to implement two methods from the BaseConnector class using the CB.Connector library. A reference to this library is required in your class. using CB.Connector.Classes; using CB.Connector.Exceptions; Implementing the TestConnection method First implement the TestConnection(TProperty) method . This method is called by CB Server to test the connection against your specific data source and to retrieve the configuration properties, as shown in the following example: public override Properties TestConnection(Properties properties) { try { //Perform an operation against your specific data source using (var conn = new SqlConnection(properties.ConnectionString)) { var database = new Server(new ServerConnection(conn)).Databases[conn.Database]; database.AutoClose = true; return properties; } } catch (Exception e) { //Use custom exception for additional information throw ConnectorExceptionFactory.Create(ConnectorExceptionType.TestConnectionException, e); } } Implementing the Dispose() method The next step is to implement the Dispose() method to realease resources, as shown in the following example: #region IDisposable private bool _disposed; ~Connector() { Dispose(false); } //Performs application-defined tasks associated with freeing, releasing, or resetting resources. public override void Dispose() { Dispose(true); GC.SuppressFinalize(this); } // Releases resources. protected virtual void Dispose(bool disposing) { if (_disposed) return; if (disposing) foreach (var session in Sessions) session?.Dispose(); _disposed = true; } #endregion Example The following code example shows the final implementation: public class Connector : BaseConnector<Properties, ExecutionSession> { ///<summary> /// The recommended format for the name is CB\\<YourSource\\>Connector*. /// You can set to MSolDev1, MSolDev2 or MSolDev3 if your connector does not belong to CB licensing system. ///</summary> public override string Name { get; } = \"CBTestConnector\"; public override string Description { get; } = \"SQL Database Connector\"; public override string Author { get; } = \"Connecting Software\"; public override Properties TestConnection(Properties properties) { try { using (var conn = new SqlConnection(properties.ConnectionString)) { var database = new Server(new ServerConnection(conn)).Databases[conn.Database]; database.AutoClose = true; return ConnectorProperties; } } catch (Exception e) { throw ConnectorExceptionFactory.Create(ConnectorExceptionType.TestConnectionException, e); } } #region IDisposable private bool _disposed; /// <summary> Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. </summary> public override void Dispose() { Dispose(true); GC.SuppressFinalize(this); } /// <summary> Finalizes an instance of the <see cref=\"BaseConnector{TProperty,TSession}.Sessions\" /> class. </summary> ~Connector() { Dispose(false); } /// <summary> /// Releases unmanaged and - optionally - managed resources. /// </summary> /// <param name=\"disposing\"> /// <c>true</c> to release both managed and unmanaged resources; /// <c>false</c> to release only unmanaged resources. /// </param> protected virtual void Dispose(bool disposing) { if (_disposed) return; if (disposing) foreach (var session in Sessions) session?.Dispose(); _disposed = true; } #endregion }"
  },
  "tutorials/topic1_3_2.html": {
    "href": "tutorials/topic1_3_2.html",
    "title": "Implementing ConnectorProperties.cs | CB Connector SDK website",
    "keywords": "Implementing ConnectorProperties.cs Creating the new class If you have choosen to create your connector solution using Visual Studio Project Template, you can skip this step. Start by creating a new Properties class. You need to implement one method from the ConnectorProperties class using the CB.Connector library. A reference to this library is required in your class. using CB.Connector.Property; Implementing the GetKey() method If you have choosen to create your connector solution using Visual Studio Project Template, you can skip this step. First implement the GetKey() method . This returns the private RSA key used to encrypt and decrypt data with the RSA algorithm. To generate a private/public RSA key pair, do the following: Download the RSAKeyHelperApp.exe . Double-click RSAKeyHelperApp.exe to open Command Prompt window. Defining properties The next step is to define the properties required to interact with your specific data source. Specify authentication type There are several options available for user authentication in custom connectors. It is important for you to understand these options. The following are the options for configuring user authentication: OAuth 2.0 Authentication (see IOAuth2Configuration.cs reference ) Basic Authentication (see IBasicAuthConfiguration.cs reference ) No Authentication Create the properties definition After you apply the ConnectorPropertyAttribute , you can begin to define the specifics of your attribute. The following code example describes this process: //No authentication public class Properties : ConnectorProperties<Properties> { //Apply the ConnectorPropertyAttribute [ConnectorProperty( Key = \"ConnectionString\", Name = \"ConnectionString\", Description = \"A string that specifies information about a data source and the means of connecting to it.\", Flags = ConnectorPropertyFlags.None, IsEncrypted = false )] public string ConnectionString { get; set; } protected override string GetKey() { //In case your connector has no encrypted property. return string.Empty; } }"
  },
  "api/CB.Connector.Metadata.DataModel.Classes.ResultStateChanged.html": {
    "href": "api/CB.Connector.Metadata.DataModel.Classes.ResultStateChanged.html",
    "title": "Class ResultStateChanged | CB Connector SDK website",
    "keywords": "Class ResultStateChanged Represents an event for when the current state of the result changes. Inheritance System.Object System.EventArgs ResultStateChanged Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.DataModel.Classes Assembly : CB.Connector.dll Syntax public class ResultStateChanged : EventArgs Constructors ResultStateChanged(ResultState, ResultState) Initializes a new instance of the ResultStateChanged class. Declaration public ResultStateChanged(ResultState current, ResultState previous) Parameters Type Name Description ResultState current The current state of the result. ResultState previous The previous state of the result. Properties CurrentState Gets a ResultState enumeration. Declaration public ResultState CurrentState { get; } Property Value Type Description ResultState Returns a ResultState enumeration indicating the current state of the result. PreviousState Gets a ResultState enumeration. Declaration public ResultState PreviousState { get; } Property Value Type Description ResultState Returns a ResultState enumeration indicating the previous state of the result. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also System.EventArgs"
  },
  "api/CB.Connector.Exceptions.ConnectorExceptionFactory.html": {
    "href": "api/CB.Connector.Exceptions.ConnectorExceptionFactory.html",
    "title": "Class ConnectorExceptionFactory | CB Connector SDK website",
    "keywords": "Class ConnectorExceptionFactory Factory implementation that always creates ConnectorException objects. Inheritance System.Object ConnectorExceptionFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Exceptions Assembly : CB.Connector.dll Syntax public static class ConnectorExceptionFactory Methods Create(ConnectorExceptionType, Exception, Object[]) Creates an exception with a specified exception type, inner exception and parameters. Declaration public static Exception Create(ConnectorExceptionType exceptionType, Exception inner, params object[] parameters) Parameters Type Name Description ConnectorExceptionType exceptionType An ConnectorExceptionType enumeration. System.Exception inner The exception that is the cause of the current exception, or a null reference if no inner exception is specified. System.Object [] parameters An array of arguments that are part of the error message (e.g. error messages, nameof, type, etc.). Returns Type Description System.Exception System.Exception Create(ConnectorExceptionType, Exception, String) Creates an exception with a specified exception type, inner exception and detail information. Declaration public static Exception Create(ConnectorExceptionType exceptionType, Exception inner, string detail) Parameters Type Name Description ConnectorExceptionType exceptionType An ConnectorExceptionType enumeration. System.Exception inner The exception that is the cause of the current exception, or a null reference if no inner exception is specified. System.String detail The detail information. Returns Type Description System.Exception A new System.Exception instance. Create(ConnectorExceptionType, Object[]) Creates an exception with a specified exception type and parameters. Declaration public static Exception Create(ConnectorExceptionType exceptionType, params object[] parameters) Parameters Type Name Description ConnectorExceptionType exceptionType An ConnectorExceptionType enumeration. System.Object [] parameters An array of arguments that are part of the error message (e.g. error messages, nameof, type, etc.). Returns Type Description System.Exception A new System.Exception instance."
  },
  "api/CB.Connector.Exceptions.ConnectorException.html": {
    "href": "api/CB.Connector.Exceptions.ConnectorException.html",
    "title": "Class ConnectorException | CB Connector SDK website",
    "keywords": "Class ConnectorException Represents errors that occur on connector side execution. Inheritance System.Object System.Exception CB.Exceptions.CbException ConnectorException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members CB.Exceptions.CbException.ErrorCode System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : CB.Connector.Exceptions Assembly : CB.Connector.dll Syntax public class ConnectorException : CbException, ISerializable, _Exception Constructors ConnectorException(String, Int32) Initializes a new instance of the ConnectorException class with a specified error message and coded numerical value. Declaration public ConnectorException(string message, int errorCode) Parameters Type Name Description System.String message The error message. System.Int32 errorCode The coded numerical value that is assigned to a specific exception. ConnectorException(String, Int32, Exception) Initializes a new instance of the ConnectorException class with a specified error message, coded numerical value and a reference to the inner exception that is the cause of this exception. Declaration public ConnectorException(string message, int errorCode, Exception inner) Parameters Type Name Description System.String message The error message. System.Int32 errorCode The coded numerical value that is assigned to a specific exception. System.Exception inner The exception that is the cause of the current exception, or a null reference if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also CB.Exceptions.CbException"
  },
  "api/CB.Connector.Command.Translator.html": {
    "href": "api/CB.Connector.Command.Translator.html",
    "title": "Namespace CB.Connector.Command.Translator | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Command.Translator Classes Translator<TOutput, TContext> Translator for walking the Syntactic Tree (SQL search condition)."
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.QuantifierCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.QuantifierCriteria.html",
    "title": "Class QuantifierCriteria | CB Connector SDK website",
    "keywords": "Class QuantifierCriteria Provides an abstract class for comparison between a value and a list or sub-query. Inheritance System.Object FilterCriteria ComparisonCriteria QuantifierCriteria AllCriteria AnyCriteria Implements IFilterCriteria Inherited Members ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent FilterCriteria.Filter(Object[], Object) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public abstract class QuantifierCriteria : ComparisonCriteria, IFilterCriteria Constructors QuantifierCriteria(IEnumerable<IArgument>) Initializes a new instance of the QuantifierCriteria class. Declaration protected QuantifierCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.NotLikeCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.NotLikeCriteria.html",
    "title": "Class NotLikeCriteria | CB Connector SDK website",
    "keywords": "Class NotLikeCriteria Represents Not Like operator that checks whether an attribute value matches a given string pattern. Inheritance System.Object FilterCriteria ComparisonCriteria BasicComparisonCriteria NotLikeCriteria Implements IFilterCriteria Inherited Members BasicComparisonCriteria.QuantifierCriteria BasicComparisonCriteria.Left BasicComparisonCriteria.Right ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class NotLikeCriteria : BasicComparisonCriteria, IFilterCriteria Constructors NotLikeCriteria(IArgument, IArgument) Initializes a new instance of the NotLikeCriteria class. Declaration protected NotLikeCriteria(IArgument left, IArgument right) Parameters Type Name Description IArgument left The left IArgument . IArgument right The right IArgument . NotLikeCriteria(IEnumerable<IArgument>) Initializes a new instance of the NotLikeCriteria class. Declaration public NotLikeCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also BasicComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.NotInCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.NotInCriteria.html",
    "title": "Class NotInCriteria | CB Connector SDK website",
    "keywords": "Class NotInCriteria Represents Not In operator that checks whether an attribute value matches any value within a list. Inheritance System.Object FilterCriteria ComparisonCriteria ExtendedComparisonCriteria NotInCriteria Implements IFilterCriteria Inherited Members ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class NotInCriteria : ExtendedComparisonCriteria, IFilterCriteria Constructors NotInCriteria(IArgument, IArgument) Initializes a new instance of the NotInCriteria class. Declaration public NotInCriteria(IArgument left, IArgument right) Parameters Type Name Description IArgument left The left IArgument . IArgument right The right IArgument . NotInCriteria(IEnumerable<IArgument>) Initializes a new instance of the NotInCriteria class. Declaration public NotInCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ExtendedComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.NotExistsCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.NotExistsCriteria.html",
    "title": "Class NotExistsCriteria | CB Connector SDK website",
    "keywords": "Class NotExistsCriteria Represents NOT EXISTS operator that checks whether a sub-query returns any rows. Inheritance System.Object FilterCriteria ComparisonCriteria ExtendedComparisonCriteria NotExistsCriteria Implements IFilterCriteria Inherited Members ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class NotExistsCriteria : ExtendedComparisonCriteria, IFilterCriteria Constructors NotExistsCriteria(IEnumerable<IArgument>) Initializes a new instance of the NotExistsCriteria class. Declaration public NotExistsCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ExtendedComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.GreaterOrEqualCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.GreaterOrEqualCriteria.html",
    "title": "Class GreaterOrEqualCriteria | CB Connector SDK website",
    "keywords": "Class GreaterOrEqualCriteria Represents Greater than or Equal to operator that compares two expressions for greater than or equal. Inheritance System.Object FilterCriteria ComparisonCriteria BasicComparisonCriteria GreaterOrEqualCriteria Implements IFilterCriteria Inherited Members BasicComparisonCriteria.QuantifierCriteria BasicComparisonCriteria.Left BasicComparisonCriteria.Right ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class GreaterOrEqualCriteria : BasicComparisonCriteria, IFilterCriteria Constructors GreaterOrEqualCriteria(IArgument, IArgument) Initializes a new instance of the GreaterOrEqualCriteria class. Declaration public GreaterOrEqualCriteria(IArgument left, IArgument right) Parameters Type Name Description IArgument left The left IArgument . IArgument right The right IArgument . GreaterOrEqualCriteria(IEnumerable<IArgument>) Initializes a new instance of the GreaterOrEqualCriteria class. Declaration public GreaterOrEqualCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also BasicComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.GreaterCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.GreaterCriteria.html",
    "title": "Class GreaterCriteria | CB Connector SDK website",
    "keywords": "Class GreaterCriteria Represents Greater than operator that compares two expressions. Inheritance System.Object FilterCriteria ComparisonCriteria BasicComparisonCriteria GreaterCriteria Implements IFilterCriteria Inherited Members BasicComparisonCriteria.QuantifierCriteria BasicComparisonCriteria.Left BasicComparisonCriteria.Right ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class GreaterCriteria : BasicComparisonCriteria, IFilterCriteria Constructors GreaterCriteria(IArgument, IArgument) Initializes a new instance of the GreaterCriteria class. Declaration public GreaterCriteria(IArgument left, IArgument right) Parameters Type Name Description IArgument left The left IArgument . IArgument right The right IArgument . GreaterCriteria(IEnumerable<IArgument>) Initializes a new instance of the GreaterCriteria class. Declaration public GreaterCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also BasicComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.ExtendedComparisonCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.ExtendedComparisonCriteria.html",
    "title": "Class ExtendedComparisonCriteria | CB Connector SDK website",
    "keywords": "Class ExtendedComparisonCriteria Provides an abstract class for extended comparisons. Inheritance System.Object FilterCriteria ComparisonCriteria ExtendedComparisonCriteria BetweenCriteria ExistsCriteria InCriteria IsNotNullCriteria IsNullCriteria NotBetweenCriteria NotExistsCriteria NotInCriteria Implements IFilterCriteria Inherited Members ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent FilterCriteria.Filter(Object[], Object) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public abstract class ExtendedComparisonCriteria : ComparisonCriteria, IFilterCriteria Constructors ExtendedComparisonCriteria(IEnumerable<IArgument>) Initializes a new instance of the ExtendedComparisonCriteria class. Declaration protected ExtendedComparisonCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.ExistsCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.ExistsCriteria.html",
    "title": "Class ExistsCriteria | CB Connector SDK website",
    "keywords": "Class ExistsCriteria Represents exists operator that checks whether a sub-query returns any rows. Inheritance System.Object FilterCriteria ComparisonCriteria ExtendedComparisonCriteria ExistsCriteria Implements IFilterCriteria Inherited Members ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class ExistsCriteria : ExtendedComparisonCriteria, IFilterCriteria Constructors ExistsCriteria(IEnumerable<IArgument>) Initializes a new instance of the ExistsCriteria class. Declaration public ExistsCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ExtendedComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.BinaryCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.BinaryCriteria.html",
    "title": "Class BinaryCriteria | CB Connector SDK website",
    "keywords": "Class BinaryCriteria Operates on two criteria and manipulates them to return a result. Inheritance System.Object FilterCriteria BinaryCriteria AndCriteria OrCriteria Implements IFilterCriteria Inherited Members FilterCriteria.Childes FilterCriteria.Parent FilterCriteria.Filter(Object[], Object) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria Assembly : CB.Connector.dll Syntax public abstract class BinaryCriteria : FilterCriteria, IFilterCriteria Constructors BinaryCriteria(IFilterCriteria, IFilterCriteria) Initializes a new instance of the BinaryCriteria class. Declaration protected BinaryCriteria(IFilterCriteria left, IFilterCriteria right) Parameters Type Name Description IFilterCriteria left The left IFilterCriteria . IFilterCriteria right The right IFilterCriteria . Properties Left Gets or sets the left criteria. Declaration public IFilterCriteria Left { get; set; } Property Value Type Description IFilterCriteria Right Gets or sets the right criteria. Declaration public IFilterCriteria Right { get; set; } Property Value Type Description IFilterCriteria Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also FilterCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.AndCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.AndCriteria.html",
    "title": "Class AndCriteria | CB Connector SDK website",
    "keywords": "Class AndCriteria Provides a base class for conditional-AND operator that combines multiple conditions. Inheritance System.Object FilterCriteria BinaryCriteria AndCriteria Implements IFilterCriteria Inherited Members BinaryCriteria.Right BinaryCriteria.Left FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria Assembly : CB.Connector.dll Syntax public class AndCriteria : BinaryCriteria, IFilterCriteria Constructors AndCriteria(IFilterCriteria, IFilterCriteria) Initializes a new instance of the AndCriteria class. Declaration public AndCriteria(IFilterCriteria left, IFilterCriteria right) Parameters Type Name Description IFilterCriteria left The left IFilterCriteria . IFilterCriteria right The right IFilterCriteria . Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also BinaryCriteria"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.OrderByArguments.SortType.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.OrderByArguments.SortType.html",
    "title": "Enum OrderByArguments.SortType | CB Connector SDK website",
    "keywords": "Enum OrderByArguments.SortType Represents an enumeration that defines literals used to specify the type of the sort order. Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public enum SortType Fields Name Description Asc Sorts the result in ascending order. Desc Sorts the result in descending order. Extension Methods ConnectorPropertiesExtensions.TryParse(Type, Object) ConnectorPropertiesExtensions.Parse(Type) ConnectorPropertiesExtensions.Decrypt(String) ConnectorPropertiesExtensions.Encrypt(String) ConnectorPropertiesExtensions.IsEncrypted(String, Encoding)"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.DataHandlerArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.DataHandlerArguments.html",
    "title": "Class DataHandlerArguments | CB Connector SDK website",
    "keywords": "Class DataHandlerArguments Provides a base class for IDataHandlerArguments . Inheritance System.Object DataHandlerArguments AggregateArguments DeleteSinkArguments DistinctArguments ExecuteSinkArguments HavingArguments InsertSinkArguments JoinArguments LimitArguments OrderByArguments SelectSinkArguments SubQueryArguments TableFunctionSourceArguments TableSourceArguments UpdateSinkArguments WhereArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public class DataHandlerArguments : IDataHandlerArguments Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IDataHandlerArguments"
  },
  "api/CB.Connector.Command.DataHandler.Argument.IArgument.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.IArgument.html",
    "title": "Interface IArgument | CB Connector SDK website",
    "keywords": "Interface IArgument Provides a base interface for defining the various kinds of values, as well as expressions and functions in a parsed statement. Inherited Members ITypedElement.Type ITypedElement.IsNullable ITypedElement.DefaultValue INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Command.DataHandler.Argument Assembly : CB.Connector.dll Syntax public interface IArgument : ITypedElement, INamedElement, IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement)"
  },
  "api/CB.Connector.Command.DataHandler.Argument.Classes.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.Classes.html",
    "title": "Namespace CB.Connector.Command.DataHandler.Argument.Classes | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Command.DataHandler.Argument.Classes Classes AggregateFunction Provides an abstract class for IValuedFunction . AggregateFunctionSource Provides a base class for AggregateFunction . Block Represents a set whose values are enclosed in parentheses. CbIdentifier Represents the names that uniquely identify an element. This class cannot be inherited. CbIdentifierFactory Factory implementation that always creates CbIdentifier objects. ColumnArgument Provides an abstract class for IColumnArgument ColumnSource Provides a base class for a column-reference whose values come directly from the database. This class cannot be inherited. Constant Represents an identifier that may represent a value. Logically enough, the value of a constant never changes. ScalarValuedFunction Provides an abstract class for IValuedFunction . Set Represents a set of values. A set that represents a well-defined collection of distinct values. SetTable Represents a two dimensional set whose values come from the result of a statement (set of row values). Variable Represents an identifier that may represent a value. Logically enough, the value of a variable may change."
  },
  "api/CB.Connector.Command.DataHandler.Argument.Classes.Constant.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.Classes.Constant.html",
    "title": "Class Constant | CB Connector SDK website",
    "keywords": "Class Constant Represents an identifier that may represent a value. Logically enough, the value of a constant never changes. Inheritance System.Object Constant Implements IArgument ITypedElement INamedElement IElement Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.Argument.Classes Assembly : CB.Connector.dll Syntax public class Constant : IArgument, ITypedElement, INamedElement, IElement Constructors Constant(Object, IDataType, String) Initializes a new instance of the Constant class with a specified value and data type. By default, sign is an empty string. Declaration public Constant(object value, IDataType dataType, string sign = \"\") Parameters Type Name Description System.Object value The value. IDataType dataType The data type. System.String sign The sign. Fields Sign Information about the signal being positive and negative. Declaration protected readonly string Sign Field Value Type Description System.String Properties DefaultValue Gets the default value of this instance. Declaration public object DefaultValue { get; } Property Value Type Description System.Object The default value. Description Gets or sets the description defined for IElement . Declaration public IDescriptor Description { get; set; } Property Value Type Description IDescriptor The description. IsNullable Gets a value indicating whether this instance that can accepts null values. Declaration public bool IsNullable { get; set; } Property Value Type Description System.Boolean true if this instance does not accept null values; otherwise, false . Name Gets the name of the named element. Declaration public string Name { get; } Property Value Type Description System.String The name of the named element. Remarks Must not exceed 128 characters QualifiedName Gets the name that allows the named element to be identified within a hierarchy of nested namespaces. Declaration public string QualifiedName { get; } Property Value Type Description System.String The qualified name. Remarks It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the named element itself. Type Gets the type of this instance. Declaration public IDataType Type { get; } Property Value Type Description IDataType Returns the data type. Value Gets the value of this instance. Declaration public object Value { get; } Property Value Type Description System.Object Explicit Interface Implementations INamedElement.Owner Gets or sets the owner of the named element. Declaration INamedElement INamedElement.Owner { get; set; } Returns Type Description INamedElement A System.String value that specifies the owner of the named element. Implements IArgument ITypedElement INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IArgument"
  },
  "api/CB.Connector.Command.DataHandler.Argument.Classes.ColumnSource.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.Classes.ColumnSource.html",
    "title": "Class ColumnSource | CB Connector SDK website",
    "keywords": "Class ColumnSource Provides a base class for a column-reference whose values come directly from the database. This class cannot be inherited. Inheritance System.Object ColumnArgument ColumnSource Implements IColumnArgument IColumn IProperty IOrdinalElement IIdentifier IArgument ITypedElement INamedElement IElement Inherited Members ColumnArgument.DefaultName ColumnArgument.GeneratedNameFormat ColumnArgument.IsSortable ColumnArgument.IsSourceColumn ColumnArgument.IsRequired ColumnArgument.ArgumentColumn ColumnArgument.MetadataColumn System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.Argument.Classes Assembly : CB.Connector.dll Syntax public sealed class ColumnSource : ColumnArgument, IColumnArgument, IColumn, IProperty, IOrdinalElement, IIdentifier, IArgument, ITypedElement, INamedElement, IElement Constructors ColumnSource(IColumn, INamedElement) Initializes a new instance of the ColumnSource class. Declaration public ColumnSource(IColumn column, INamedElement owner = null) Parameters Type Name Description IColumn column The metadata. INamedElement owner The container for the metadata. Exceptions Type Condition System.ArgumentNullException column System.ArgumentException Unexpected implementation of column argument. Properties DefaultValue Gets the default value of this instance. Declaration public override object DefaultValue { get; } Property Value Type Description System.Object The default value. Overrides ColumnArgument.DefaultValue Description Gets or sets the description defined for IElement . Declaration public override IDescriptor Description { get; } Property Value Type Description IDescriptor The description. Overrides ColumnArgument.Description IsAutoincrementable Gets a value indicating whether this instance is auto-incremented, meaning that a unique number is generated automatically when a new record is inserted. Declaration public override bool IsAutoincrementable { get; } Property Value Type Description System.Boolean true if this instance is auto-incremented; otherwise, false . Overrides ColumnArgument.IsAutoincrementable IsForeignKey Gets a value indicating whether this instance is a foreign key. Declaration public override bool IsForeignKey { get; } Property Value Type Description System.Boolean true if this instance is a foreign key; otherwise, false . Overrides ColumnArgument.IsForeignKey IsNullable Gets a value indicating whether this instance that can accepts null values. Declaration public override bool IsNullable { get; } Property Value Type Description System.Boolean true if this instance does not accept null values; otherwise, false . Overrides ColumnArgument.IsNullable IsPrimaryKey Gets a value indicating whether this instance is a primary key. Declaration public override bool IsPrimaryKey { get; } Property Value Type Description System.Boolean true if this instance is a primary key; otherwise, false . Overrides ColumnArgument.IsPrimaryKey IsReadOnly Gets or sets a value indicating whether this instance is read-only, meaning that the column may not be written to after initialization. Declaration public override bool IsReadOnly { get; } Property Value Type Description System.Boolean true if this instance is read-only; otherwise, false . Overrides ColumnArgument.IsReadOnly IsSearchable Gets or sets a value indicating whether this instance is capable of being computationally searched, meaning that the column can be called in where clause. Declaration public override bool IsSearchable { get; } Property Value Type Description System.Boolean true if this instance is capable of being computationally searched; otherwise, false . Overrides ColumnArgument.IsSearchable IsUnique Gets a value indicating whether this instance is included in the definition of a primary key or unique key. Declaration public override bool IsUnique { get; } Property Value Type Description System.Boolean true if this instance is included in the definition of a primary key or unique key; otherwise, false . Overrides ColumnArgument.IsUnique Name Gets the name of the named element. Declaration public override string Name { get; } Property Value Type Description System.String The name of the named element. Overrides ColumnArgument.Name Remarks Must not exceed 128 characters Ordinal Gets the element’s ordinal position, which specifies where an element is in an order. Declaration public override int Ordinal { get; } Property Value Type Description System.Int32 The ordinal position. Overrides ColumnArgument.Ordinal Owner Gets or sets the owner of the named element. Declaration public override sealed INamedElement Owner { get; set; } Property Value Type Description INamedElement A System.String value that specifies the owner of the named element. Overrides ColumnArgument.Owner QualifiedName Gets the name that allows the named element to be identified within a hierarchy of nested namespaces. Declaration public override string QualifiedName { get; } Property Value Type Description System.String The qualified name. Overrides ColumnArgument.QualifiedName Remarks It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the named element itself. Type Gets the type of this instance. Declaration public override IDataType Type { get; } Property Value Type Description IDataType Returns the data type. Overrides ColumnArgument.Type Implements IColumnArgument IColumn IProperty IOrdinalElement IIdentifier IArgument ITypedElement INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also ColumnArgument"
  },
  "api/CB.Connector.Command.DataHandler.Argument.Classes.AggregateFunctionSource.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.Classes.AggregateFunctionSource.html",
    "title": "Class AggregateFunctionSource | CB Connector SDK website",
    "keywords": "Class AggregateFunctionSource Provides a base class for AggregateFunction . Inheritance System.Object AggregateFunction AggregateFunctionSource Implements IValuedFunction IArgument ITypedElement INamedElement IElement Inherited Members AggregateFunction.Parameter AggregateFunction.Description AggregateFunction.Name AggregateFunction.QualifiedName AggregateFunction.Owner AggregateFunction.Type AggregateFunction.IsNullable AggregateFunction.DefaultValue AggregateFunction.Equals(Object) AggregateFunction.GetHashCode() System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.Argument.Classes Assembly : CB.Connector.dll Syntax public sealed class AggregateFunctionSource : AggregateFunction, IValuedFunction, IArgument, ITypedElement, INamedElement, IElement Constructors AggregateFunctionSource(IArgument, IFunction) Initializes a new instance of the AggregateFunctionSource class. Declaration public AggregateFunctionSource(IArgument parameter, IFunction metadata) Parameters Type Name Description IArgument parameter The parameter(s) for the function. IFunction metadata The metadata. Properties Metadata Gets the function that has its place on the model. Declaration public override IFunction Metadata { get; } Property Value Type Description IFunction Overrides AggregateFunction.Metadata Implements IValuedFunction IArgument ITypedElement INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also AggregateFunction"
  },
  "api/CB.Connector.Collections.IIndexableCollection-2.html": {
    "href": "api/CB.Connector.Collections.IIndexableCollection-2.html",
    "title": "Interface IIndexableCollection<TKey, TValue> | CB Connector SDK website",
    "keywords": "Interface IIndexableCollection<TKey, TValue> Represents a generic collection of key/value pairs that can be individually accessed by index and by key. Namespace : CB.Connector.Collections Assembly : CB.Connector.dll Syntax public interface IIndexableCollection<TKey, TValue> Type Parameters Name Description TKey The type of the key in the collection. TValue The type of the value in the collection. Properties Item[TKey] Gets or sets the element with the specified key. Declaration TValue this[TKey key] { get; set; } Parameters Type Name Description TKey key The key of the element. Property Value Type Description TValue The element with the specified key. If an element with the specified key is not found, an exception is thrown. Item[Int32] Gets or sets the element at the specified index. Declaration TValue this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the element. Property Value Type Description TValue The element with the specified index. If an element with the specified index is not found, an exception is thrown. Values Gets an System.Collections.Generic.ICollection<T> containing the values in the IIndexableCollection<TKey, TValue> . Declaration ICollection<TValue> Values { get; } Property Value Type Description System.Collections.Generic.ICollection <TValue> An System.Collections.Generic.ICollection<T> containing the values in the IIndexableCollection<TKey, TValue> . Methods Contains(TKey) Determines whether the collection contains an element with the specified key. Declaration bool Contains(TKey key) Parameters Type Name Description TKey key The key to locate in the IIndexableCollection<TKey, TValue> . Returns Type Description System.Boolean true if the IIndexableCollection<TKey, TValue> contains an element with the key; otherwise, false . GetKeyForItem(TValue) Extracts the key from the specified element. Declaration TKey GetKeyForItem(TValue item) Parameters Type Name Description TValue item The element from which to extract the key. Returns Type Description TKey The key for the specified element. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Collections.IElementCollection-1.html": {
    "href": "api/CB.Connector.Collections.IElementCollection-1.html",
    "title": "Interface IElementCollection<T> | CB Connector SDK website",
    "keywords": "Interface IElementCollection<T> Represents a generic collection of key/value pairs that can be individually accessed by index and by key. Inherited Members System.Collections.Generic.ICollection<T>.Add(T) System.Collections.Generic.ICollection<T>.Clear() System.Collections.Generic.ICollection<T>.Contains(T) System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) System.Collections.Generic.ICollection<T>.Remove(T) System.Collections.Generic.ICollection<T>.Count System.Collections.Generic.ICollection<T>.IsReadOnly System.Collections.Generic.IEnumerable<T>.GetEnumerator() IIndexableCollection<String, T>.Item[String] IIndexableCollection<String, T>.Item[Int32] IIndexableCollection<String, T>.Values IIndexableCollection<String, T>.Contains(String) IIndexableCollection<String, T>.GetKeyForItem(T) Namespace : CB.Connector.Collections Assembly : CB.Connector.dll Syntax public interface IElementCollection<T> : ICollection<T>, IEnumerable<T>, IEnumerable, IIndexableCollection<string, T> Type Parameters Name Description T The type of elements in the collection. Methods TryGetValue<TValue>(String, out TValue) Gets the value of the specified type associated with the specified key. Declaration bool TryGetValue<TValue>(string key, out TValue value) where TValue : T Parameters Type Name Description System.String key The key of the value to get. TValue value When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the object that implements IElementCollection<T> contains an element with the specified key; otherwise, false . Type Parameters Name Description TValue The type of the value to get. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also System.Collections.Generic.ICollection <T> System.String"
  },
  "api/CB.Connector.Caching.CachingProviderBase.html": {
    "href": "api/CB.Connector.Caching.CachingProviderBase.html",
    "title": "Class CachingProviderBase | CB Connector SDK website",
    "keywords": "Class CachingProviderBase Default implementation of ICachingProviderBase . Inheritance System.Object CachingProviderBase Implements ICachingProviderBase Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Caching Assembly : CB.Connector.dll Syntax public class CachingProviderBase : ICachingProviderBase Constructors CachingProviderBase(String) Initializes a new instance of the CachingProviderBase class. Declaration public CachingProviderBase(string name = \"CachingProvider\") Parameters Type Name Description System.String name The name of the cache. Properties Cache Gets the object cache that implements an in-memory cache. Declaration public MemoryCache Cache { get; } Property Value Type Description System.Runtime.Caching.MemoryCache The object cache. Methods AddItem(String, Object, DateTime) Adds a cache entry into the cache as a CacheItem instance, and adds details about how the entry should be evicted. Declaration public void AddItem(string key, object value, DateTime expiration) Parameters Type Name Description System.String key A unique identifier for the cache entry. System.Object value The object to insert. System.DateTime expiration The fixed date and time at which the cache entry will expire. Remarks Adds a cache entry into the cache without overwriting any existing cache entry. ContainsKey(String) Determines whether the cache entry already exists in the cache. Declaration public virtual bool ContainsKey(string key) Parameters Type Name Description System.String key A unique identifier for the cache entry. Returns Type Description System.Boolean true if the cache contains the specified key; otherwise, false . GetItem(String, DateTime) Gets the specified cache entry from the cache as an object. Declaration public virtual object GetItem(string key, DateTime newExpiration) Parameters Type Name Description System.String key A unique identifier for the cache entry. System.DateTime newExpiration The fixed date and time at which the cache entry will expire. Returns Type Description System.Object The cache entry that is identified by key . RemoveItem(String) Removes the cache entry from the cache. Declaration public virtual void RemoveItem(string key) Parameters Type Name Description System.String key A unique identifier for the cache entry. Set(String, Object, DateTime) Inserts a cache entry into the cache. Declaration public void Set(string key, object value, DateTime newExpiration) Parameters Type Name Description System.String key A unique identifier for the cache entry. System.Object value The object to insert. System.DateTime newExpiration The fixed date and time at which the cache entry will expire. Remarks The typical behavior is an insert-or-update operation. If an item that matches key does not exist in the cache, key and value are used to insert as a new cache entry; otherwise, the cache entry is updated by using value . Events ItemRemoved Occurs when a System.Runtime.Caching.CacheItem is removed from the System.Runtime.Caching.MemoryCache . Declaration public event EventHandler ItemRemoved Event Type Type Description System.EventHandler Implements ICachingProviderBase Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ICachingProviderBase"
  },
  "api/CB.Connector.Authentication.OAuth.IOAuth2Configuration.html": {
    "href": "api/CB.Connector.Authentication.OAuth.IOAuth2Configuration.html",
    "title": "Interface IOAuth2Configuration | CB Connector SDK website",
    "keywords": "Interface IOAuth2Configuration Provides a base interface for configuring OAuth 2.0 authentication. Namespace : CB.Connector.Authentication.OAuth Assembly : CB.Connector.dll Syntax public interface IOAuth2Configuration Properties AccessToken Gets or sets the access token. Declaration string AccessToken { get; set; } Property Value Type Description System.String The access token. AccessTokenUrl Gets or sets the endpoint for authentication server. This is used to exchange the authorization code for an access token. Declaration string AccessTokenUrl { get; set; } Property Value Type Description System.String The endpoint for authentication server. This is used to exchange the authorization code for an access token. AuthUrl Gets or sets the endpoint for authentication server. This is used to get an authorization code. Declaration string AuthUrl { get; set; } Property Value Type Description System.String The endpoint for authentication server. This is used to get an authorization code. ClientId Gets or sets the client identifier issued to the client during the application registration process. Declaration string ClientId { get; set; } Property Value Type Description System.String The client identifier issued to the client during the application registration process. ClientSecret Gets or sets the client secret issued to the client during the application registration process. Declaration string ClientSecret { get; set; } Property Value Type Description System.String The client secret issued to the the client during the application registration process. ExpiresAt Gets or sets the token's expiration date. Declaration DateTime ExpiresAt { get; set; } Property Value Type Description System.DateTime The token's expiration date. RedirectUrl Gets or sets the Redirect URL used to redirect the client to after authentication using third-party service. Declaration string RedirectUrl { get; set; } Property Value Type Description System.String The Redirect URL used to redirect the client to after authentication using third-party service. RefreshToken Gets or sets the refresh token. Declaration string RefreshToken { get; set; } Property Value Type Description System.String The refresh token. Scope Gets or sets the scope of the access request. Declaration string Scope { get; set; } Property Value Type Description System.String The scope of the access request. Remarks The scope may have space-delimited values, and defines a set of permissions which the user should give to your application. TokenType The token type returned from service. Can be used for further calls. Declaration string TokenType { get; set; } Property Value Type Description System.String The token type returned from service. Can be used for further calls. Extension Methods ConnectorPropertiesExtensions.RefreshOAuth2Properties(IOAuth2Configuration) ConnectorPropertiesExtensions.GetOAuth2Client(IOAuth2Configuration) ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Authentication.Infrastructure.html": {
    "href": "api/CB.Connector.Authentication.Infrastructure.html",
    "title": "Namespace CB.Connector.Authentication.Infrastructure | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Authentication.Infrastructure Classes Endpoint Defines endpoint URI (service address). RequestArgs Holds request data. RequestFactory Default implementation of IRequestFactory . Interfaces IRequestFactory Factory implementation that creates REST client/request."
  },
  "api/CB.Connector.Authentication.Infrastructure.RequestArgs.html": {
    "href": "api/CB.Connector.Authentication.Infrastructure.RequestArgs.html",
    "title": "Class RequestArgs | CB Connector SDK website",
    "keywords": "Class RequestArgs Holds request data. Inheritance System.Object RequestArgs Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Authentication.Infrastructure Assembly : CB.Connector.dll Syntax public class RequestArgs Properties Client Client instance. Declaration public IRestClient Client { get; set; } Property Value Type Description RestSharp.IRestClient Parameters Values received from service. Declaration public NameValueCollection Parameters { get; set; } Property Value Type Description System.Collections.Specialized.NameValueCollection Request Request instance. Declaration public IRestRequest Request { get; set; } Property Value Type Description RestSharp.IRestRequest Response Response instance. Declaration public IRestResponse Response { get; set; } Property Value Type Description RestSharp.IRestResponse Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Authentication.BasicAuth.html": {
    "href": "api/CB.Connector.Authentication.BasicAuth.html",
    "title": "Namespace CB.Connector.Authentication.BasicAuth | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Authentication.BasicAuth Interfaces IBasicAuthConfiguration Provides a base interface for configuring basic authentication."
  },
  "api/CB.Connector.Property.Decorators.html": {
    "href": "api/CB.Connector.Property.Decorators.html",
    "title": "Namespace CB.Connector.Property.Decorators | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Property.Decorators Classes ConnectorPropertiesDecorator<T> Provides an abstract class for IConnectorPropertiesDecorator class. OAuthConfigDecorator<T> Default implementation of IOAuthConfigDecorator . PluginPropertyDecorator<T> Default implementation of IPluginPropertyDecorator . Interfaces IConnectorPropertiesDecorator Provides a base interface for adding responsibilities to IConnectorProperties objects dynamically. IOAuthConfigDecorator Decorator for exchanging/refreshing access token. IPluginPropertyDecorator Decorator for exchanging/accessing MG.Plugin.PluginPropertyList ."
  },
  "api/CB.Connector.Property.Decorators.PluginPropertyDecorator-1.html": {
    "href": "api/CB.Connector.Property.Decorators.PluginPropertyDecorator-1.html",
    "title": "Class PluginPropertyDecorator<T> | CB Connector SDK website",
    "keywords": "Class PluginPropertyDecorator<T> Default implementation of IPluginPropertyDecorator . Inheritance System.Object ConnectorPropertiesDecorator <T> PluginPropertyDecorator<T> Implements IPluginPropertyDecorator IConnectorPropertiesDecorator Inherited Members ConnectorPropertiesDecorator<T>.Properties System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Property.Decorators Assembly : CB.Connector.dll Syntax public class PluginPropertyDecorator<T> : ConnectorPropertiesDecorator<T>, IPluginPropertyDecorator, IConnectorPropertiesDecorator where T : ConnectorProperties<T> Type Parameters Name Description T Constructors PluginPropertyDecorator(ConnectorProperties<T>) Initializes a new instance of the PluginPropertyDecorator<T> class. Declaration public PluginPropertyDecorator(ConnectorProperties<T> properties) Parameters Type Name Description ConnectorProperties <T> properties The reference to a ConnectorProperties<T> object. Methods GetProperties(Boolean) Returns MG.Plugin.PluginPropertyList object. Declaration public PluginPropertyList GetProperties(bool censureSecretProperties = true) Parameters Type Name Description System.Boolean censureSecretProperties True value means that the encrypted properties has to be censured. Returns Type Description MG.Plugin.PluginPropertyList An MG.Plugin.PluginPropertyList object. SetProperties(PluginPropertyList) Sets the connector properties. Declaration public void SetProperties(PluginPropertyList properties) Parameters Type Name Description MG.Plugin.PluginPropertyList properties The MG.Plugin.PluginPropertyList object filled by CB Server. Implements IPluginPropertyDecorator IConnectorPropertiesDecorator Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ConnectorPropertiesDecorator <T> IPluginPropertyDecorator"
  },
  "api/CB.Connector.Property.Decorators.OAuthConfigDecorator-1.html": {
    "href": "api/CB.Connector.Property.Decorators.OAuthConfigDecorator-1.html",
    "title": "Class OAuthConfigDecorator<T> | CB Connector SDK website",
    "keywords": "Class OAuthConfigDecorator<T> Default implementation of IOAuthConfigDecorator . Inheritance System.Object ConnectorPropertiesDecorator <T> OAuthConfigDecorator<T> Implements IOAuthConfigDecorator IConnectorPropertiesDecorator Inherited Members ConnectorPropertiesDecorator<T>.Properties System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Property.Decorators Assembly : CB.Connector.dll Syntax public class OAuthConfigDecorator<T> : ConnectorPropertiesDecorator<T>, IOAuthConfigDecorator, IConnectorPropertiesDecorator where T : ConnectorProperties<T> Type Parameters Name Description T The type of the connector properties. Constructors OAuthConfigDecorator(ConnectorProperties<T>) Initializes a new instance of the OAuthConfigDecorator<T> class. Declaration public OAuthConfigDecorator(ConnectorProperties<T> properties) Parameters Type Name Description ConnectorProperties <T> properties The reference to a ConnectorProperties<T> object. Methods CheckCallback(Uri, IEnumerable<OAuthApplicationParameter>, out IEnumerable<PluginProperty>, out Uri) Checks the callback service URI. Declaration public virtual bool CheckCallback(Uri returnUri, IEnumerable<OAuthApplicationParameter> applicationKeys, out IEnumerable<PluginProperty> accountProperties, out Uri nextUri) Parameters Type Name Description System.Uri returnUri The redirect URI with query string. System.Collections.Generic.IEnumerable < MG.Plugin.Security.OAuth.OAuthApplicationParameter > applicationKeys The application keys. System.Collections.Generic.IEnumerable < MG.Plugin.PluginProperty > accountProperties The account properties. System.Uri nextUri The next URI. Returns Type Description System.Boolean true if callback service URI validation succeeded; otherwise, false . GetApplicationParametersList(out Boolean) Gets the application parameters. Declaration public virtual IEnumerable<OAuthApplicationParameter> GetApplicationParametersList(out bool defaultAppSupported) Parameters Type Name Description System.Boolean defaultAppSupported True value means that the application is registered in the target system. Returns Type Description System.Collections.Generic.IEnumerable < MG.Plugin.Security.OAuth.OAuthApplicationParameter > The application parameters. GetLoginLink(IEnumerable<OAuthApplicationParameter>) Gets the service URI which should be called to start authentication process. Declaration public virtual Uri GetLoginLink(IEnumerable<OAuthApplicationParameter> applicationKeys) Parameters Type Name Description System.Collections.Generic.IEnumerable < MG.Plugin.Security.OAuth.OAuthApplicationParameter > applicationKeys The application keys. Returns Type Description System.Uri The service URI. GetOAuth2Client() Gets the OAuth 2.0 Client object. Declaration protected virtual OAuth2Client GetOAuth2Client() Returns Type Description OAuth2Client The OAuth 2.0 Client object. Exceptions Type Condition ConnectorException Invalid configuration SetOAuthParameters(IEnumerable<OAuthApplicationParameter>) Sets the parameter value to the corresponding property. Declaration protected virtual void SetOAuthParameters(IEnumerable<OAuthApplicationParameter> parameters) Parameters Type Name Description System.Collections.Generic.IEnumerable < MG.Plugin.Security.OAuth.OAuthApplicationParameter > parameters The application parameters. Implements IOAuthConfigDecorator IConnectorPropertiesDecorator Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ConnectorPropertiesDecorator <T> IOAuthConfigDecorator"
  },
  "api/CB.Connector.Property.Decorators.IPluginPropertyDecorator.html": {
    "href": "api/CB.Connector.Property.Decorators.IPluginPropertyDecorator.html",
    "title": "Interface IPluginPropertyDecorator | CB Connector SDK website",
    "keywords": "Interface IPluginPropertyDecorator Decorator for exchanging/accessing MG.Plugin.PluginPropertyList . Namespace : CB.Connector.Property.Decorators Assembly : CB.Connector.dll Syntax public interface IPluginPropertyDecorator : IConnectorPropertiesDecorator Methods GetProperties(Boolean) Returns MG.Plugin.PluginPropertyList object. Declaration PluginPropertyList GetProperties(bool censureSecretProperties = true) Parameters Type Name Description System.Boolean censureSecretProperties True value means that the encrypted properties has to be censured. Returns Type Description MG.Plugin.PluginPropertyList An MG.Plugin.PluginPropertyList object. SetProperties(PluginPropertyList) Sets the connector properties. Declaration void SetProperties(PluginPropertyList properties) Parameters Type Name Description MG.Plugin.PluginPropertyList properties The MG.Plugin.PluginPropertyList object filled by CB Server. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IConnectorPropertiesDecorator"
  },
  "api/CB.Connector.Property.Decorators.IOAuthConfigDecorator.html": {
    "href": "api/CB.Connector.Property.Decorators.IOAuthConfigDecorator.html",
    "title": "Interface IOAuthConfigDecorator | CB Connector SDK website",
    "keywords": "Interface IOAuthConfigDecorator Decorator for exchanging/refreshing access token. Namespace : CB.Connector.Property.Decorators Assembly : CB.Connector.dll Syntax public interface IOAuthConfigDecorator : IConnectorPropertiesDecorator Methods CheckCallback(Uri, IEnumerable<OAuthApplicationParameter>, out IEnumerable<PluginProperty>, out Uri) Checks the callback service URI. Declaration bool CheckCallback(Uri returnUri, IEnumerable<OAuthApplicationParameter> applicationKeys, out IEnumerable<PluginProperty> accountProperties, out Uri nextUri) Parameters Type Name Description System.Uri returnUri The redirect URI with query string. System.Collections.Generic.IEnumerable < MG.Plugin.Security.OAuth.OAuthApplicationParameter > applicationKeys The application keys. System.Collections.Generic.IEnumerable < MG.Plugin.PluginProperty > accountProperties The account properties. System.Uri nextUri The next URI. Returns Type Description System.Boolean true if callback service URI validation succeeded; otherwise, false . GetApplicationParametersList(out Boolean) Gets the application parameters. Declaration IEnumerable<OAuthApplicationParameter> GetApplicationParametersList(out bool defaultAppSupported) Parameters Type Name Description System.Boolean defaultAppSupported True value means that the application is registered in the target system. Returns Type Description System.Collections.Generic.IEnumerable < MG.Plugin.Security.OAuth.OAuthApplicationParameter > The application parameters. GetLoginLink(IEnumerable<OAuthApplicationParameter>) Gets the service URI which should be called to start authentication process. Declaration Uri GetLoginLink(IEnumerable<OAuthApplicationParameter> applicationKeys) Parameters Type Name Description System.Collections.Generic.IEnumerable < MG.Plugin.Security.OAuth.OAuthApplicationParameter > applicationKeys The application keys. Returns Type Description System.Uri The service URI. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IConnectorPropertiesDecorator"
  },
  "api/CB.Connector.Property.Decorators.IConnectorPropertiesDecorator.html": {
    "href": "api/CB.Connector.Property.Decorators.IConnectorPropertiesDecorator.html",
    "title": "Interface IConnectorPropertiesDecorator | CB Connector SDK website",
    "keywords": "Interface IConnectorPropertiesDecorator Provides a base interface for adding responsibilities to IConnectorProperties objects dynamically. Namespace : CB.Connector.Property.Decorators Assembly : CB.Connector.dll Syntax public interface IConnectorPropertiesDecorator Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Property.Decorators.ConnectorPropertiesDecorator-1.html": {
    "href": "api/CB.Connector.Property.Decorators.ConnectorPropertiesDecorator-1.html",
    "title": "Class ConnectorPropertiesDecorator<T> | CB Connector SDK website",
    "keywords": "Class ConnectorPropertiesDecorator<T> Provides an abstract class for IConnectorPropertiesDecorator class. Inheritance System.Object ConnectorPropertiesDecorator<T> OAuthConfigDecorator<T> PluginPropertyDecorator<T> Implements IConnectorPropertiesDecorator Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Property.Decorators Assembly : CB.Connector.dll Syntax public abstract class ConnectorPropertiesDecorator<T> : IConnectorPropertiesDecorator where T : ConnectorProperties<T> Type Parameters Name Description T The type of your class. Constructors ConnectorPropertiesDecorator(ConnectorProperties<T>) Initializes a new instance of the ConnectorPropertiesDecorator<T> class. Declaration protected ConnectorPropertiesDecorator(ConnectorProperties<T> properties) Parameters Type Name Description ConnectorProperties <T> properties The reference to a ConnectorProperties<T> object. Exceptions Type Condition System.ArgumentNullException properties Properties Properties Gets the reference to a ConnectorProperties<T> object. Declaration protected ConnectorProperties<T> Properties { get; } Property Value Type Description ConnectorProperties <T> The reference to a ConnectorProperties<T> object. Implements IConnectorPropertiesDecorator Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IConnectorPropertiesDecorator"
  },
  "api/CB.Connector.Property.ConnectorPropertyInfo.html": {
    "href": "api/CB.Connector.Property.ConnectorPropertyInfo.html",
    "title": "Class ConnectorPropertyInfo | CB Connector SDK website",
    "keywords": "Class ConnectorPropertyInfo Provides a base class for IConnectorPropertyInfo Inheritance System.Object ConnectorPropertyInfo Implements IConnectorPropertyInfo Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Property Assembly : CB.Connector.dll Syntax public class ConnectorPropertyInfo : IConnectorPropertyInfo Constructors ConnectorPropertyInfo(PropertyInfo, ConnectorPropertyAttribute) Initializes a new instance of the ConnectorPropertyInfo class. Declaration public ConnectorPropertyInfo(PropertyInfo propertyInfo, ConnectorPropertyAttribute attribute) Parameters Type Name Description System.Reflection.PropertyInfo propertyInfo The property information. ConnectorPropertyAttribute attribute The property attribute. Exceptions Type Condition System.Exception Property cannot be set, but does not use Shadows. System.ApplicationException Invalid Connector Property type. Properties ClrName Gets the Common Language Runtime (CLR) name of a property. Declaration public string ClrName { get; } Property Value Type Description System.String The Common Language Runtime (CLR) name of a property. DefaultValue Gets the default value of the property. Declaration public object DefaultValue { get; } Property Value Type Description System.Object The default value of the property. Definition Gets the definition of a property. Declaration public string Definition { get; } Property Value Type Description System.String The definition of a property. DependsOn Gets the dependency(ies) of the property. Declaration public string DependsOn { get; } Property Value Type Description System.String The dependency(ies) of the property. Description Gets a textual annotation that is used to add information. Declaration public string Description { get; } Property Value Type Description System.String A textual annotation that is used to add information. Enumeration Gets an enumeration of the property. Declaration public string Enumeration { get; } Property Value Type Description System.String An enumeration of the property. Flags Gets the flag used to describe the distinctive nature or features of a property. Declaration public ConnectorPropertyFlags Flags { get; } Property Value Type Description ConnectorPropertyFlags The flag used to describe the distinctive nature or features of a property. IsEncrypted Gets a value indicating whether the property is encrypted. Declaration public bool IsEncrypted { get; } Property Value Type Description System.Boolean true if the property is encrypted; otherwise, false . IsOptional Gets a value indicating whether the property is optional. Declaration public bool IsOptional { get; } Property Value Type Description System.Boolean true if the property is optional; otherwise, false . IsOverridable Gets a value indicating whether the property is overridable. Declaration public bool IsOverridable { get; } Property Value Type Description System.Boolean true if the property is overridable; otherwise, false . Key Gets the unique name of the property. Declaration public string Key { get; } Property Value Type Description System.String The unique name of the property Name Gets the name of the property. Declaration public string Name { get; } Property Value Type Description System.String The name of the property Namespace Gets the namespace of the property. Declaration public string Namespace { get; } Property Value Type Description System.String The namespace of the property. Ordinal Gets the property’s ordinal position, which specifies where a property is in an order. Declaration public int Ordinal { get; } Property Value Type Description System.Int32 The property’s ordinal position. RegexValidator Gets the validator for a regular expression. Declaration public string RegexValidator { get; } Property Value Type Description System.String The validator for a regular expression. Type Gets the type of the property. Declaration public Type Type { get; } Property Value Type Description System.Type A Type defined for the property. Methods GetValue(Object) Gets the property value. Declaration public object GetValue(object property) Parameters Type Name Description System.Object property The property. Returns Type Description System.Object The value. IsAutoProperty(PropertyInfo) Determines whether a property is an auto-property. Declaration public static bool IsAutoProperty(PropertyInfo prop) Parameters Type Name Description System.Reflection.PropertyInfo prop The property. Returns Type Description System.Boolean SetValue(Object, Object) Sets the property value. Declaration public void SetValue(object property, object value) Parameters Type Name Description System.Object property The property. System.Object value The value. Implements IConnectorPropertyInfo Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IConnectorPropertyInfo"
  },
  "api/CB.Connector.Metadata.MetaModel.IPrimaryKey.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IPrimaryKey.html",
    "title": "Interface IPrimaryKey | CB Connector SDK website",
    "keywords": "Interface IPrimaryKey Provides a base interface for defining a SQL PRIMARY KEY constraint. It enforces data integrity and ensures unique identification. Inherited Members IConstraint.ConstrainedElements INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IPrimaryKey : IConstraint, INamedElement, IElement Properties ConstrainedColumns Gets the sub-collection of named elements. Each element is an IColumn and has to belong to the owner of the IPrimaryKey . Declaration IElementCollection<IColumn> ConstrainedColumns { get; } Property Value Type Description IElementCollection < IColumn > The sub-collection of named elements. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IConstraint"
  },
  "api/CB.Connector.Metadata.MetaModel.IParametricType.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IParametricType.html",
    "title": "Interface IParametricType | CB Connector SDK website",
    "keywords": "Interface IParametricType Provides a base interface for a data type – parametrized over type – that is determined at runtime. Inherited Members INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IParametricType : IDataType, INamedElement, IElement Methods GetDataType(IDataType[]) Determines the data type at runtime. Declaration IDataType GetDataType(params IDataType[] types) Parameters Type Name Description IDataType [] types A function to test each element for a condition. Returns Type Description IDataType The data type. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IDataType"
  },
  "api/CB.Connector.Metadata.MetaModel.IFunction.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IFunction.html",
    "title": "Interface IFunction | CB Connector SDK website",
    "keywords": "Interface IFunction Provides a base interface for defining a SQL Function that accepts input parameters and must return one or more values. Inherited Members INamespace.Elements INamespace.Add(INamedElement) INamespace.Remove(INamedElement) INamespace.TryGetElement<T>(String, T) ITypedElement.Type ITypedElement.IsNullable ITypedElement.DefaultValue INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IFunction : IQueryableElement, INamespace, ITypedElement, INamedElement, IElement Properties FunctionType Gets the type of the function. Declaration FunctionType FunctionType { get; } Property Value Type Description FunctionType The type of the function. Parameters Gets the sub collection of named elements. Each element is an IParameter . Declaration IElementCollection<IParameter> Parameters { get; } Property Value Type Description IElementCollection < IParameter > The parameters defined for the IFunction . Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IQueryableElement ITypedElement"
  },
  "api/CB.Connector.Metadata.MetaModel.IForeignKey.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IForeignKey.html",
    "title": "Interface IForeignKey | CB Connector SDK website",
    "keywords": "Interface IForeignKey Provides a base interface for defining a SQL FOREIGN KEY constraint that enforces data integrity and establishes a link between two Named Elements. Inherited Members IConstraint.ConstrainedElements INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IForeignKey : IConstraint, INamedElement, IElement Properties Columns Gets the collection of named elements. Each element must belong to the reference element. Declaration IElementCollection<IColumn> Columns { get; } Property Value Type Description IElementCollection < IColumn > The collection of named elements. ConstrainedColumns Gets the sub-collection of named elements. Each element must belong to the owner of the IConstraint . Declaration IElementCollection<IColumn> ConstrainedColumns { get; } Property Value Type Description IElementCollection < IColumn > The sub-collection of named elements. Reference Gets the table containing the candidate key. Declaration ITable Reference { get; } Property Value Type Description ITable The ITable containing the candidate key. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IConstraint"
  },
  "api/CB.Connector.Metadata.MetaModel.IElement.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IElement.html",
    "title": "Interface IElement | CB Connector SDK website",
    "keywords": "Interface IElement The foundation for all other modeling concepts in the meta model. Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IElement Remarks An Element – a constituted of a model – has no attributes and provides a single point from which all objects can be found. Properties Description Gets or sets the description defined for IElement . Declaration IDescriptor Description { get; set; } Property Value Type Description IDescriptor The description. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Metadata.MetaModel.IDescriptor.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IDescriptor.html",
    "title": "Interface IDescriptor | CB Connector SDK website",
    "keywords": "Interface IDescriptor Provides a base interface for a textual annotation that can be attached to an element. Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IDescriptor Remarks Every kind of element may own a descriptor. The descriptor for an element adds no semantics but may represent information useful to the reader of the model. Properties Body Gets a string that is the body/description, which must not exceed 250 characters. Declaration string Body { get; } Property Value Type Description System.String The body/description. Examples Gets a generic collection of key/value pairs: Label and example. Declaration IDictionary<string, string> Examples { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > The examples. Remarks Gets a string that is the remarks, which is used to add information, supplementing the information specified in the body. It must not exceed 250 characters. Declaration string Remarks { get; } Property Value Type Description System.String The remarks. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Metadata.MetaModel.IDataType.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IDataType.html",
    "title": "Interface IDataType | CB Connector SDK website",
    "keywords": "Interface IDataType Provides a base interface for defining a SQL Data Type that specifies a set of allowed data values. Inherited Members INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IDataType : INamedElement, IElement Remarks A IDataType constrains the values represented by an ITypedElement . Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also INamedElement"
  },
  "api/CB.Connector.Metadata.MetaModel.IConstraint.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IConstraint.html",
    "title": "Interface IConstraint | CB Connector SDK website",
    "keywords": "Interface IConstraint Provides a base interface for defining a SQL constraint that is an assertion that indicates a restriction that must be satisfied by any valid realization of the model containing the constraint (that is, rules). Inherited Members INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IConstraint : INamedElement, IElement Remarks An IConstraint is attached to a set of constrained elements, and it represents supplementary semantic information about those elements. Properties ConstrainedElements Gets the collection of constrained elements. Each element must belong to the owner of the IConstraint . Declaration IElementCollection<INamedElement> ConstrainedElements { get; } Property Value Type Description IElementCollection < INamedElement > The collection of named elements. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also INamedElement"
  },
  "api/CB.Connector.Metadata.MetaModel.Classes.QueryableElement.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Classes.QueryableElement.html",
    "title": "Class QueryableElement | CB Connector SDK website",
    "keywords": "Class QueryableElement Provides an abstract class for IQueryableElement . Inheritance System.Object NamedElement Namespace QueryableElement Procedure Table Implements IQueryableElement INamespace INamedElement IElement Inherited Members Namespace.DelimiterString Namespace.DelimiterArray Namespace.Elements Namespace.Add(INamedElement) Namespace.Remove(INamedElement) Namespace.TryGetElement<T>(String, T) Namespace.TryGetElementInternal<T>(String, T) Namespace.ResolveName(Type, String) Namespace.IsValidName(String) Namespace.GetDefaultNamespaces() NamedElement.Description NamedElement.ToString() NamedElement.Name NamedElement.QualifiedName NamedElement.Owner System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Classes Assembly : CB.Connector.dll Syntax public abstract class QueryableElement : Namespace, IQueryableElement, INamespace, INamedElement, IElement Constructors QueryableElement(String) Initializes a new instance of the Namespace class. Declaration protected QueryableElement(string name) Parameters Type Name Description System.String name The unique name. Implements IQueryableElement INamespace INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also Namespace IQueryableElement"
  },
  "api/CB.Connector.Metadata.MetaModel.Classes.Property.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Classes.Property.html",
    "title": "Class Property | CB Connector SDK website",
    "keywords": "Class Property Provides an abstract class for IProperty Inheritance System.Object NamedElement Property Implements IProperty ITypedElement INamedElement IOrdinalElement IElement Inherited Members NamedElement.Description NamedElement.ToString() NamedElement.Name NamedElement.QualifiedName NamedElement.Owner System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Classes Assembly : CB.Connector.dll Syntax public abstract class Property : NamedElement, IProperty, ITypedElement, INamedElement, IOrdinalElement, IElement Constructors Property(String, IDataType, Boolean, Int32) Initializes a new instance of the Property class. Declaration protected Property(string name, IDataType type, bool isNullable, int ordinal) Parameters Type Name Description System.String name IDataType type System.Boolean isNullable System.Int32 ordinal Properties DefaultValue Gets the default value of this instance. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object The default value. IsNullable Gets a value indicating whether this instance that can accepts null values. Declaration public bool IsNullable { get; set; } Property Value Type Description System.Boolean true if this instance does not accept null values; otherwise, false . Ordinal Gets the element’s ordinal position, which specifies where an element is in an order. Declaration public int Ordinal { get; set; } Property Value Type Description System.Int32 The ordinal position. Type Gets the type of this instance. Declaration public IDataType Type { get; set; } Property Value Type Description IDataType Returns the data type. Implements IProperty ITypedElement INamedElement IOrdinalElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also NamedElement IProperty"
  },
  "api/CB.Connector.Metadata.DataModel.ResultType.html": {
    "href": "api/CB.Connector.Metadata.DataModel.ResultType.html",
    "title": "Enum ResultType | CB Connector SDK website",
    "keywords": "Enum ResultType Represents an enumeration that defines literals used to specify the type of the result. Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public enum ResultType Fields Name Description EmptyResult Represents a return value that is used if this instance must return an empty result. MessageResult Represents a return value that is used if this instance must return a message result (e.g. exception, error message). TableResult Represents a return value that is used if this instance must return a table result. Extension Methods ConnectorPropertiesExtensions.TryParse(Type, Object) ConnectorPropertiesExtensions.Parse(Type) ConnectorPropertiesExtensions.Decrypt(String) ConnectorPropertiesExtensions.Encrypt(String) ConnectorPropertiesExtensions.IsEncrypted(String, Encoding)"
  },
  "api/CB.Connector.Metadata.DataModel.ResultState.html": {
    "href": "api/CB.Connector.Metadata.DataModel.ResultState.html",
    "title": "Enum ResultState | CB Connector SDK website",
    "keywords": "Enum ResultState Represents an enumeration that defines literals used to specify the current state of the result. Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public enum ResultState Fields Name Description Completed The result consumed the data. DataReady The result received the data. Disposed The result was disposed. Error The result contains an error. New The result was not initialized. WaitForData The result is waiting for data. Extension Methods ConnectorPropertiesExtensions.TryParse(Type, Object) ConnectorPropertiesExtensions.Parse(Type) ConnectorPropertiesExtensions.Decrypt(String) ConnectorPropertiesExtensions.Encrypt(String) ConnectorPropertiesExtensions.IsEncrypted(String, Encoding)"
  },
  "api/CB.Connector.Metadata.DataModel.IRowData.html": {
    "href": "api/CB.Connector.Metadata.DataModel.IRowData.html",
    "title": "Interface IRowData | CB Connector SDK website",
    "keywords": "Interface IRowData Data about each cell in a row. Inherited Members System.IDisposable.Dispose() Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface IRowData : IDisposable Properties Item[Int32] Gets or sets the element at the specified index. Declaration object this[int index] { get; set; } Parameters Type Name Description System.Int32 index The zero-based index of the element to get or set. Property Value Type Description System.Object RawData Gets a generic view of a sequence of bytes. Declaration Stream RawData { get; } Property Value Type Description System.IO.Stream A generic view of a sequence of bytes. Methods CreateRowDataDeserialized() Creates a new IRowData instance. Declaration IRowData CreateRowDataDeserialized() Returns Type Description IRowData A new IRowData instance. GetValues() Gets the values in the row, one per column. Declaration object[] GetValues() Returns Type Description System.Object [] The values in the row, one per column. SetRawData(Stream) Sets a generic view of a sequence of bytes. Declaration void SetRawData(Stream rawData) Parameters Type Name Description System.IO.Stream rawData A generic view of a sequence of bytes. SetValues(Object[]) Sets the values in the row, one per column. Declaration void SetValues(object[] values) Parameters Type Name Description System.Object [] values The values in the row, one per column. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also System.IDisposable"
  },
  "api/CB.Connector.Metadata.DataModel.IResultFormatter.html": {
    "href": "api/CB.Connector.Metadata.DataModel.IResultFormatter.html",
    "title": "Interface IResultFormatter | CB Connector SDK website",
    "keywords": "Interface IResultFormatter Provides base functionality for formatting data that belong to the result set. Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface IResultFormatter Methods Deserialize(BinaryReader, Object) Converts the specified result to an object. Declaration object Deserialize(BinaryReader reader, object context) Parameters Type Name Description System.IO.BinaryReader reader Reads primitive data types as binary values in a specific encoding. System.Object context The contextual information used to serialize the object. Returns Type Description System.Object DeserializeRow(BinaryReader, ITableResult, Object) Deserializes the specified ITableResult to an ITableResultRow object. Declaration ITableResultRow DeserializeRow(BinaryReader reader, ITableResult result, object context) Parameters Type Name Description System.IO.BinaryReader reader Reads primitive data types as binary values in a specific encoding. ITableResult result The ITableResult to deserialize. System.Object context The contextual information used to serialize the object. Returns Type Description ITableResultRow DeserializeRowData(BinaryReader, Object) Deserializes the specified object to an IRowData object. Declaration IRowData DeserializeRowData(BinaryReader reader, object context) Parameters Type Name Description System.IO.BinaryReader reader Reads primitive data types as binary values in a specific encoding. System.Object context The contextual information used to serialize the object. Returns Type Description IRowData DeserializeValueArray(BinaryReader, Object) Deserializes the specified object to an object array. Declaration object[] DeserializeValueArray(BinaryReader reader, object context) Parameters Type Name Description System.IO.BinaryReader reader Reads primitive data types as binary values in a specific encoding. System.Object context The contextual information used to serialize the object. Returns Type Description System.Object [] FinishSerialization(BinaryWriter, Object) Finishes the serialization. Declaration void FinishSerialization(BinaryWriter writer, object context) Parameters Type Name Description System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. Serialize(Object, BinaryWriter, Object) Serializes the specified object. Declaration void Serialize(object value, BinaryWriter writer, object context) Parameters Type Name Description System.Object value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeBool(Nullable<Boolean>, BinaryWriter, Object) Serializes the specified object. Declaration void SerializeBool(bool? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Boolean > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeByte(Nullable<Byte>, BinaryWriter, Object) Serializes the specified object. Declaration void SerializeByte(byte? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Byte > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeByteArray(Byte[], BinaryWriter, Object) Serializes the specified object. Declaration void SerializeByteArray(byte[] value, BinaryWriter writer, object context) Parameters Type Name Description System.Byte [] value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeChar(Nullable<Char>, BinaryWriter, Object) Serializes the specified object. Declaration void SerializeChar(char? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Char > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeDateTime(Nullable<DateTime>, BinaryWriter, Object) Serializes the specified object. Declaration void SerializeDateTime(DateTime? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.DateTime > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeDecimal(Nullable<Decimal>, BinaryWriter, Object) Serializes the specified object. Declaration void SerializeDecimal(decimal? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Decimal > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeDouble(Nullable<Double>, BinaryWriter, Object) Serializes the specified object. Declaration void SerializeDouble(double? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Double > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeInt16(Nullable<Int16>, BinaryWriter, Object) Serializes the specified object. Declaration void SerializeInt16(short? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Int16 > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeInt32(Nullable<Int32>, BinaryWriter, Object) Serializes the specified object. Declaration void SerializeInt32(int? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Int32 > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeInt64(Nullable<Int64>, BinaryWriter, Object) Serializes the specified object. Declaration void SerializeInt64(long? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Int64 > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeRow(ITableResultRow, BinaryWriter, Object) Serializes the specified row. Declaration void SerializeRow(ITableResultRow row, BinaryWriter writer, object context) Parameters Type Name Description ITableResultRow row The row to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeRowData(IList<IColumnArgument>, IRowData, BinaryWriter, Object) Serializes the specified data that belongs to a row. Each value for each column. Declaration void SerializeRowData(IList<IColumnArgument> columns, IRowData rowData, BinaryWriter writer, object context) Parameters Type Name Description System.Collections.Generic.IList < IColumnArgument > columns The columns that are included in the result. IRowData rowData The data to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeSbyte(Nullable<SByte>, BinaryWriter, Object) Serializes the specified object. Declaration void SerializeSbyte(sbyte? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.SByte > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeSingle(Nullable<Single>, BinaryWriter, Object) Serializes the specified object. Declaration void SerializeSingle(float? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Single > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeString(String, BinaryWriter, Object) Serializes the specified object. Declaration void SerializeString(string value, BinaryWriter writer, object context) Parameters Type Name Description System.String value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeUInt16(Nullable<UInt16>, BinaryWriter, Object) Serializes the specified object. Declaration void SerializeUInt16(ushort? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.UInt16 > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeUInt32(Nullable<UInt32>, BinaryWriter, Object) Serializes the specified object. Declaration void SerializeUInt32(uint? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.UInt32 > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeUInt64(Nullable<UInt64>, BinaryWriter, Object) Serializes the specified object. Declaration void SerializeUInt64(ulong? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.UInt64 > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. StartSerialization(BinaryWriter, Object) Starts the serialization. Declaration void StartSerialization(BinaryWriter writer, object context) Parameters Type Name Description System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Metadata.DataModel.IResultContext.html": {
    "href": "api/CB.Connector.Metadata.DataModel.IResultContext.html",
    "title": "Interface IResultContext | CB Connector SDK website",
    "keywords": "Interface IResultContext Encapsulates information about the result of a command. Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface IResultContext Properties BigStringConversionEnabled Gets a value indicating whether string conversion is enabled. Declaration bool BigStringConversionEnabled { get; } Property Value Type Description System.Boolean true if string conversion is enabled; otherwise, false . BigStringMaxSize Gets the maximum number of characters for a string. Declaration int BigStringMaxSize { get; } Property Value Type Description System.Int32 CurrentColumn Gets or sets the ordinal position of the column. Declaration uint CurrentColumn { get; set; } Property Value Type Description System.UInt32 CurrentRow Gets or sets the index of the row. Declaration uint CurrentRow { get; set; } Property Value Type Description System.UInt32 Methods GetLob(Guid) Gets ILob object with the specified identifier. Declaration ILob GetLob(Guid id) Parameters Type Name Description System.Guid id The unique identifier. Returns Type Description ILob The ILob object with the specified identifier. RegisterLob(ILob) Registers an ILob object. Declaration void RegisterLob(ILob lob) Parameters Type Name Description ILob lob An ILob object. SetBigStringConversion(Boolean, Int32) Enables/Disables string conversion. Declaration void SetBigStringConversion(bool enabled, int maxSize = 2048) Parameters Type Name Description System.Boolean enabled True value means that string conversion is enabled. System.Int32 maxSize The maximum size. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Metadata.DataModel.ICLob.html": {
    "href": "api/CB.Connector.Metadata.DataModel.ICLob.html",
    "title": "Interface ICLob | CB Connector SDK website",
    "keywords": "Interface ICLob Represents a character large object (CLOB) data types used to store single-byte and multi-byte character-based data, such as large documents in any character set. Inherited Members ILob.BaseStream ILob.Id System.IDisposable.Dispose() Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface ICLob : ILob, IDisposable Properties Encoding Gets a character encoding. Declaration Encoding Encoding { get; } Property Value Type Description System.Text.Encoding Returns a character encoding. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ILob"
  },
  "api/CB.Connector.Metadata.DataModel.Classes.ResultFormatterClassic.html": {
    "href": "api/CB.Connector.Metadata.DataModel.Classes.ResultFormatterClassic.html",
    "title": "Class ResultFormatterClassic | CB Connector SDK website",
    "keywords": "Class ResultFormatterClassic Default implementation of IResultFormatter . Inheritance System.Object ResultFormatterClassic Implements IResultFormatter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.DataModel.Classes Assembly : CB.Connector.dll Syntax public class ResultFormatterClassic : IResultFormatter Fields MaxStrChunkSize The maximum string chunk size. Declaration public static readonly long MaxStrChunkSize Field Value Type Description System.Int64 Methods Deserialize(BinaryReader, Object) Converts the specified result to an object. Declaration public object Deserialize(BinaryReader reader, object context) Parameters Type Name Description System.IO.BinaryReader reader Reads primitive data types as binary values in a specific encoding. System.Object context The contextual information used to serialize the object. Returns Type Description System.Object DeserializeRow(BinaryReader, ITableResult, Object) Deserializes the specified ITableResult to an ITableResultRow object. Declaration public ITableResultRow DeserializeRow(BinaryReader reader, ITableResult result, object context) Parameters Type Name Description System.IO.BinaryReader reader Reads primitive data types as binary values in a specific encoding. ITableResult result The ITableResult to deserialize. System.Object context The contextual information used to serialize the object. Returns Type Description ITableResultRow DeserializeRowData(BinaryReader, Object) Deserializes the specified object to an IRowData object. Declaration public IRowData DeserializeRowData(BinaryReader reader, object context) Parameters Type Name Description System.IO.BinaryReader reader Reads primitive data types as binary values in a specific encoding. System.Object context The contextual information used to serialize the object. Returns Type Description IRowData DeserializeValueArray(BinaryReader, Object) Deserializes the specified object to an object array. Declaration public object[] DeserializeValueArray(BinaryReader reader, object context) Parameters Type Name Description System.IO.BinaryReader reader Reads primitive data types as binary values in a specific encoding. System.Object context The contextual information used to serialize the object. Returns Type Description System.Object [] FinishSerialization(BinaryWriter, Object) Finishes the serialization. Declaration public void FinishSerialization(BinaryWriter writer, object context) Parameters Type Name Description System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. Serialize(Object, BinaryWriter, Object) Serializes the specified object. Declaration public void Serialize(object value, BinaryWriter writer, object context) Parameters Type Name Description System.Object value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeBool(Nullable<Boolean>, BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeBool(bool? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Boolean > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeByte(Nullable<Byte>, BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeByte(byte? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Byte > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeByteArray(Byte[], BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeByteArray(byte[] value, BinaryWriter writer, object context) Parameters Type Name Description System.Byte [] value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeChar(Nullable<Char>, BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeChar(char? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Char > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeDateTime(Nullable<DateTime>, BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeDateTime(DateTime? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.DateTime > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeDecimal(Nullable<Decimal>, BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeDecimal(decimal? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Decimal > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeDouble(Nullable<Double>, BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeDouble(double? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Double > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeInt16(Nullable<Int16>, BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeInt16(short? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Int16 > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeInt32(Nullable<Int32>, BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeInt32(int? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Int32 > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeInt64(Nullable<Int64>, BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeInt64(long? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Int64 > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeRow(ITableResultRow, BinaryWriter, Object) Serializes the specified row. Declaration public void SerializeRow(ITableResultRow row, BinaryWriter writer, object context) Parameters Type Name Description ITableResultRow row The row to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeRowData(IList<IColumnArgument>, IRowData, BinaryWriter, Object) Serializes the specified data that belongs to a row. Each value for each column. Declaration public void SerializeRowData(IList<IColumnArgument> columns, IRowData rowData, BinaryWriter writer, object context) Parameters Type Name Description System.Collections.Generic.IList < IColumnArgument > columns The columns that are included in the result. IRowData rowData The data to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeSbyte(Nullable<SByte>, BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeSbyte(sbyte? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.SByte > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeSingle(Nullable<Single>, BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeSingle(float? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.Single > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeString(String, BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeString(string value, BinaryWriter writer, object context) Parameters Type Name Description System.String value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeUInt16(Nullable<UInt16>, BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeUInt16(ushort? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.UInt16 > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeUInt32(Nullable<UInt32>, BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeUInt32(uint? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.UInt32 > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. SerializeUInt64(Nullable<UInt64>, BinaryWriter, Object) Serializes the specified object. Declaration public void SerializeUInt64(ulong? value, BinaryWriter writer, object context) Parameters Type Name Description System.Nullable < System.UInt64 > value The object to serialize. System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. StartSerialization(BinaryWriter, Object) Starts the serialization. Declaration public void StartSerialization(BinaryWriter writer, object context) Parameters Type Name Description System.IO.BinaryWriter writer Writes primitive types in binary to a stream and supports writing strings in a specific encoding. System.Object context The contextual information used to serialize the object. Implements IResultFormatter Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IResultFormatter"
  },
  "api/CB.Connector.Authentication.Infrastructure.RequestFactory.html": {
    "href": "api/CB.Connector.Authentication.Infrastructure.RequestFactory.html",
    "title": "Class RequestFactory | CB Connector SDK website",
    "keywords": "Class RequestFactory Default implementation of IRequestFactory . Inheritance System.Object RequestFactory Implements IRequestFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Authentication.Infrastructure Assembly : CB.Connector.dll Syntax public class RequestFactory : IRequestFactory Methods CreateClient() Creates an RestSharp.IRestClient instance. Declaration public IRestClient CreateClient() Returns Type Description RestSharp.IRestClient An RestSharp.IRestClient instance. CreateRequest() Creates an RestSharp.IRestRequest instance. Declaration public IRestRequest CreateRequest() Returns Type Description RestSharp.IRestRequest An RestSharp.IRestRequest instance. Implements IRequestFactory Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) RequestFactoryExtensions.CreateClient(IRequestFactory, Endpoint) RequestFactoryExtensions.CreateRequest(IRequestFactory, Endpoint) RequestFactoryExtensions.CreateRequest(IRequestFactory, Endpoint, Method) See Also IRequestFactory"
  },
  "api/CB.Connector.Authentication.Infrastructure.Extensions.RequestFactoryExtensions.html": {
    "href": "api/CB.Connector.Authentication.Infrastructure.Extensions.RequestFactoryExtensions.html",
    "title": "Class RequestFactoryExtensions | CB Connector SDK website",
    "keywords": "Class RequestFactoryExtensions Holds extension methods for IRequestFactory . Inheritance System.Object RequestFactoryExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Authentication.Infrastructure.Extensions Assembly : CB.Connector.dll Syntax public static class RequestFactoryExtensions Methods CreateClient(IRequestFactory, Endpoint) Creates and configures an RestSharp.IRestClient instance. Declaration public static IRestClient CreateClient(this IRequestFactory factory, Endpoint endpoint) Parameters Type Name Description IRequestFactory factory Reference to the calling object. Endpoint endpoint The endpoint URI. Returns Type Description RestSharp.IRestClient Returns an RestSharp.IRestClient instance. CreateRequest(IRequestFactory, Endpoint) Creates and configures an RestSharp.IRestRequest instance. Declaration public static IRestRequest CreateRequest(this IRequestFactory factory, Endpoint endpoint) Parameters Type Name Description IRequestFactory factory Reference to the calling object. Endpoint endpoint The endpoint URI. Returns Type Description RestSharp.IRestRequest Returns an RestSharp.IRestRequest instance. CreateRequest(IRequestFactory, Endpoint, Method) Creates and configures an RestSharp.IRestRequest instance. Declaration public static IRestRequest CreateRequest(this IRequestFactory factory, Endpoint endpoint, Method method) Parameters Type Name Description IRequestFactory factory Reference to the calling object. Endpoint endpoint The endpoint URI. RestSharp.Method method HTTP method to use when making requests Returns Type Description RestSharp.IRestRequest Returns an RestSharp.IRestRequest instance."
  },
  "api/CB.Connector.Property.TypeValueProvider.html": {
    "href": "api/CB.Connector.Property.TypeValueProvider.html",
    "title": "Class TypeValueProvider | CB Connector SDK website",
    "keywords": "Class TypeValueProvider Default implementation of Newtonsoft.Json.Serialization.IValueProvider . Inheritance System.Object TypeValueProvider Implements Newtonsoft.Json.Serialization.IValueProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Property Assembly : CB.Connector.dll Syntax public class TypeValueProvider : IValueProvider Constructors TypeValueProvider(PropertyInfo) Initializes a new instance of the TypeValueProvider class. Declaration public TypeValueProvider(PropertyInfo targetProperty) Parameters Type Name Description System.Reflection.PropertyInfo targetProperty The target property. Methods GetValue(Object) Gets the value. Declaration public object GetValue(object target) Parameters Type Name Description System.Object target The target to get the value from. Returns Type Description System.Object The value. Remarks This method is called by Json.Net during serialization. The target parameter has the object from which to read the value; the return value is what gets written to the JSON. SetValue(Object, Object) Sets the value. Declaration public void SetValue(object target, object value) Parameters Type Name Description System.Object target The target to set the value on. System.Object value The value to set on the target. Remarks This method is called by Json.Net during deserialization. The value parameter has the original value read from the JSON; target is the object on which to set the value. Implements Newtonsoft.Json.Serialization.IValueProvider Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also Newtonsoft.Json.Serialization.IValueProvider"
  },
  "api/CB.Connector.Property.IConnectorPropertyInfo.html": {
    "href": "api/CB.Connector.Property.IConnectorPropertyInfo.html",
    "title": "Interface IConnectorPropertyInfo | CB Connector SDK website",
    "keywords": "Interface IConnectorPropertyInfo Defines the attributes of a property and provides access to property metadata. Namespace : CB.Connector.Property Assembly : CB.Connector.dll Syntax public interface IConnectorPropertyInfo Properties DefaultValue Gets the default value of the property. Declaration object DefaultValue { get; } Property Value Type Description System.Object The default value of the property. DependsOn Gets the dependency(ies) of the property. Declaration string DependsOn { get; } Property Value Type Description System.String The dependency(ies) of the property. Description Gets a textual annotation that is used to add information. Declaration string Description { get; } Property Value Type Description System.String A textual annotation that is used to add information. Enumeration Gets an enumeration of the property. Declaration string Enumeration { get; } Property Value Type Description System.String An enumeration of the property. Flags Gets the flag used to describe the distinctive nature or features of a property. Declaration ConnectorPropertyFlags Flags { get; } Property Value Type Description ConnectorPropertyFlags The flag used to describe the distinctive nature or features of a property. IsEncrypted Gets a value indicating whether the property is encrypted. Declaration bool IsEncrypted { get; } Property Value Type Description System.Boolean true if the property is encrypted; otherwise, false . IsOptional Gets a value indicating whether the property is optional. Declaration bool IsOptional { get; } Property Value Type Description System.Boolean true if the property is optional; otherwise, false . IsOverridable Gets a value indicating whether the property is overridable. Declaration bool IsOverridable { get; } Property Value Type Description System.Boolean true if the property is overridable; otherwise, false . Key Gets the unique name of the property. Declaration string Key { get; } Property Value Type Description System.String The unique name of the property Name Gets the name of the property. Declaration string Name { get; } Property Value Type Description System.String The name of the property Namespace Gets the namespace of the property. Declaration string Namespace { get; } Property Value Type Description System.String The namespace of the property. Ordinal Gets the property’s ordinal position, which specifies where a property is in an order. Declaration int Ordinal { get; } Property Value Type Description System.Int32 The property’s ordinal position. RegexValidator Gets the validator for a regular expression. Declaration string RegexValidator { get; } Property Value Type Description System.String The validator for a regular expression. Type Gets the type of the property. Declaration Type Type { get; } Property Value Type Description System.Type A Type defined for the property. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Property.IConnectorProperties.html": {
    "href": "api/CB.Connector.Property.IConnectorProperties.html",
    "title": "Interface IConnectorProperties | CB Connector SDK website",
    "keywords": "Interface IConnectorProperties Base interface for defining the properties that are used to hold configuration information. Namespace : CB.Connector.Property Assembly : CB.Connector.dll Syntax public interface IConnectorProperties Properties PublicKey Gets the public RSA key used to encrypt/decrypt data with the RSA algorithm. Declaration string PublicKey { get; } Property Value Type Description System.String The public key. Methods CanDecorate<T>() Determines whether this instance can be decorated. Declaration bool CanDecorate<T>() Returns Type Description System.Boolean true if this instance can be decorate; otherwise, false . Type Parameters Name Description T The desired type for the decorator. Decorate<T>() Decorates this instance. Declaration T Decorate<T>() where T : IConnectorPropertiesDecorator Returns Type Description T An IConnectorPropertiesDecorator instance. Type Parameters Name Description T The desired type for the decorator. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Property.GetEncryptedPropertyAs.html": {
    "href": "api/CB.Connector.Property.GetEncryptedPropertyAs.html",
    "title": "Enum GetEncryptedPropertyAs | CB Connector SDK website",
    "keywords": "Enum GetEncryptedPropertyAs Specifies the mode to use for encryption. Namespace : CB.Connector.Property Assembly : CB.Connector.dll Syntax public enum GetEncryptedPropertyAs Fields Name Description Censured Censured data. Encrypted Encrypted data. Plain Plaintext data. Extension Methods ConnectorPropertiesExtensions.TryParse(Type, Object) ConnectorPropertiesExtensions.Parse(Type) ConnectorPropertiesExtensions.Decrypt(String) ConnectorPropertiesExtensions.Encrypt(String) ConnectorPropertiesExtensions.IsEncrypted(String, Encoding)"
  },
  "api/CB.Connector.Property.Extensions.html": {
    "href": "api/CB.Connector.Property.Extensions.html",
    "title": "Namespace CB.Connector.Property.Extensions | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Property.Extensions Classes ConnectorPropertiesExtensions Holds extension methods for ConnectorProperties<T> . ConnectorPropertyFlagsExtensions Holds extension methods for ConnectorPropertyFlags ."
  },
  "api/CB.Connector.Property.Extensions.ConnectorPropertyFlagsExtensions.html": {
    "href": "api/CB.Connector.Property.Extensions.ConnectorPropertyFlagsExtensions.html",
    "title": "Class ConnectorPropertyFlagsExtensions | CB Connector SDK website",
    "keywords": "Class ConnectorPropertyFlagsExtensions Holds extension methods for ConnectorPropertyFlags . Inheritance System.Object ConnectorPropertyFlagsExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Property.Extensions Assembly : CB.Connector.dll Syntax public static class ConnectorPropertyFlagsExtensions Methods GetAuthenticationType(ConnectorPropertyFlags) Gets the type of the authentication. Declaration public static AuthenticationType GetAuthenticationType(this ConnectorPropertyFlags _this) Parameters Type Name Description ConnectorPropertyFlags _this Reference to the calling object. Returns Type Description AuthenticationType Teh type of the authentication. SetAuthenticationType(ConnectorPropertyFlags, AuthenticationType) Sets the type of the authentication. Declaration public static ConnectorPropertyFlags SetAuthenticationType(this ConnectorPropertyFlags _this, AuthenticationType type) Parameters Type Name Description ConnectorPropertyFlags _this Reference to the calling object. AuthenticationType type The type of the authentication. Returns Type Description ConnectorPropertyFlags The flag indicating the type of the authentication."
  },
  "api/CB.Connector.Property.Extensions.ConnectorPropertiesExtensions.html": {
    "href": "api/CB.Connector.Property.Extensions.ConnectorPropertiesExtensions.html",
    "title": "Class ConnectorPropertiesExtensions | CB Connector SDK website",
    "keywords": "Class ConnectorPropertiesExtensions Holds extension methods for ConnectorProperties<T> . Inheritance System.Object ConnectorPropertiesExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Property.Extensions Assembly : CB.Connector.dll Syntax public static class ConnectorPropertiesExtensions Methods Decrypt(Object, String) Decrypts data that was previously encrypted with the RSA algorithm. Declaration public static string Decrypt(this object _this, string rsaKey) Parameters Type Name Description System.Object _this Reference to the calling object. System.String rsaKey The RSA key. Returns Type Description System.String The decrypted data, which is the original plain text before encryption. Encrypt(Object, String) Encrypts data with the RSA algorithm. Declaration public static object Encrypt(this object _this, string rsaKey) Parameters Type Name Description System.Object _this Reference to the calling object. System.String rsaKey The RSA key. Returns Type Description System.Object The encrypted data. GetOAuth2Client(IOAuth2Configuration) Gets the OAuth 2.0 Client object. Declaration public static OAuth2Client GetOAuth2Client(this IOAuth2Configuration _this) Parameters Type Name Description IOAuth2Configuration _this Reference to the calling object. Returns Type Description OAuth2Client The OAuth 2.0 Client object. IsEncrypted(Object, String, Encoding) Determines whether the specified string is encrypted. Declaration public static bool IsEncrypted(this object _this, string rsaKey, Encoding textEncoding = null) Parameters Type Name Description System.Object _this Reference to the calling object. System.String rsaKey The RSA key. System.Text.Encoding textEncoding The text encoding. Returns Type Description System.Boolean true if the specified string is encrypted; otherwise, false . Parse(Object, Type) Converts the given value to the specified type. Declaration public static object Parse(this object _this, Type type) Parameters Type Name Description System.Object _this Reference to the calling object. System.Type type The System.Type to convert the value parameter to. Returns Type Description System.Object An object that represents the converted value. RefreshOAuth2Properties(IOAuth2Configuration) Refreshes OAuth 2.0 properties. Declaration public static void RefreshOAuth2Properties(this IOAuth2Configuration _this) Parameters Type Name Description IOAuth2Configuration _this Reference to the calling object. TryParse(Object, Type, out Object) Converts the given value to the specified type. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(this object _this, Type type, out object result) Parameters Type Name Description System.Object _this Reference to the calling object. System.Type type The System.Type to convert the value parameter to. System.Object result When this method returns, contains an object that represents the converted value, if the conversion succeeded; otherwise, null . Returns Type Description System.Boolean true if value was converted successfully; otherwise, false"
  },
  "api/CB.Connector.Metadata.MetaModel.IParameter.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IParameter.html",
    "title": "Interface IParameter | CB Connector SDK website",
    "keywords": "Interface IParameter Provides a base interface for defining a SQL Parameter that is a property owned by a function or procedure. Inherited Members ITypedElement.Type ITypedElement.IsNullable ITypedElement.DefaultValue INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IOrdinalElement.Ordinal IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IParameter : IProperty, ITypedElement, INamedElement, IOrdinalElement, IElement Properties Direction Gets the parameter’s direction which specifies whether a value is passed into, out of, or both into and out of the owning element. Declaration ParameterDirectionKind Direction { get; } Property Value Type Description ParameterDirectionKind The direction. IsReadOnly Gets or sets a value indicating whether this instance is read-only, meaning that the parameter may not be written to after initialization. Declaration bool IsReadOnly { get; set; } Property Value Type Description System.Boolean true if this instance is read-only; otherwise, false . Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IProperty"
  },
  "api/CB.Connector.Metadata.MetaModel.IOrdinalElement.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IOrdinalElement.html",
    "title": "Interface IOrdinalElement | CB Connector SDK website",
    "keywords": "Interface IOrdinalElement Provides a base interface for defining an element that has an ordinal position specified for it, which stipulates where an element is in an order. Inherited Members IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IOrdinalElement : IElement Properties Ordinal Gets the element’s ordinal position, which specifies where an element is in an order. Declaration int Ordinal { get; } Property Value Type Description System.Int32 The ordinal position. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IElement"
  },
  "api/CB.Connector.Metadata.MetaModel.INotNull.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.INotNull.html",
    "title": "Interface INotNull | CB Connector SDK website",
    "keywords": "Interface INotNull Provides a base interface for defining a SQL NOT NULL constraint. It ensures that a constrained element has no NULL value. Inherited Members IConstraint.ConstrainedElements INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface INotNull : IConstraint, INamedElement, IElement Properties ConstrainedColumns Gets the sub-collection of named elements. Each element is an IColumn . Declaration IElementCollection<IColumn> ConstrainedColumns { get; } Property Value Type Description IElementCollection < IColumn > The sub-collection of named elements. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IConstraint"
  },
  "api/CB.Connector.Metadata.MetaModel.INamespace.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.INamespace.html",
    "title": "Interface INamespace | CB Connector SDK website",
    "keywords": "Interface INamespace Provides a base interface for an element in the model that contains a set of elements that can be identified by name within the Namespace. Inherited Members INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface INamespace : INamedElement, IElement Remarks Typically, nearly every element in the model will be owned by some INamedElement , which is an INamedElement . Accordingly, if an element of a Namespace with the name “Production” is a Named Element with the name “Product”, the fully qualified name of a Named Element is “Production.Product”. Properties Elements Gets the collection of named elements. Declaration IElementCollection<INamedElement> Elements { get; } Property Value Type Description IElementCollection < INamedElement > The collection of named elements. Methods Add(INamedElement) Adds an element to the Elements . The owner property MUST be set. Declaration void Add(INamedElement child) Parameters Type Name Description INamedElement child The element to add to the Elements . Remove(INamedElement) Removes an element from the Elements . The owner property MUST be unset. Declaration void Remove(INamedElement child) Parameters Type Name Description INamedElement child The element to remove from the Elements . TryGetElement<T>(String, out T) Gets the element associated with the specified name. Declaration bool TryGetElement<T>(string name, out T element) where T : INamedElement Parameters Type Name Description System.String name The name of the item to get. T element When this method returns, contains the item associated with the specified name, if the name is found; otherwise, the default element for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if Elements contains an element with the specified key; otherwise, false . Type Parameters Name Description T The type of item to get. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also INamedElement"
  },
  "api/CB.Connector.Metadata.MetaModel.INamedElement.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.INamedElement.html",
    "title": "Interface INamedElement | CB Connector SDK website",
    "keywords": "Interface INamedElement Provides a base interface for an element in the model that has a name. The name is used for identification of the INamedElement within the INamespace s wherein it is defined or accessible. Inherited Members IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface INamedElement : IElement Properties Name Gets the name of the named element. Declaration string Name { get; } Property Value Type Description System.String The name of the named element. Remarks Must not exceed 128 characters Owner Gets or sets the owner of the named element. Declaration INamedElement Owner { get; set; } Property Value Type Description INamedElement A System.String value that specifies the owner of the named element. QualifiedName Gets the name that allows the named element to be identified within a hierarchy of nested namespaces. Declaration string QualifiedName { get; } Property Value Type Description System.String The qualified name. Remarks It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the named element itself. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IElement"
  },
  "api/CB.Connector.Metadata.MetaModel.IMetaModel.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IMetaModel.html",
    "title": "Interface IMetaModel | CB Connector SDK website",
    "keywords": "Interface IMetaModel Provides a base interface for a view of a physical system (data source). It is an abstraction of the physical system (data source). Inherited Members INamespace.Elements INamespace.Add(INamedElement) INamespace.Remove(INamedElement) INamespace.TryGetElement<T>(String, T) INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description System.IDisposable.Dispose() Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IMetaModel : INamespace, INamedElement, IElement, IDisposable Properties DefaultSchema Gets the default schema. Declaration string DefaultSchema { get; } Property Value Type Description System.String The default schema. Schemas Gets the sub-collection of named elements. Each element is an ISchema object. Declaration IElementCollection<ISchema> Schemas { get; } Property Value Type Description IElementCollection < ISchema > The schemas defined for the IMetaModel . Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also INamespace System.IDisposable"
  },
  "api/CB.Connector.Metadata.MetaModel.ILoader.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.ILoader.html",
    "title": "Interface ILoader | CB Connector SDK website",
    "keywords": "Interface ILoader Represents the type that implements lazy loading for loading related data. Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface ILoader Methods TryLoadElement<T>(String, out T, Object) Loads a element that belongs to the ghost object associated with the specified name. Declaration bool TryLoadElement<T>(string name, out T element, object ghost) Parameters Type Name Description System.String name The name of the value to get. T element When this method returns, contains the item associated with the specified name; otherwise, the default element for the type of the value parameter. This parameter is passed uninitialized. System.Object ghost Corresponds to the real object, but not in its full state. It may be empty, or it may contain just some fields. When the user tries to access some fields that haven't been loaded yet, the ghost object fully initializes itself. Returns Type Description System.Boolean true if the ghost contains an element with the specified name; otherwise, false . Type Parameters Name Description T The type of value to get. TryLoadElements<T>(out ICollection<T>, Object) Loads a set of elements that belongs to the ghost object. Declaration bool TryLoadElements<T>(out ICollection<T> elements, object ghost) Parameters Type Name Description System.Collections.Generic.ICollection <T> elements When this method returns, contains a set of elements that belongs to the ghost object; otherwise, null . This parameter is passed uninitialized. System.Object ghost Corresponds to the real object, but not in its full state. It may be empty, or it may contain just some fields (such as the Name, QualifiedName, and so on). When the user tries to access some fields that haven't been loaded yet, the ghost object fully initializes itself. Returns Type Description System.Boolean true if the ghost contains a set of elements; otherwise, false . Type Parameters Name Description T The type of value to get. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Metadata.MetaModel.IJsonType.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IJsonType.html",
    "title": "Interface IJsonType | CB Connector SDK website",
    "keywords": "Interface IJsonType Provides a base interface for representing the definition of a JavaScript Object Notation (JSON) document. Inherited Members INamespace.Elements INamespace.Add(INamedElement) INamespace.Remove(INamedElement) INamespace.TryGetElement<T>(String, T) INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IJsonType : IComplexType, IDataType, INamespace, INamedElement, IElement Remarks The JSON Type provides several advantages over storing JSON-format strings in a string Property, such as: Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IComplexType"
  },
  "api/CB.Connector.Metadata.MetaModel.Classes.Procedure.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Classes.Procedure.html",
    "title": "Class Procedure | CB Connector SDK website",
    "keywords": "Class Procedure Provides a base class for IProcedure . Inheritance System.Object NamedElement Namespace QueryableElement Procedure Implements IProcedure IQueryableElement INamespace INamedElement IElement Inherited Members Namespace.DelimiterString Namespace.DelimiterArray Namespace.Add(INamedElement) Namespace.Remove(INamedElement) Namespace.TryGetElement<T>(String, T) Namespace.TryGetElementInternal<T>(String, T) Namespace.ResolveName(Type, String) Namespace.IsValidName(String) Namespace.GetDefaultNamespaces() NamedElement.Description NamedElement.ToString() NamedElement.Name NamedElement.QualifiedName NamedElement.Owner System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Classes Assembly : CB.Connector.dll Syntax public class Procedure : QueryableElement, IProcedure, IQueryableElement, INamespace, INamedElement, IElement Constructors Procedure(String) Initializes a new instance of the Procedure class. Declaration public Procedure(string name) Parameters Type Name Description System.String name Procedure(String, ILoader) Initializes a new instance of the Procedure class. Declaration public Procedure(string name, ILoader loader) Parameters Type Name Description System.String name The name. ILoader loader The loader. Properties Elements Gets the collection of named elements. Declaration public override sealed IElementCollection<INamedElement> Elements { get; } Property Value Type Description IElementCollection < INamedElement > The collection of named elements. Overrides Namespace.Elements Parameters Gets the sub-collection of named elements. Each element is an IParameter . Declaration public virtual IElementCollection<IParameter> Parameters { get; } Property Value Type Description IElementCollection < IParameter > The parameters defined for IProcedure . ResultColumns Gets the sub-collection of named elements. Each element is an IColumn . Declaration public virtual IElementCollection<IColumn> ResultColumns { get; } Property Value Type Description IElementCollection < IColumn > Implements IProcedure IQueryableElement INamespace INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also QueryableElement IProcedure"
  },
  "api/CB.Connector.Metadata.MetaModel.Classes.PrimitiveType.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Classes.PrimitiveType.html",
    "title": "Class PrimitiveType | CB Connector SDK website",
    "keywords": "Class PrimitiveType Provides an abstract class for IPrimitiveType Inheritance System.Object NamedElement DataType PrimitiveType Implements IPrimitiveType IDataType INamedElement IElement Inherited Members NamedElement.Description NamedElement.ToString() NamedElement.Name NamedElement.QualifiedName NamedElement.Owner System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Classes Assembly : CB.Connector.dll Syntax public abstract class PrimitiveType : DataType, IPrimitiveType, IDataType, INamedElement, IElement Constructors PrimitiveType(String, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Int16, Nullable<Int32>, Int16, Nullable<Boolean>, Boolean) Initializes a new instance of the PrimitiveType class. Declaration protected PrimitiveType(string name, int? precision, int? scale, int? maximumLength, int? octetLength, short dataTypeCode, int? columnSize, short searchable, bool? isUnsigned, bool hasFixedPrecisionAndScale = false) Parameters Type Name Description System.String name System.Nullable < System.Int32 > precision System.Nullable < System.Int32 > scale System.Nullable < System.Int32 > maximumLength System.Nullable < System.Int32 > octetLength System.Int16 dataTypeCode System.Nullable < System.Int32 > columnSize System.Int16 searchable System.Nullable < System.Boolean > isUnsigned System.Boolean hasFixedPrecisionAndScale Properties ClrType Gets the Common Language Runtime (CLR) type of this instance. Declaration public virtual Type ClrType { get; } Property Value Type Description System.Type The type. ColumnSize Gets the maximum column size that the server supports. Declaration public int? ColumnSize { get; } Property Value Type Description System.Nullable < System.Int32 > DataTypeCode Gets the data type code used by ODBC client/server. Declaration public virtual short DataTypeCode { get; protected set; } Property Value Type Description System.Int16 HasFixedPrecisionAndScale Gets a value indicating whether this instance has fixed precision and scale. Declaration public bool HasFixedPrecisionAndScale { get; } Property Value Type Description System.Boolean true if this instance has fixed precision and scale; otherwise, false . IsUnsigned Gets a value indicating whether this instance is unsigned. Declaration public bool? IsUnsigned { get; } Property Value Type Description System.Nullable < System.Boolean > true if this instance is unsigned; otherwise false or NULL MaximumLength Gets a positive integer value specifying the maximum length of a binary, stream or string value. Declaration public int? MaximumLength { get; } Property Value Type Description System.Nullable < System.Int32 > The maximum length. Remarks If no maximum length is specified, you should expect length equal to 8000 (default value). Also, you must be aware of the potential for data loss when round-tripping values of greater maximum length. OctetLength Gets a positive integer specifying the length in bytes (octets) of the data type. Declaration public int? OctetLength { get; } Property Value Type Description System.Nullable < System.Int32 > The storage length (in bytes). Precision Gets the maximum number of significant decimal digits, which must be a positive integer. Declaration public int? Precision { get; } Property Value Type Description System.Nullable < System.Int32 > The precision of approximate numeric data or integer data. Otherwise, returns NULL. Scale Gets a non-negative integer value specifying the maximum number of digits allowed to the right of the decimal point. Declaration public int? Scale { get; } Property Value Type Description System.Nullable < System.Int32 > The scale of approximate numeric data or integer data. Otherwise, returns NULL. Searchable Gets how this instance is used in a WHERE clause (SQL_PRED_NONE, SQL_PRED_CHAR or SQL_PRED_BASIC). Declaration public short Searchable { get; } Property Value Type Description System.Int16 TypeConverter Gets the type converter of this instance Declaration protected virtual TypeConverter TypeConverter { get; } Property Value Type Description System.ComponentModel.TypeConverter The type converter. Methods Convert(Object) Converts the given value object to the Common Language Runtime (CLR) type. Declaration public virtual object Convert(object obj) Parameters Type Name Description System.Object obj The object to convert. Returns Type Description System.Object An object that represents the converted value. Implements IPrimitiveType IDataType INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also DataType IPrimitiveType"
  },
  "api/CB.Connector.Metadata.MetaModel.Classes.Namespace.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Classes.Namespace.html",
    "title": "Class Namespace | CB Connector SDK website",
    "keywords": "Class Namespace Provides an abstract class for INamespace Inheritance System.Object NamedElement Namespace QueryableElement Implements INamespace INamedElement IElement Inherited Members NamedElement.Description NamedElement.ToString() NamedElement.Name NamedElement.QualifiedName NamedElement.Owner System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Classes Assembly : CB.Connector.dll Syntax public abstract class Namespace : NamedElement, INamespace, INamedElement, IElement Constructors Namespace(String) Initializes a new instance of the Namespace class. Declaration protected Namespace(string name) Parameters Type Name Description System.String name The unique name. Fields DelimiterArray The array of delimiters. Declaration public static readonly char[] DelimiterArray Field Value Type Description System.Char [] DelimiterString The string delimiter. Declaration public static readonly string DelimiterString Field Value Type Description System.String Properties Elements Gets the collection of named elements. Declaration public virtual IElementCollection<INamedElement> Elements { get; } Property Value Type Description IElementCollection < INamedElement > The collection of named elements. Methods Add(INamedElement) Adds an element to the Elements . The owner property MUST be set. Declaration public virtual void Add(INamedElement child) Parameters Type Name Description INamedElement child The element to add to the Elements . GetDefaultNamespaces() Gets the default namespaces. Declaration protected virtual string[] GetDefaultNamespaces() Returns Type Description System.String [] The default namespaces. IsValidName(String) Determines whether name is a valid name. Declaration protected virtual bool IsValidName(string name) Parameters Type Name Description System.String name The name. Returns Type Description System.Boolean true if is valid name; otherwise, false . Remove(INamedElement) Removes an element from the Elements . The owner property MUST be unset. Declaration public virtual void Remove(INamedElement child) Parameters Type Name Description INamedElement child The element to remove from the Elements . ResolveName(Type, String) Performs name resolution according with type and name that were passed as parameters. Declaration protected virtual string ResolveName(Type type, string name) Parameters Type Name Description System.Type type The type of the element. System.String name The name to be resolved. Returns Type Description System.String The name. Remarks ResolveName() Methods involves the following steps: The expected number of namespaces to include on the QualifiedName is calculated using type . Determines if the name is the QualifiedName . If so, returns the name ; otherwise, the default namespaces are added to the beginning of the name . TryGetElement<T>(String, out T) Declaration public virtual bool TryGetElement<T>(string name, out T element) where T : INamedElement Parameters Type Name Description System.String name T element Returns Type Description System.Boolean Type Parameters Name Description T TryGetElementInternal<T>(String, out T) Gets the element associated with the specified name. Declaration protected virtual bool TryGetElementInternal<T>(string qualifiedName, out T element) where T : INamedElement Parameters Type Name Description System.String qualifiedName The qualified name of the item to get. T element When this method returns, contains the item associated with the specified name, if the name is found; otherwise, the default element for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if Elements contains an element with the specified key; otherwise, false . Type Parameters Name Description T The type of item to get. Implements INamespace INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also NamedElement INamespace"
  },
  "api/CB.Connector.Metadata.MetaModel.Classes.NamedElement.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Classes.NamedElement.html",
    "title": "Class NamedElement | CB Connector SDK website",
    "keywords": "Class NamedElement Provides an abstract class for INamedElement . Inheritance System.Object NamedElement Constraint DataType Namespace Property Implements INamedElement IElement Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Classes Assembly : CB.Connector.dll Syntax public abstract class NamedElement : INamedElement, IElement Constructors NamedElement(String) Initializes a new instance of the NamedElement class with a specified name. Declaration protected NamedElement(string name) Parameters Type Name Description System.String name The unique name. Properties Description Gets or sets the description defined for IElement . Declaration public virtual IDescriptor Description { get; set; } Property Value Type Description IDescriptor The description. Name Gets the name of the named element. Declaration public virtual string Name { get; } Property Value Type Description System.String The name of the named element. Remarks Must not exceed 128 characters Owner Gets or sets the owner of the named element. Declaration public INamedElement Owner { get; set; } Property Value Type Description INamedElement A System.String value that specifies the owner of the named element. QualifiedName Gets the name that allows the named element to be identified within a hierarchy of nested namespaces. Declaration public virtual string QualifiedName { get; } Property Value Type Description System.String The qualified name. Remarks It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the named element itself. Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also INamedElement"
  },
  "api/CB.Connector.Metadata.MetaModel.Classes.DataType.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Classes.DataType.html",
    "title": "Class DataType | CB Connector SDK website",
    "keywords": "Class DataType Provides an abstract class for IDataType . Inheritance System.Object NamedElement DataType ComplexType PrimitiveType Implements IDataType INamedElement IElement Inherited Members NamedElement.Description NamedElement.ToString() NamedElement.Name NamedElement.QualifiedName NamedElement.Owner System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Classes Assembly : CB.Connector.dll Syntax public abstract class DataType : NamedElement, IDataType, INamedElement, IElement Constructors DataType(String) Initializes a new instance of the DataType class. Declaration protected DataType(string name) Parameters Type Name Description System.String name The unique name. Implements IDataType INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also NamedElement IDataType"
  },
  "api/CB.Connector.Metadata.MetaModel.Classes.Constraint.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Classes.Constraint.html",
    "title": "Class Constraint | CB Connector SDK website",
    "keywords": "Class Constraint Provides an abstract class for IConstraint . Inheritance System.Object NamedElement Constraint Implements IConstraint INamedElement IElement Inherited Members NamedElement.Description NamedElement.ToString() NamedElement.Name NamedElement.QualifiedName NamedElement.Owner System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Classes Assembly : CB.Connector.dll Syntax public abstract class Constraint : NamedElement, IConstraint, INamedElement, IElement Constructors Constraint(String) Initializes a new instance of the Constraint class. Declaration protected Constraint(string name) Parameters Type Name Description System.String name The unique name. Properties ConstrainedElements Gets the collection of constrained elements. Each element must belong to the owner of the IConstraint . Declaration public virtual IElementCollection<INamedElement> ConstrainedElements { get; } Property Value Type Description IElementCollection < INamedElement > The collection of named elements. Implements IConstraint INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also NamedElement IConstraint"
  },
  "api/CB.Connector.Metadata.MetaModel.Classes.ComplexType.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Classes.ComplexType.html",
    "title": "Class ComplexType | CB Connector SDK website",
    "keywords": "Class ComplexType Provides an abstract class for IComplexType . Inheritance System.Object NamedElement DataType ComplexType Implements IComplexType IDataType INamespace INamedElement IElement Inherited Members NamedElement.Description NamedElement.ToString() NamedElement.Name NamedElement.QualifiedName NamedElement.Owner System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Classes Assembly : CB.Connector.dll Syntax public abstract class ComplexType : DataType, IComplexType, IDataType, INamespace, INamedElement, IElement Constructors ComplexType(String) Initializes a new instance of the ComplexType class. Declaration protected ComplexType(string name) Parameters Type Name Description System.String name The unique name. Properties Elements Gets the collection of named elements. Declaration public virtual IElementCollection<INamedElement> Elements { get; } Property Value Type Description IElementCollection < INamedElement > The collection of named elements. Methods Add(INamedElement) Adds an element to the Elements . The owner property MUST be set. Declaration public void Add(INamedElement child) Parameters Type Name Description INamedElement child The element to add to the Elements . Remove(INamedElement) Removes an element from the Elements . The owner property MUST be unset. Declaration public void Remove(INamedElement child) Parameters Type Name Description INamedElement child The element to remove from the Elements . TryGetElement<T>(String, out T) Declaration public bool TryGetElement<T>(string name, out T element) where T : INamedElement Parameters Type Name Description System.String name T element Returns Type Description System.Boolean Type Parameters Name Description T Implements IComplexType IDataType INamespace INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also DataType IComplexType"
  },
  "api/CB.Connector.Metadata.DataModel.html": {
    "href": "api/CB.Connector.Metadata.DataModel.html",
    "title": "Namespace CB.Connector.Metadata.DataModel | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Metadata.DataModel Interfaces IBLob Represents a binary large object (BLOB) data types used to store unstructured binary data. ICLob Represents a character large object (CLOB) data types used to store single-byte and multi-byte character-based data, such as large documents in any character set. IEmptyResult Represents a result of a command that does not contain data. It may contain columns. ILob Represents a large object (LOB) data types used to store large amount of data. IMessageResult Represents a result of a command containing information about an occurrence (e.g. exception, error message). IResult Component for creating tables of data and checking data consistency. IResultContext Encapsulates information about the result of a command. IResultFormatter Provides base functionality for formatting data that belong to the result set. IResultLoader Fills an IResult object with values from a data source. IResultSet Represents a database result set (a sequence of multiple results). IResultSetLoader Fills an IResultSet object with values from a data source. IResultSetReader Accesses and traverses IResult objects. IRowData Data about each cell in a row. ITableResult Represents a table of data. ITableResultLoader Represents a database result set, which is usually generated by executing a statement that queries the data source. ITableResultReader Accesses and traverses ITableResultRow objects. ITableResultRow Represents a row of data in a ITableResult object. Enums ResultState Represents an enumeration that defines literals used to specify the current state of the result. ResultType Represents an enumeration that defines literals used to specify the type of the result."
  },
  "api/CB.Connector.Metadata.DataModel.IResult.html": {
    "href": "api/CB.Connector.Metadata.DataModel.IResult.html",
    "title": "Interface IResult | CB Connector SDK website",
    "keywords": "Interface IResult Component for creating tables of data and checking data consistency. Inherited Members System.IDisposable.Dispose() Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface IResult : IDisposable Properties AffectedRows Gets the number of rows that were affected by the command. Declaration int AffectedRows { get; } Property Value Type Description System.Int32 The number of rows that were affected by the command. CancellationToken Gets the cancellation token. Declaration CancellationToken CancellationToken { get; } Property Value Type Description System.Threading.CancellationToken Returns a CancellationToken object. Remarks A CancellationToken enables cooperative cancellation between threads. ColumnCount Gets the number of columns contained in the IResult . Declaration int ColumnCount { get; } Property Value Type Description System.Int32 The number of columns contained in the IResult . Message Gets a message that describes the current exception. Declaration string Message { get; } Property Value Type Description System.String The error message that explains the reason for the exception. ResultType Gets a ResultType enumeration. Declaration ResultType ResultType { get; } Property Value Type Description ResultType Returns a ResultType enumeration indicating the type of the result. State Gets a ResultState enumeration. Declaration ResultState State { get; } Property Value Type Description ResultState Returns a ResultState enumeration indicating the current state of the result. Methods GetLastError() Returns an System.Exception object describing the error condition that occured. Declaration Exception GetLastError() Returns Type Description System.Exception An System.Exception object describing the error condition that occured OpenLoader() Opens an IResultLoader object for writing. Declaration IResultLoader OpenLoader() Returns Type Description IResultLoader A new ITableResultLoader instance. Events OnStateChanged Occurs when the ResultState changes. Declaration event EventHandler<ResultStateChanged> OnStateChanged Event Type Type Description System.EventHandler < ResultStateChanged > Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also System.IDisposable"
  },
  "api/CB.Connector.Metadata.DataModel.IMessageResult.html": {
    "href": "api/CB.Connector.Metadata.DataModel.IMessageResult.html",
    "title": "Interface IMessageResult | CB Connector SDK website",
    "keywords": "Interface IMessageResult Represents a result of a command containing information about an occurrence (e.g. exception, error message). Inherited Members IResult.CancellationToken IResult.ResultType IResult.State IResult.AffectedRows IResult.ColumnCount IResult.Message IResult.GetLastError() IResult.OpenLoader() IResult.OnStateChanged System.IDisposable.Dispose() Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface IMessageResult : IResult, IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IResult"
  },
  "api/CB.Connector.Metadata.DataModel.ILob.html": {
    "href": "api/CB.Connector.Metadata.DataModel.ILob.html",
    "title": "Interface ILob | CB Connector SDK website",
    "keywords": "Interface ILob Represents a large object (LOB) data types used to store large amount of data. Inherited Members System.IDisposable.Dispose() Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface ILob : IDisposable Properties BaseStream Gets a generic view of a sequence of bytes. Declaration Stream BaseStream { get; } Property Value Type Description System.IO.Stream A generic view of sequence of bytes. Id Gets the unique identifier. Declaration Guid Id { get; } Property Value Type Description System.Guid The unique identifier. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also System.IDisposable"
  },
  "api/CB.Connector.Metadata.DataModel.IEmptyResult.html": {
    "href": "api/CB.Connector.Metadata.DataModel.IEmptyResult.html",
    "title": "Interface IEmptyResult | CB Connector SDK website",
    "keywords": "Interface IEmptyResult Represents a result of a command that does not contain data. It may contain columns. Inherited Members IResult.CancellationToken IResult.ResultType IResult.State IResult.AffectedRows IResult.ColumnCount IResult.Message IResult.GetLastError() IResult.OpenLoader() IResult.OnStateChanged System.IDisposable.Dispose() Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface IEmptyResult : IResult, IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IResult"
  },
  "api/CB.Connector.IConnector.html": {
    "href": "api/CB.Connector.IConnector.html",
    "title": "Interface IConnector | CB Connector SDK website",
    "keywords": "Interface IConnector Provides a base interface to specify the backbone of a functional connector. Namespace : CB.Connector Assembly : CB.Connector.dll Syntax public interface IConnector Remarks The IConnector intermediates the communication between the data provider and CB Server. A functional connector acts as a relational database that stores a collection of data and metadata. Properties Author Gets the author (company or person). Declaration string Author { get; } Property Value Type Description System.String The author. ConnectorProperties Gets the properties that are used to hold configuration information. Declaration IConnectorProperties ConnectorProperties { get; } Property Value Type Description IConnectorProperties The properties that are used to hold configuration information. Description Gets the detailed description. Declaration string Description { get; } Property Value Type Description System.String The detailed description. Remarks The description must not exceed 250 characters. Name Gets the unique name. Declaration string Name { get; } Property Value Type Description System.String The unique name. Remarks By convection, Name should be a combination of {CB} keyword, the name of the data provider and {Connector}. Sessions Gets a collection containing ISession objects. Declaration ICollection<ISession> Sessions { get; } Property Value Type Description System.Collections.Generic.ICollection < ISession > A collection containing ISession objects. Remarks This property should be used to store instances of ISession and, optionally, to access an existing instance of ISession to avoid the use of unnecessary resources. Methods CreateSession(IConnectorProperties) Creates a CB command session. Declaration ISession CreateSession(IConnectorProperties properties) Parameters Type Name Description IConnectorProperties properties The properties. Returns Type Description ISession A new ISession instance. Remarks CB command session is an occurrence of a user interacting with a relational database, where the occurrence is a single command. TestConnection(IConnectorProperties) Tests the connection against the data provider. Declaration IConnectorProperties TestConnection(IConnectorProperties properties) Parameters Type Name Description IConnectorProperties properties The properties. Returns Type Description IConnectorProperties The properties. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.IConnector-2.html": {
    "href": "api/CB.Connector.IConnector-2.html",
    "title": "Interface IConnector<TProperty, TSession> | CB Connector SDK website",
    "keywords": "Interface IConnector<TProperty, TSession> Provides a generic interface for IConnector . Inherited Members IConnector.Name IConnector.Description IConnector.Author IConnector.Sessions IConnector.CreateSession(IConnectorProperties) IConnector.TestConnection(IConnectorProperties) Namespace : CB.Connector Assembly : CB.Connector.dll Syntax public interface IConnector<TProperty, out TSession> : IConnector where TProperty : ConnectorProperties<TProperty> where TSession : ISession Type Parameters Name Description TProperty The type of the property. TSession The type of the session. Properties ConnectorProperties Gets the properties that are used to hold configuration information. Declaration TProperty ConnectorProperties { get; } Property Value Type Description TProperty The properties that are used to hold configuration information. Methods CreateSession(TProperty) Creates a CB command session. Declaration TSession CreateSession(TProperty properties) Parameters Type Name Description TProperty properties The properties. Returns Type Description TSession A new ISession instance. Remarks CB command session is an occurrence of a user interacting with a relational database, where the occurrence is a single command. TestConnection(TProperty) Tests the connection against the data provider. Declaration TProperty TestConnection(TProperty properties) Parameters Type Name Description TProperty properties The properties. Returns Type Description TProperty The properties. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Exceptions.html": {
    "href": "api/CB.Connector.Exceptions.html",
    "title": "Namespace CB.Connector.Exceptions | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Exceptions Classes ConnectorException Represents errors that occur on connector side execution. ConnectorExceptionFactory Factory implementation that always creates ConnectorException objects. Enums ConnectorExceptionType Specifies the connector exception types."
  },
  "api/CB.Connector.Command.DataHandler.Interfaces.IDataHandlerArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.Interfaces.IDataHandlerArguments.html",
    "title": "Interface IDataHandlerArguments | CB Connector SDK website",
    "keywords": "Interface IDataHandlerArguments Provides a base interface that Encapsulates information regarding a specific data handler. Namespace : CB.Connector.Command.DataHandler.Interfaces Assembly : CB.Connector.dll Syntax public interface IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.Interfaces.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.Interfaces.html",
    "title": "Namespace CB.Connector.Command.DataHandler.FilterCriteria.Interfaces | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Command.DataHandler.FilterCriteria.Interfaces Interfaces IFilterCriteria Represents an SQL search condition that encapsulates a processing step where the input data is filtered according with a specific operation. It is used to determine how to filter the input values."
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.Interfaces.IFilterCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.Interfaces.IFilterCriteria.html",
    "title": "Interface IFilterCriteria | CB Connector SDK website",
    "keywords": "Interface IFilterCriteria Represents an SQL search condition that encapsulates a processing step where the input data is filtered according with a specific operation. It is used to determine how to filter the input values. Namespace : CB.Connector.Command.DataHandler.FilterCriteria.Interfaces Assembly : CB.Connector.dll Syntax public interface IFilterCriteria Properties Parent Gets or sets the parent of this IFilterCriteria . Declaration IFilterCriteria Parent { get; set; } Property Value Type Description IFilterCriteria The parent of this IFilterCriteria . If a IFilterCriteria has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is null . Returns null ; this IFilterCriteria do not have parent. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.FilterCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.FilterCriteria.html",
    "title": "Class FilterCriteria | CB Connector SDK website",
    "keywords": "Class FilterCriteria Provides an abstract class for IFilterCriteria . Inheritance System.Object FilterCriteria BinaryCriteria ComparisonCriteria UnaryCriteria Implements IFilterCriteria Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria Assembly : CB.Connector.dll Syntax public abstract class FilterCriteria : IFilterCriteria Properties Childes Gets or sets all the childes of this IFilterCriteria . Declaration protected IEnumerable<IFilterCriteria> Childes { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < IFilterCriteria > Parent Gets or sets the parent of this IFilterCriteria . Declaration public IFilterCriteria Parent { get; set; } Property Value Type Description IFilterCriteria The parent of this IFilterCriteria . If a IFilterCriteria has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is null . Returns null ; this IFilterCriteria do not have parent. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public abstract bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IFilterCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.html",
    "title": "Namespace CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Classes AllCriteria Represents all operator that compares a scalar value with a single-column set of values. AnyCriteria Represents any/some operator that compares a scalar value with a single-column set of values. BasicComparisonCriteria Provides an abstract class for basic comparisons. BetweenCriteria Represents between operator that checks whether an attribute value is within a range. ComparisonCriteria Provides an abstract class for comparisons used in search criteria. ComparisonCriteriaFactory Factory implementation that always creates comparison criteria. EqualCriteria Represents Equals to operator that compares the equality of two expressions. ExistsCriteria Represents exists operator that checks whether a sub-query returns any rows. ExtendedComparisonCriteria Provides an abstract class for extended comparisons. GreaterCriteria Represents Greater than operator that compares two expressions. GreaterOrEqualCriteria Represents Greater than or Equal to operator that compares two expressions for greater than or equal. InCriteria Represents In operator that checks whether an attribute value matches any value within a list. IsNotNullCriteria Represents IS NOT NULL operator that checks whether an attribute value is not null. IsNullCriteria Represents IS NULL operator that checks whether an attribute value is null. LessCriteria Represents Less than operator that compares two expressions. LessOrEqualCriteria Represents Less than or Equal To operator that compares two expressions. LikeCriteria Represents LIKE operator that checks whether an attribute value matches a given string pattern. NotBetweenCriteria Represents NOT BETWEEN operator that checks whether an attribute value is within a range. NotEqualCriteria Represents Not equal to operator that tests whether one expression is not equal to another expression. NotExistsCriteria Represents NOT EXISTS operator that checks whether a sub-query returns any rows. NotInCriteria Represents Not In operator that checks whether an attribute value matches any value within a list. NotLikeCriteria Represents Not Like operator that checks whether an attribute value matches a given string pattern. QuantifierCriteria Provides an abstract class for comparison between a value and a list or sub-query."
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.LessCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.LessCriteria.html",
    "title": "Class LessCriteria | CB Connector SDK website",
    "keywords": "Class LessCriteria Represents Less than operator that compares two expressions. Inheritance System.Object FilterCriteria ComparisonCriteria BasicComparisonCriteria LessCriteria Implements IFilterCriteria Inherited Members BasicComparisonCriteria.QuantifierCriteria BasicComparisonCriteria.Left BasicComparisonCriteria.Right ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class LessCriteria : BasicComparisonCriteria, IFilterCriteria Constructors LessCriteria(IArgument, IArgument) Initializes a new instance of the LessCriteria class. Declaration public LessCriteria(IArgument left, IArgument right) Parameters Type Name Description IArgument left The left IArgument . IArgument right The right IArgument . LessCriteria(IEnumerable<IArgument>) Initializes a new instance of the LessCriteria class. Declaration public LessCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also BasicComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.IsNullCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.IsNullCriteria.html",
    "title": "Class IsNullCriteria | CB Connector SDK website",
    "keywords": "Class IsNullCriteria Represents IS NULL operator that checks whether an attribute value is null. Inheritance System.Object FilterCriteria ComparisonCriteria ExtendedComparisonCriteria IsNullCriteria Implements IFilterCriteria Inherited Members ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class IsNullCriteria : ExtendedComparisonCriteria, IFilterCriteria Constructors IsNullCriteria(IEnumerable<IArgument>) Initializes a new instance of the IsNullCriteria class. Declaration public IsNullCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ExtendedComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.IsNotNullCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.IsNotNullCriteria.html",
    "title": "Class IsNotNullCriteria | CB Connector SDK website",
    "keywords": "Class IsNotNullCriteria Represents IS NOT NULL operator that checks whether an attribute value is not null. Inheritance System.Object FilterCriteria ComparisonCriteria ExtendedComparisonCriteria IsNotNullCriteria Implements IFilterCriteria Inherited Members ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class IsNotNullCriteria : ExtendedComparisonCriteria, IFilterCriteria Constructors IsNotNullCriteria(IEnumerable<IArgument>) Initializes a new instance of the IsNotNullCriteria class. Declaration public IsNotNullCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ExtendedComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.InCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.InCriteria.html",
    "title": "Class InCriteria | CB Connector SDK website",
    "keywords": "Class InCriteria Represents In operator that checks whether an attribute value matches any value within a list. Inheritance System.Object FilterCriteria ComparisonCriteria ExtendedComparisonCriteria InCriteria Implements IFilterCriteria Inherited Members ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class InCriteria : ExtendedComparisonCriteria, IFilterCriteria Constructors InCriteria(IArgument, IArgument) Initializes a new instance of the InCriteria class. Declaration public InCriteria(IArgument left, IArgument right) Parameters Type Name Description IArgument left The left IArgument . IArgument right The right IArgument . InCriteria(IEnumerable<IArgument>) Initializes a new instance of the InCriteria class. Declaration public InCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ExtendedComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.BasicComparisonCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.BasicComparisonCriteria.html",
    "title": "Class BasicComparisonCriteria | CB Connector SDK website",
    "keywords": "Class BasicComparisonCriteria Provides an abstract class for basic comparisons. Inheritance System.Object FilterCriteria ComparisonCriteria BasicComparisonCriteria EqualCriteria GreaterCriteria GreaterOrEqualCriteria LessCriteria LessOrEqualCriteria LikeCriteria NotEqualCriteria NotLikeCriteria Implements IFilterCriteria Inherited Members ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent FilterCriteria.Filter(Object[], Object) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public abstract class BasicComparisonCriteria : ComparisonCriteria, IFilterCriteria Constructors BasicComparisonCriteria(IArgument, IArgument) Initializes a new instance of the BasicComparisonCriteria class. Declaration protected BasicComparisonCriteria(IArgument left, IArgument right) Parameters Type Name Description IArgument left The left IArgument . IArgument right The right IArgument . BasicComparisonCriteria(IEnumerable<IArgument>) Initializes a new instance of the BasicComparisonCriteria class. Declaration protected BasicComparisonCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Properties Left Gets the left IArgument . Declaration public IArgument Left { get; } Property Value Type Description IArgument QuantifierCriteria Gets or sets the quantifier criteria. Declaration public QuantifierCriteria QuantifierCriteria { get; set; } Property Value Type Description QuantifierCriteria The quantifier criteria. By default, returns null . Right Gets the right IArgument . Declaration public IArgument Right { get; } Property Value Type Description IArgument Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.OrderByArguments.ItemToOrder.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.OrderByArguments.ItemToOrder.html",
    "title": "Struct OrderByArguments.ItemToOrder | CB Connector SDK website",
    "keywords": "Struct OrderByArguments.ItemToOrder Represents an item to order. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public struct ItemToOrder Constructors ItemToOrder(IArgument, OrderByArguments.SortType) Initializes a new instance of the OrderByArguments.ItemToOrder struct. Declaration public ItemToOrder(IArgument arg, OrderByArguments.SortType sort = OrderByArguments.SortType.Asc) Parameters Type Name Description IArgument arg The argument. OrderByArguments.SortType sort The type of the sort order. ItemToOrder(IArgument, String) Initializes a new instance of the OrderByArguments.ItemToOrder struct. Declaration public ItemToOrder(IArgument arg, string sort) Parameters Type Name Description IArgument arg The argument. System.String sort The type of the sort order as string. Properties Argument Gets the argument. Often, the argument is a column passed as an argument. Declaration public IArgument Argument { get; } Property Value Type Description IArgument Sort Gets the type of the sort order. Declaration public OrderByArguments.SortType Sort { get; } Property Value Type Description OrderByArguments.SortType Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.LimitArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.LimitArguments.html",
    "title": "Class LimitArguments | CB Connector SDK website",
    "keywords": "Class LimitArguments Provides a base class that encapsulates information for Limit object. Inheritance System.Object DataHandlerArguments LimitArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public sealed class LimitArguments : DataHandlerArguments, IDataHandlerArguments Constructors LimitArguments(Int32, Int32) Initializes a new instance of the LimitArguments class. Declaration public LimitArguments(int limit, int offset) Parameters Type Name Description System.Int32 limit The number of rows to retrieve. System.Int32 offset The number of rows to skip before beginning to retrieve data. Properties Limit Gets the number of rows to retrieve. Declaration public int Limit { get; } Property Value Type Description System.Int32 Remarks The value that follows limit clause. Offset Gets the number of rows to skip before beginning to retrieve data. Declaration public int Offset { get; } Property Value Type Description System.Int32 Remarks The value that follows offset clause. Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandlerArguments"
  },
  "api/CB.Connector.Command.DataHandler.Argument.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.html",
    "title": "Namespace CB.Connector.Command.DataHandler.Argument | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Command.DataHandler.Argument Interfaces IArgument Provides a base interface for defining the various kinds of values, as well as expressions and functions in a parsed statement. IColumnArgument Represents an identifier that may represent a column-reference. A column contains values, one in each row of a table. IIdentifier Represents an argument that may uniquely identify a value. IValuedFunction Represents an argument that may represent a function-reference."
  },
  "api/CB.Connector.Command.DataHandler.Argument.IValuedFunction.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.IValuedFunction.html",
    "title": "Interface IValuedFunction | CB Connector SDK website",
    "keywords": "Interface IValuedFunction Represents an argument that may represent a function-reference. Inherited Members ITypedElement.Type ITypedElement.IsNullable ITypedElement.DefaultValue INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Command.DataHandler.Argument Assembly : CB.Connector.dll Syntax public interface IValuedFunction : IArgument, ITypedElement, INamedElement, IElement Properties Metadata Gets the function that has its place on the model. Declaration IFunction Metadata { get; } Property Value Type Description IFunction Parameter Gets the parameter(s) for the function. Declaration IArgument Parameter { get; } Property Value Type Description IArgument Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IArgument"
  },
  "api/CB.Connector.Command.DataHandler.Argument.Classes.Variable.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.Classes.Variable.html",
    "title": "Class Variable | CB Connector SDK website",
    "keywords": "Class Variable Represents an identifier that may represent a value. Logically enough, the value of a variable may change. Inheritance System.Object Variable Implements IIdentifier IArgument ITypedElement INamedElement IElement Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.Argument.Classes Assembly : CB.Connector.dll Syntax public class Variable : IIdentifier, IArgument, ITypedElement, INamedElement, IElement Constructors Variable(String, IDataType) Initializes a new instance of the Variable class with specified name. By default, type is null. Declaration public Variable(string name, IDataType type = null) Parameters Type Name Description System.String name The name. IDataType type The data type. Properties DefaultValue Gets the default value of this instance. Declaration public object DefaultValue { get; } Property Value Type Description System.Object The default value. Description Gets or sets the description defined for IElement . Declaration public IDescriptor Description { get; set; } Property Value Type Description IDescriptor The description. IsNullable Gets a value indicating whether this instance that can accepts null values. Declaration public bool IsNullable { get; } Property Value Type Description System.Boolean true if this instance does not accept null values; otherwise, false . Name Gets the name of the named element. Declaration public string Name { get; } Property Value Type Description System.String The name of the named element. Remarks Must not exceed 128 characters QualifiedName Gets the name that allows the named element to be identified within a hierarchy of nested namespaces. Declaration public string QualifiedName { get; } Property Value Type Description System.String The qualified name. Remarks It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the named element itself. Type Gets the type of this instance. Declaration public IDataType Type { get; } Property Value Type Description IDataType Returns the data type. Explicit Interface Implementations INamedElement.Owner Gets or sets the owner of the named element. Declaration INamedElement INamedElement.Owner { get; set; } Returns Type Description INamedElement A System.String value that specifies the owner of the named element. Implements IIdentifier IArgument ITypedElement INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IIdentifier"
  },
  "api/CB.Connector.Command.DataHandler.Argument.Classes.SetTable.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.Classes.SetTable.html",
    "title": "Class SetTable | CB Connector SDK website",
    "keywords": "Class SetTable Represents a two dimensional set whose values come from the result of a statement (set of row values). Inheritance System.Object Set SetTable Implements IArgument ITypedElement INamedElement IElement Inherited Members Set.Clear() Set.IsNullable Set.DefaultValue Set.Description Set.QualifiedName Set.INamedElement.Owner System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.Argument.Classes Assembly : CB.Connector.dll Syntax public class SetTable : Set, IArgument, ITypedElement, INamedElement, IElement Constructors SetTable(Statement, IExecutionContext) Initializes a new instance of the SetTable class. Declaration public SetTable(Statement statement, IExecutionContext context) Parameters Type Name Description Statement statement The statement. IExecutionContext context The context. Properties Args Gets a collection of arguments. Declaration public override IEnumerable<IArgument> Args { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IArgument > Overrides Set.Args Count Gets the number of arguments contained in the Set . Declaration public override int Count { get; } Property Value Type Description System.Int32 Overrides Set.Count Item[Int32] Gets the argument at the specified index. Declaration public override IArgument this[int index] { get; } Parameters Type Name Description System.Int32 index The zero-based index of the argument to get. Property Value Type Description IArgument Overrides Set.Item[Int32] Name Gets the name of the named element. Declaration public override string Name { get; } Property Value Type Description System.String The name of the named element. Overrides Set.Name Remarks Must not exceed 128 characters Statement Gets the statement. Declaration public Statement Statement { get; } Property Value Type Description Statement Type Gets the type of this instance. Declaration public override IDataType Type { get; } Property Value Type Description IDataType Returns the data type. Overrides Set.Type Methods Add(IArgument) Adds an IArgument object to the end of the Set . Declaration public override void Add(IArgument arg) Parameters Type Name Description IArgument arg The object to be added to the end of the Set . Overrides Set.Add(IArgument) Exceptions Type Condition System.NotSupportedException Cannot add row manually to SetTable . Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides Set.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Set.GetHashCode() Implements IArgument ITypedElement INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also Set"
  },
  "api/CB.Connector.Command.DataHandler.Argument.Classes.ColumnArgument.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.Classes.ColumnArgument.html",
    "title": "Class ColumnArgument | CB Connector SDK website",
    "keywords": "Class ColumnArgument Provides an abstract class for IColumnArgument Inheritance System.Object ColumnArgument ColumnSource Implements IColumnArgument IColumn IProperty IOrdinalElement IIdentifier IArgument ITypedElement INamedElement IElement Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.Argument.Classes Assembly : CB.Connector.dll Syntax public abstract class ColumnArgument : IColumnArgument, IColumn, IProperty, IOrdinalElement, IIdentifier, IArgument, ITypedElement, INamedElement, IElement Fields DefaultName The default name for calculated columns. Declaration protected const string DefaultName = \"(NoName)\" Field Value Type Description System.String Remarks When a column-reference is used in an aggregate function, the column of the SQL statement results in a calculated column and hence has no column name to be used for the specification. GeneratedNameFormat Format for generated name. Declaration protected const string GeneratedNameFormat = \"{0}{1}\" Field Value Type Description System.String Properties ArgumentColumn Gets the column-reference. Declaration public virtual IArgument ArgumentColumn { get; protected set; } Property Value Type Description IArgument DefaultValue Gets the default value of this instance. Declaration public virtual object DefaultValue { get; protected set; } Property Value Type Description System.Object The default value. Description Gets or sets the description defined for IElement . Declaration public virtual IDescriptor Description { get; set; } Property Value Type Description IDescriptor The description. IsAutoincrementable Gets a value indicating whether this instance is auto-incremented, meaning that a unique number is generated automatically when a new record is inserted. Declaration public virtual bool IsAutoincrementable { get; protected set; } Property Value Type Description System.Boolean true if this instance is auto-incremented; otherwise, false . IsForeignKey Gets a value indicating whether this instance is a foreign key. Declaration public virtual bool IsForeignKey { get; protected set; } Property Value Type Description System.Boolean true if this instance is a foreign key; otherwise, false . IsNullable Gets a value indicating whether this instance that can accepts null values. Declaration public virtual bool IsNullable { get; protected set; } Property Value Type Description System.Boolean true if this instance does not accept null values; otherwise, false . IsPrimaryKey Gets a value indicating whether this instance is a primary key. Declaration public virtual bool IsPrimaryKey { get; protected set; } Property Value Type Description System.Boolean true if this instance is a primary key; otherwise, false . IsReadOnly Gets or sets a value indicating whether this instance is read-only, meaning that the column may not be written to after initialization. Declaration public virtual bool IsReadOnly { get; set; } Property Value Type Description System.Boolean true if this instance is read-only; otherwise, false . IsRequired Gets a value indicating whether this instance is required. Declaration public virtual bool IsRequired { get; protected set; } Property Value Type Description System.Boolean IsSearchable Gets or sets a value indicating whether this instance is capable of being computationally searched, meaning that the column can be called in where clause. Declaration public virtual bool IsSearchable { get; set; } Property Value Type Description System.Boolean true if this instance is capable of being computationally searched; otherwise, false . IsSortable Gets or sets a value indicating whether this instance is sortable, meaning that the column can be called in order by clause Declaration public bool IsSortable { get; } Property Value Type Description System.Boolean true if this instance is sortable; otherwise, false . IsSourceColumn Gets a value indicating whether this instance is a column-reference whose values come directly from the database. Declaration public virtual bool IsSourceColumn { get; protected set; } Property Value Type Description System.Boolean IsUnique Gets a value indicating whether this instance is included in the definition of a primary key or unique key. Declaration public virtual bool IsUnique { get; protected set; } Property Value Type Description System.Boolean true if this instance is included in the definition of a primary key or unique key; otherwise, false . MetadataColumn Gets the column that has its place on the model. Declaration public virtual IColumn MetadataColumn { get; protected set; } Property Value Type Description IColumn Name Gets the name of the named element. Declaration public virtual string Name { get; } Property Value Type Description System.String The name of the named element. Remarks Must not exceed 128 characters Ordinal Gets the element’s ordinal position, which specifies where an element is in an order. Declaration public virtual int Ordinal { get; } Property Value Type Description System.Int32 The ordinal position. Owner Gets or sets the owner of the named element. Declaration public virtual INamedElement Owner { get; set; } Property Value Type Description INamedElement A System.String value that specifies the owner of the named element. QualifiedName Gets the name that allows the named element to be identified within a hierarchy of nested namespaces. Declaration public virtual string QualifiedName { get; } Property Value Type Description System.String The qualified name. Remarks It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the named element itself. Type Gets the type of this instance. Declaration public virtual IDataType Type { get; protected set; } Property Value Type Description IDataType Returns the data type. Implements IColumnArgument IColumn IProperty IOrdinalElement IIdentifier IArgument ITypedElement INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IColumnArgument"
  },
  "api/CB.Connector.Command.DataHandler.Argument.Classes.CbIdentifierFactory.html": {
    "href": "api/CB.Connector.Command.DataHandler.Argument.Classes.CbIdentifierFactory.html",
    "title": "Class CbIdentifierFactory | CB Connector SDK website",
    "keywords": "Class CbIdentifierFactory Factory implementation that always creates CbIdentifier objects. Inheritance System.Object CbIdentifierFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.Argument.Classes Assembly : CB.Connector.dll Syntax public class CbIdentifierFactory Properties Instance Gets a single instance of CbIdentifierFactory . Declaration public static CbIdentifierFactory Instance { get; } Property Value Type Description CbIdentifierFactory Methods CreateFromColumnName(String) Creates a new CbIdentifier instance with specified name. Declaration public CbIdentifier CreateFromColumnName(string name) Parameters Type Name Description System.String name The name of the column. Returns Type Description CbIdentifier A new CbIdentifier instance. CreateFromSchemaName(String, String) Creates a new CbIdentifier instance. Declaration public CbIdentifier CreateFromSchemaName(string name, string defaultDatabase = null) Parameters Type Name Description System.String name The name of the schema. System.String defaultDatabase The default database. Returns Type Description CbIdentifier A new CbIdentifier instance. CreateFromTableName(String, String, String) Creates a new CbIdentifier instance. Declaration public CbIdentifier CreateFromTableName(string name, string defaultSchema = null, string defaultDatabase = null) Parameters Type Name Description System.String name The name of the table. System.String defaultSchema The default schema name. System.String defaultDatabase The default database name Returns Type Description CbIdentifier A new CbIdentifier instance. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Collections.Classes.SubCollection-2.html": {
    "href": "api/CB.Connector.Collections.Classes.SubCollection-2.html",
    "title": "Class SubCollection<TRoot, T> | CB Connector SDK website",
    "keywords": "Class SubCollection<TRoot, T> Provides the base class for a generic collection of key/value pairs that can be individually accessed by index and by key. Inheritance System.Object SubCollection<TRoot, T> Implements IElementCollection <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable IIndexableCollection < System.String , T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Collections.Classes Assembly : CB.Connector.dll Syntax public class SubCollection<TRoot, T> : IElementCollection<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IIndexableCollection<string, T> where T : TRoot Type Parameters Name Description TRoot The type of elements in the source sequence. T The type of elements in the subset sequence. Remarks Represents a subset of the specified collection. Constructors SubCollection(IElementCollection<TRoot>) Initializes a new instance of the SubCollection<TRoot, T> class as a wrapper for the specified enumerable. Declaration public SubCollection(IElementCollection<TRoot> root) Parameters Type Name Description IElementCollection <TRoot> root A sequence of values to select a subset. Exceptions Type Condition System.ArgumentNullException root Properties Count Gets the number of elements contained in the SubCollection<TRoot, T> . Declaration public int Count { get; } Property Value Type Description System.Int32 The number of elements contained in the SubCollection<TRoot, T> . IsReadOnly Gets a value indicating whether the SubCollection<TRoot, T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean true if SubCollection<TRoot, T> is read-only; otherwise, false . Values Gets a collection containing the values in the SubCollection<TRoot, T> . Declaration public ICollection<T> Values { get; } Property Value Type Description System.Collections.Generic.ICollection <T> A collection containing the values in the SubCollection<TRoot, T> . Methods Add(T) Adds an item to the SubCollection<TRoot, T> . Declaration public void Add(T item) Parameters Type Name Description T item The object to add to the SubCollection<TRoot, T> . Clear() Removes all items from the SubCollection<TRoot, T> . Declaration public void Clear() Exceptions Type Condition System.NotSupportedException Contains(T) Determines whether the SubCollection<TRoot, T> contains a specific value. Declaration public bool Contains(T item) Parameters Type Name Description T item The object to locate in the SubCollection<TRoot, T> . Returns Type Description System.Boolean true if item is found in the SubCollection<TRoot, T> ; otherwise, false . Contains(String) Determines whether the collection contains an element with the specified key. Declaration public bool Contains(string key) Parameters Type Name Description System.String key The key to locate in the SubCollection<TRoot, T> . Returns Type Description System.Boolean true if the SubCollection<TRoot, T> contains an element with the key; otherwise, false . CopyTo(T[], Int32) Copies the elements of the SubCollection<TRoot, T> to an System.Array , starting at a particular System.Array index. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array The one-dimensional System.Array that is the destination of the elements copied from SubCollection<TRoot, T> . The System.Array must have zero-based indexing. System.Int32 arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition System.IndexOutOfRangeException GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> An enumerator that can be used to iterate through the collection. GetKeyForItem(T) Extracts the key from the specified element. Declaration public string GetKeyForItem(T item) Parameters Type Name Description T item The element from which to extract the key. Returns Type Description System.String The key for the specified element. Remove(T) Removes the first occurrence of a specific object from the SubCollection<TRoot, T> . Declaration public bool Remove(T item) Parameters Type Name Description T item The object to remove from the SubCollection<TRoot, T> . Returns Type Description System.Boolean true if item was successfully removed from the SubCollection<TRoot, T> ; otherwise, false . This method also returns false if item is not found in the original SubCollection<TRoot, T> . TryGetValue<TValue>(String, out TValue) Gets the value of the specified type associated with the specified key. Declaration public bool TryGetValue<TValue>(string key, out TValue value) where TValue : T Parameters Type Name Description System.String key The key of the value to get. TValue value When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the object that implements SubCollection<TRoot, T> contains an element with the specified key; otherwise, false . Type Parameters Name Description TValue The type of the value to get. Explicit Interface Implementations IIndexableCollection<String, T>.Item[Int32] Declaration T IIndexableCollection<string, T>.this[int index] { get; set; } Parameters Type Name Description System.Int32 index Returns Type Description T IIndexableCollection<String, T>.Item[String] Declaration T IIndexableCollection<string, T>.this[string key] { get; set; } Parameters Type Name Description System.String key Returns Type Description T IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements IElementCollection<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IIndexableCollection<TKey, TValue> Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IElementCollection <T>"
  },
  "api/CB.Connector.Classes.BaseConnector-2.html": {
    "href": "api/CB.Connector.Classes.BaseConnector-2.html",
    "title": "Class BaseConnector<TProperty, TSession> | CB Connector SDK website",
    "keywords": "Class BaseConnector<TProperty, TSession> Provides an abstract class for IConnector<TProperty, TSession> . Inheritance System.Object BaseConnector<TProperty, TSession> Implements IConnector <TProperty, TSession> IConnector Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Classes Assembly : CB.Connector.dll Syntax public abstract class BaseConnector<TProperty, TSession> : IConnector<TProperty, TSession>, IConnector where TProperty : ConnectorProperties<TProperty> where TSession : ISession Type Parameters Name Description TProperty The type of the property. TSession The type of the session. Constructors BaseConnector() Initializes a new instance of the BaseConnector<TProperty, TSession> class. Declaration protected BaseConnector() Properties Author Gets the author (company or person). Declaration public abstract string Author { get; } Property Value Type Description System.String The author. CachingProvider Gets or sets the caching provider which provides in-memory cache. Declaration public virtual ICachingProviderBase CachingProvider { get; } Property Value Type Description ICachingProviderBase The caching provider. ConnectorProperties Gets the properties that are used to hold configuration information. Declaration public TProperty ConnectorProperties { get; } Property Value Type Description TProperty The properties that are used to hold configuration information. Description Gets the detailed description. Declaration public abstract string Description { get; } Property Value Type Description System.String The detailed description. Remarks The description must not exceed 250 characters. Name Gets the unique name. Declaration public abstract string Name { get; } Property Value Type Description System.String The unique name. Remarks By convection, Name should be a combination of {CB} keyword, the name of the data provider and {Connector}. Sessions Gets a collection containing ISession objects. Declaration public virtual ICollection<ISession> Sessions { get; } Property Value Type Description System.Collections.Generic.ICollection < ISession > A collection containing ISession objects. Remarks This property should be used to store instances of ISession and, optionally, to access an existing instance of ISession to avoid the use of unnecessary resources. Methods CreateSession(TProperty) Creates a CB command session. Declaration public virtual TSession CreateSession(TProperty properties) Parameters Type Name Description TProperty properties The properties. Returns Type Description TSession A new ISession instance. Remarks CB command session is an occurrence of a user interacting with a relational database, where the occurrence is a single command. Dispose() Releases unmanaged and - optionally - managed resources. Declaration public abstract void Dispose() TestConnection(TProperty) Tests the connection against the data provider. Declaration public abstract TProperty TestConnection(TProperty properties) Parameters Type Name Description TProperty properties The properties. Returns Type Description TProperty The properties. Explicit Interface Implementations IConnector.ConnectorProperties Declaration IConnectorProperties IConnector.ConnectorProperties { get; } Returns Type Description IConnectorProperties IConnector.CreateSession(IConnectorProperties) Declaration ISession IConnector.CreateSession(IConnectorProperties properties) Parameters Type Name Description IConnectorProperties properties Returns Type Description ISession IConnector.TestConnection(IConnectorProperties) Declaration IConnectorProperties IConnector.TestConnection(IConnectorProperties properties) Parameters Type Name Description IConnectorProperties properties Returns Type Description IConnectorProperties Implements IConnector<TProperty, TSession> IConnector Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IConnector <TProperty, TSession>"
  },
  "api/CB.Connector.Caching.ICachingProviderBase.html": {
    "href": "api/CB.Connector.Caching.ICachingProviderBase.html",
    "title": "Interface ICachingProviderBase | CB Connector SDK website",
    "keywords": "Interface ICachingProviderBase Represents an object cache that implements an in-memory cache. Namespace : CB.Connector.Caching Assembly : CB.Connector.dll Syntax public interface ICachingProviderBase Remarks The ICachingProviderBase interface encapsulates a System.Runtime.Caching.MemoryCache object. Properties Cache Gets the object cache that implements an in-memory cache. Declaration MemoryCache Cache { get; } Property Value Type Description System.Runtime.Caching.MemoryCache The object cache. Methods AddItem(String, Object, DateTime) Adds a cache entry into the cache as a CacheItem instance, and adds details about how the entry should be evicted. Declaration void AddItem(string key, object value, DateTime expiration) Parameters Type Name Description System.String key A unique identifier for the cache entry. System.Object value The object to insert. System.DateTime expiration The fixed date and time at which the cache entry will expire. Remarks Adds a cache entry into the cache without overwriting any existing cache entry. ContainsKey(String) Determines whether the cache entry already exists in the cache. Declaration bool ContainsKey(string key) Parameters Type Name Description System.String key A unique identifier for the cache entry. Returns Type Description System.Boolean true if the cache contains the specified key; otherwise, false . GetItem(String, DateTime) Gets the specified cache entry from the cache as an object. Declaration object GetItem(string key, DateTime newExpiration) Parameters Type Name Description System.String key A unique identifier for the cache entry. System.DateTime newExpiration The fixed date and time at which the cache entry will expire. Returns Type Description System.Object The cache entry that is identified by key . RemoveItem(String) Removes the cache entry from the cache. Declaration void RemoveItem(string key) Parameters Type Name Description System.String key A unique identifier for the cache entry. Set(String, Object, DateTime) Inserts a cache entry into the cache. Declaration void Set(string key, object value, DateTime newExpiration) Parameters Type Name Description System.String key A unique identifier for the cache entry. System.Object value The object to insert. System.DateTime newExpiration The fixed date and time at which the cache entry will expire. Remarks The typical behavior is an insert-or-update operation. If an item that matches key does not exist in the cache, key and value are used to insert as a new cache entry; otherwise, the cache entry is updated by using value . Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Authentication.OAuth.OAuth2Client.html": {
    "href": "api/CB.Connector.Authentication.OAuth.OAuth2Client.html",
    "title": "Class OAuth2Client | CB Connector SDK website",
    "keywords": "Class OAuth2Client Provides a base class for OAuth 2.0 client implementation. Inheritance System.Object OAuth2Client Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Authentication.OAuth Assembly : CB.Connector.dll Syntax public class OAuth2Client Constructors OAuth2Client(IRequestFactory, IOAuth2Configuration) Initializes a new instance of the OAuth2Client class. Declaration public OAuth2Client(IRequestFactory factory, IOAuth2Configuration configuration) Parameters Type Name Description IRequestFactory factory Object responsible for REST client/request creation. IOAuth2Configuration configuration The client configuration object. OAuth2Client(IOAuth2Configuration) Initializes a new instance of the OAuth2Client class. Declaration public OAuth2Client(IOAuth2Configuration configuration) Parameters Type Name Description IOAuth2Configuration configuration The client configuration object. Properties AccessToken Gets the access token received from service. Can be used for further calls. Declaration public string AccessToken { get; } Property Value Type Description System.String The access token received from service. Can be used for further calls. AccessTokenUrlEndpoint Gets or sets the endpoint URI which issues access token. Declaration protected Endpoint AccessTokenUrlEndpoint { get; set; } Property Value Type Description Endpoint The endpoint URI which issues access token. AuthUrlEndpoint Gets or sets the endpoint URI which issues access code. Declaration protected Endpoint AuthUrlEndpoint { get; set; } Property Value Type Description Endpoint The endpoint URI which issues access code. Configuration Gets the OAuth 2.0 Client configuration object. Declaration public IOAuth2Configuration Configuration { get; } Property Value Type Description IOAuth2Configuration The OAuth 2.0 Client configuration object. ExpiresAt Gets the token's expiration date. Declaration public DateTime ExpiresAt { get; } Property Value Type Description System.DateTime The token's expiration date. GrantType Gets the grant type. Declaration public string GrantType { get; } Property Value Type Description System.String The grant type. Remarks Indicates the type of grant being presented in exchange for an access token and possibly a refresh token. RefreshToken Gets the refresh token returned from service. Can be used for further calls. Declaration public string RefreshToken { get; } Property Value Type Description System.String The refresh token returned from service. Can be used for further calls. State Gets the state (any additional information that was provided by application and is posted back by service). Declaration public string State { get; } Property Value Type Description System.String The state (any additional information that was provided by application and is posted back by service). TokenType Gets the token type returned from service. Can be used for further calls. Declaration public string TokenType { get; } Property Value Type Description System.String The token type returned from service. Can be used for further calls. Methods AfterExecuteRequest(RequestArgs) Called after issuing request to service. Declaration protected virtual void AfterExecuteRequest(RequestArgs arguments) Parameters Type Name Description RequestArgs arguments The request data. Remarks This method enables you to read additional data from request data. BeforeExecuteRequest(RequestArgs) Called before issuing request to service. Declaration protected virtual void BeforeExecuteRequest(RequestArgs arguments) Parameters Type Name Description RequestArgs arguments The request data. Remarks This method enables you to modify the request data. GetAccessToken(NameValueCollection) Gets the access token. Declaration public virtual string GetAccessToken(NameValueCollection parameters) Parameters Type Name Description System.Collections.Specialized.NameValueCollection parameters Callback request payload. Returns Type Description System.String The access token. GetCurrentToken(String, Boolean) Gets the access token. Declaration public string GetCurrentToken(string refreshToken = null, bool forceUpdate = false) Parameters Type Name Description System.String refreshToken The refresh token. System.Boolean forceUpdate True value means that the update of the access token will be forced. Returns Type Description System.String The access token. GetLoginLink(String) Gets the service URI which should be called to start authentication process. Declaration public virtual string GetLoginLink(string state = null) Parameters Type Name Description System.String state Any additional information that was provided by application and is posted back by service. Returns Type Description System.String The service URI. RequestAccessToken(NameValueCollection) Requests the access token and parses the response. Declaration protected virtual void RequestAccessToken(NameValueCollection parameters) Parameters Type Name Description System.Collections.Specialized.NameValueCollection parameters Returns a collection of associated System.String keys and System.String values that can be accessed either with the key or with the index. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Authentication.OAuth.Extensions.html": {
    "href": "api/CB.Connector.Authentication.OAuth.Extensions.html",
    "title": "Namespace CB.Connector.Authentication.OAuth.Extensions | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Authentication.OAuth.Extensions Classes OAuth2Extensions Holds extension methods for OAuth 2.0 authentication mechanism."
  },
  "api/CB.Connector.Authentication.Infrastructure.IRequestFactory.html": {
    "href": "api/CB.Connector.Authentication.Infrastructure.IRequestFactory.html",
    "title": "Interface IRequestFactory | CB Connector SDK website",
    "keywords": "Interface IRequestFactory Factory implementation that creates REST client/request. Namespace : CB.Connector.Authentication.Infrastructure Assembly : CB.Connector.dll Syntax public interface IRequestFactory Methods CreateClient() Creates an RestSharp.IRestClient instance. Declaration IRestClient CreateClient() Returns Type Description RestSharp.IRestClient An RestSharp.IRestClient instance. CreateRequest() Creates an RestSharp.IRestRequest instance. Declaration IRestRequest CreateRequest() Returns Type Description RestSharp.IRestRequest An RestSharp.IRestRequest instance. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) RequestFactoryExtensions.CreateClient(IRequestFactory, Endpoint) RequestFactoryExtensions.CreateRequest(IRequestFactory, Endpoint) RequestFactoryExtensions.CreateRequest(IRequestFactory, Endpoint, Method)"
  },
  "api/CB.Connector.Authentication.Infrastructure.Endpoint.html": {
    "href": "api/CB.Connector.Authentication.Infrastructure.Endpoint.html",
    "title": "Class Endpoint | CB Connector SDK website",
    "keywords": "Class Endpoint Defines endpoint URI (service address). Inheritance System.Object Endpoint Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Authentication.Infrastructure Assembly : CB.Connector.dll Syntax public class Endpoint Properties BaseUri Gets the base URI (service host address). Declaration public string BaseUri { get; } Property Value Type Description System.String The base URI. Resource Gets the resource URI (service method). Declaration public string Resource { get; } Property Value Type Description System.String The resource URI. Uri Gets or sets the complete URI of endpoint (base URI combined with resource URI). Declaration public Uri Uri { get; set; } Property Value Type Description System.Uri The complete URI of endpoint Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.SessionState.html": {
    "href": "api/CB.Connector.SessionState.html",
    "title": "Enum SessionState | CB Connector SDK website",
    "keywords": "Enum SessionState Represents an enumeration that defines literals used to describe the current state of the connection to a data source. Namespace : CB.Connector Assembly : CB.Connector.dll Syntax public enum SessionState Fields Name Description Broken The connection to the data source is broken. Closed The connection is closed. Executing The session object is executing a command. Fetching The session object is retrieving data. Preparing The session object is preparing a command. Extension Methods ConnectorPropertiesExtensions.TryParse(Type, Object) ConnectorPropertiesExtensions.Parse(Type) ConnectorPropertiesExtensions.Decrypt(String) ConnectorPropertiesExtensions.Encrypt(String) ConnectorPropertiesExtensions.IsEncrypted(String, Encoding)"
  },
  "api/CB.Connector.Property.html": {
    "href": "api/CB.Connector.Property.html",
    "title": "Namespace CB.Connector.Property | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Property Classes ConnectorProperties<T> Default implementation of IConnectorProperties ConnectorPropertyAttribute Indicates that the attributed property is an account property. This class cannot be inherited. ConnectorPropertyInfo Provides a base class for IConnectorPropertyInfo InterfaceContractResolver Default implementation of Newtonsoft.Json.Serialization.DefaultContractResolver . TypeValueProvider Default implementation of Newtonsoft.Json.Serialization.IValueProvider . Interfaces IConnectorProperties Base interface for defining the properties that are used to hold configuration information. IConnectorPropertyInfo Defines the attributes of a property and provides access to property metadata. Enums AuthenticationType Enumerates the types of authentication used to identify the user. ConnectorPropertyFlags Represents an enumeration that defines literals used to describe the distinctive nature or features of a property. GetEncryptedPropertyAs Specifies the mode to use for encryption."
  },
  "api/CB.Connector.Metadata.MetaModel.ITypedElement.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.ITypedElement.html",
    "title": "Interface ITypedElement | CB Connector SDK website",
    "keywords": "Interface ITypedElement Provides a base interface for defining a named element that has a type specified for it. Inherited Members INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface ITypedElement : INamedElement, IElement Properties DefaultValue Gets the default value of this instance. Declaration object DefaultValue { get; } Property Value Type Description System.Object The default value. IsNullable Gets a value indicating whether this instance that can accepts null values. Declaration bool IsNullable { get; } Property Value Type Description System.Boolean true if this instance does not accept null values; otherwise, false . Type Gets the type of this instance. Declaration IDataType Type { get; } Property Value Type Description IDataType Returns the data type. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also INamedElement"
  },
  "api/CB.Connector.Metadata.MetaModel.ITableType.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.ITableType.html",
    "title": "Interface ITableType | CB Connector SDK website",
    "keywords": "Interface ITableType Provides a base interface for representing the definition of a table structure. Inherited Members INamespace.Elements INamespace.Add(INamedElement) INamespace.Remove(INamedElement) INamespace.TryGetElement<T>(String, T) INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface ITableType : IComplexType, IDataType, INamespace, INamedElement, IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IComplexType"
  },
  "api/CB.Connector.Metadata.MetaModel.ITable.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.ITable.html",
    "title": "Interface ITable | CB Connector SDK website",
    "keywords": "Interface ITable Provides a base interface for defining a SQL Table that is a logical structure identifiable within the schema. A table may own columns and constraints. Inherited Members INamespace.Elements INamespace.Add(INamedElement) INamespace.Remove(INamedElement) INamespace.TryGetElement<T>(String, T) INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface ITable : IQueryableElement, INamespace, INamedElement, IElement Properties Aggregatable Gets a value indicating whether this instance supports Aggregate Functions. Declaration bool Aggregatable { get; } Property Value Type Description System.Boolean true if this instance is capable of supporting Aggregate Functions; otherwise, false . Columns Gets the sub-collection of named elements. Each element is an IColumn . Declaration IElementCollection<IColumn> Columns { get; } Property Value Type Description IElementCollection < IColumn > The columns defined for ITable . Constraints Gets the sub-collection of named elements. Each element is an IConstraint . Declaration IElementCollection<IConstraint> Constraints { get; } Property Value Type Description IElementCollection < IConstraint > The constraints defined for ITable . Deletable Gets or sets a value indicating whether this instance is deletable. Declaration bool Deletable { get; } Property Value Type Description System.Boolean true if this instance is capable of being deleted; otherwise, false . Filterable Gets a value indicating whether this instance is filterable. Declaration bool Filterable { get; } Property Value Type Description System.Boolean true if this instance is capable of supporting Where Clause; otherwise, false . Groupable Gets a value indicating whether this instance supports GroupBy. Declaration bool Groupable { get; } Property Value Type Description System.Boolean true if this instance is capable of supporting GroupBy Clause; otherwise, false . Insertable Gets a value indicating whether this instance is insertable. Declaration bool Insertable { get; } Property Value Type Description System.Boolean true if this instance is capable of supporting insertion; otherwise, false . LimitSupported Gets a value indicating whether this instance supports Limit. Declaration bool LimitSupported { get; } Property Value Type Description System.Boolean true if this instance is capable of supporting Limit Clause; otherwise, false . OffsetSupported Gets a value indicating whether this instance supports Offset. Declaration bool OffsetSupported { get; } Property Value Type Description System.Boolean true if this instance is capable of supporting Offset Clause; otherwise, false . Selectable Gets a value indicating whether this instance is selectable. Declaration bool Selectable { get; } Property Value Type Description System.Boolean true if this instance is capable of being selected; otherwise, false . Sortable Gets a value indicating whether this instance supports OrderBy. Declaration bool Sortable { get; } Property Value Type Description System.Boolean true if this instance is capable of supporting OrderBy Clause; otherwise, false . Updatable Gets a value indicating whether this instance is updatable. Declaration bool Updatable { get; } Property Value Type Description System.Boolean true if this instance is capable of being updated; otherwise, false . Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IQueryableElement"
  },
  "api/CB.Connector.Metadata.MetaModel.ISchema.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.ISchema.html",
    "title": "Interface ISchema | CB Connector SDK website",
    "keywords": "Interface ISchema Provides a base interface for defining a SQL Schema that represents a logical grouping of database objects. It is the conceptual organization of the relational database. Inherited Members INamespace.Elements INamespace.Add(INamedElement) INamespace.Remove(INamedElement) INamespace.TryGetElement<T>(String, T) INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface ISchema : INamespace, INamedElement, IElement Properties Functions Gets the sub-collection of named elements. Each element is an IFunction . Declaration IElementCollection<IFunction> Functions { get; } Property Value Type Description IElementCollection < IFunction > The functions defined for ISchema . Procedures Gets the sub-collection of named elements. Each element is an IProcedure . Declaration IElementCollection<IProcedure> Procedures { get; } Property Value Type Description IElementCollection < IProcedure > The procedures defined for ISchema . Tables Gets the sub-collection of named elements. Each element is an ITable . Declaration IElementCollection<ITable> Tables { get; } Property Value Type Description IElementCollection < ITable > The tables defined for ISchema . Types Gets the sub-collection of named elements. Each element is an IDataType . Declaration IElementCollection<IDataType> Types { get; } Property Value Type Description IElementCollection < IDataType > The data types defined for ISchema . Views Gets the sub-collection of named elements. Each element is an IView . Declaration IElementCollection<IView> Views { get; } Property Value Type Description IElementCollection < IView > The views defined for ISchema . Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also INamespace"
  },
  "api/CB.Connector.Metadata.MetaModel.IQueryableElement.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IQueryableElement.html",
    "title": "Interface IQueryableElement | CB Connector SDK website",
    "keywords": "Interface IQueryableElement Provides a base interface for a namespace that can be manipulated by the SQL language. Inherited Members INamespace.Elements INamespace.Add(INamedElement) INamespace.Remove(INamedElement) INamespace.TryGetElement<T>(String, T) INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IQueryableElement : INamespace, INamedElement, IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also INamespace"
  },
  "api/CB.Connector.Metadata.MetaModel.IProperty.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IProperty.html",
    "title": "Interface IProperty | CB Connector SDK website",
    "keywords": "Interface IProperty Provides a base interface for a structural element that represents an attribute. Inherited Members ITypedElement.Type ITypedElement.IsNullable ITypedElement.DefaultValue INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IOrdinalElement.Ordinal IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IProperty : ITypedElement, INamedElement, IOrdinalElement, IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also ITypedElement IOrdinalElement"
  },
  "api/CB.Connector.Metadata.MetaModel.IProcedure.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IProcedure.html",
    "title": "Interface IProcedure | CB Connector SDK website",
    "keywords": "Interface IProcedure Provides a base interface for defining a SQL Stored Procedure that accepts input parameters and possibly will return one or more values. A procedure is mainly used to perform an action. Inherited Members INamespace.Elements INamespace.Add(INamedElement) INamespace.Remove(INamedElement) INamespace.TryGetElement<T>(String, T) INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IProcedure : IQueryableElement, INamespace, INamedElement, IElement Properties Parameters Gets the sub-collection of named elements. Each element is an IParameter . Declaration IElementCollection<IParameter> Parameters { get; } Property Value Type Description IElementCollection < IParameter > The parameters defined for IProcedure . ResultColumns Gets the sub-collection of named elements. Each element is an IColumn . Declaration IElementCollection<IColumn> ResultColumns { get; } Property Value Type Description IElementCollection < IColumn > Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IQueryableElement"
  },
  "api/CB.Connector.Metadata.MetaModel.IPrimitiveType.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IPrimitiveType.html",
    "title": "Interface IPrimitiveType | CB Connector SDK website",
    "keywords": "Interface IPrimitiveType Provides a base interface for defining a SQL Primitive Type that is a predefined data type without any substructure. Inherited Members INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IPrimitiveType : IDataType, INamedElement, IElement Properties ClrType Gets corresponding ClrType Declaration Type ClrType { get; } Property Value Type Description System.Type ColumnSize Gets the maximum column size that the server supports. Declaration int? ColumnSize { get; } Property Value Type Description System.Nullable < System.Int32 > DataTypeCode Gets the data type code used by ODBC client/server. Declaration short DataTypeCode { get; } Property Value Type Description System.Int16 HasFixedPrecisionAndScale Gets a value indicating whether this instance has fixed precision and scale. Declaration bool HasFixedPrecisionAndScale { get; } Property Value Type Description System.Boolean true if this instance has fixed precision and scale; otherwise, false . IsUnsigned Gets a value indicating whether this instance is unsigned. Declaration bool? IsUnsigned { get; } Property Value Type Description System.Nullable < System.Boolean > true if this instance is unsigned; otherwise false or NULL MaximumLength Gets a positive integer value specifying the maximum length of a binary, stream or string value. Declaration int? MaximumLength { get; } Property Value Type Description System.Nullable < System.Int32 > The maximum length. Remarks If no maximum length is specified, you should expect length equal to 8000 (default value). Also, you must be aware of the potential for data loss when round-tripping values of greater maximum length. OctetLength Gets a positive integer specifying the length in bytes (octets) of the data type. Declaration int? OctetLength { get; } Property Value Type Description System.Nullable < System.Int32 > The storage length (in bytes). Precision Gets the maximum number of significant decimal digits, which must be a positive integer. Declaration int? Precision { get; } Property Value Type Description System.Nullable < System.Int32 > The precision of approximate numeric data or integer data. Otherwise, returns NULL. Scale Gets a non-negative integer value specifying the maximum number of digits allowed to the right of the decimal point. Declaration int? Scale { get; } Property Value Type Description System.Nullable < System.Int32 > The scale of approximate numeric data or integer data. Otherwise, returns NULL. Searchable Gets how this instance is used in a WHERE clause (SQL_PRED_NONE, SQL_PRED_CHAR or SQL_PRED_BASIC). Declaration short Searchable { get; } Property Value Type Description System.Int16 Methods Convert(Object) Converts the given value object to the Common Language Runtime (CLR) type. Declaration object Convert(object obj) Parameters Type Name Description System.Object obj The object to convert. Returns Type Description System.Object An object that represents the converted value. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IDataType"
  },
  "api/CB.Connector.Metadata.MetaModel.Factories.PrimitiveTypesFactory.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Factories.PrimitiveTypesFactory.html",
    "title": "Class PrimitiveTypesFactory | CB Connector SDK website",
    "keywords": "Class PrimitiveTypesFactory Factory implementation that always creates primitive data types. Inheritance System.Object PrimitiveTypesFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Factories Assembly : CB.Connector.dll Syntax public class PrimitiveTypesFactory Properties Instance Gets an instance of PrimitiveTypesFactory . Declaration public static PrimitiveTypesFactory Instance { get; } Property Value Type Description PrimitiveTypesFactory The instance. Methods Create(SupportedType, Object[]) Creates an instance of the specified supported type using the constructor that best matches the specified parameters. Declaration public IPrimitiveType Create(SupportedType type, params object[] args) Parameters Type Name Description SupportedType type The supported type. System.Object [] args The arguments. Returns Type Description IPrimitiveType The object. Create(Type, Object[]) Creates an instance of the specified type using the constructor that best matches the specified parameters. Declaration public IPrimitiveType Create(Type type, params object[] args) Parameters Type Name Description System.Type type The type of object to create. System.Object [] args An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If args is an empty array or null, the constructor that takes no parameters (the default constructor) is invoked. Returns Type Description IPrimitiveType The object. CreateAnyType() Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.AnyType object. Declaration public IPrimitiveType CreateAnyType() Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.AnyType object. CreateBooleanType() Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.BooleanType object. Declaration public IPrimitiveType CreateBooleanType() Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.BooleanType object. CreateByteArrayType(Int32) Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.ByteArrayType object. Declaration public IPrimitiveType CreateByteArrayType(int maximumLength = 8000) Parameters Type Name Description System.Int32 maximumLength Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.ByteArrayType object. CreateByteType() Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.ByteType object. Declaration public IPrimitiveType CreateByteType() Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.ByteType object. CreateCharType(Int32) Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.CharType object. Declaration public IPrimitiveType CreateCharType(int maximumLength = 1) Parameters Type Name Description System.Int32 maximumLength Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.CharType object. CreateDateTimeType(Int32, Nullable<Int32>) Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.DateTimeType object. Declaration public IPrimitiveType CreateDateTimeType(int precision = 23, int? scale) Parameters Type Name Description System.Int32 precision System.Nullable < System.Int32 > scale Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.DateTimeType object. CreateDecimalType(Int32, Int32) Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.DecimalType object. Declaration public IPrimitiveType CreateDecimalType(int precision = 28, int scale = 0) Parameters Type Name Description System.Int32 precision System.Int32 scale Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.DecimalType object. CreateDoubleType() Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.DoubleType object. Declaration public IPrimitiveType CreateDoubleType() Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.DoubleType object. CreateGuidType() Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.GuidType object. Declaration public IPrimitiveType CreateGuidType() Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.GuidType object. Exceptions Type Condition ConnectorException UnsupportedDataType CreateInt16Type() Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.Int16Type object. Declaration public IPrimitiveType CreateInt16Type() Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.Int16Type object. CreateInt32Type() Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.Int32Type object. Declaration public IPrimitiveType CreateInt32Type() Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.Int32Type object. CreateInt64Type() Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.Int64Type object. Declaration public IPrimitiveType CreateInt64Type() Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.Int64Type object. CreateSByteType() Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.SByteType object. Declaration public IPrimitiveType CreateSByteType() Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.SByteType object. CreateSingleType() Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.SingleType object. Declaration public IPrimitiveType CreateSingleType() Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.SingleType object. CreateStringType(Int32) Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.StringType object. Declaration public IPrimitiveType CreateStringType(int maximumLength = 8000) Parameters Type Name Description System.Int32 maximumLength Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.StringType object. CreateTimeType(Int32, Int32) Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.TimeType object. Declaration public IPrimitiveType CreateTimeType(int precision = 16, int scale = 7) Parameters Type Name Description System.Int32 precision System.Int32 scale Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.TimeType object. Exceptions Type Condition ConnectorException UnsupportedDataType CreateUInt16Type() Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.UInt16Type object. Declaration public IPrimitiveType CreateUInt16Type() Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.UInt16Type object. CreateUInt32Type() Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.UInt32Type object. Declaration public IPrimitiveType CreateUInt32Type() Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.UInt32Type object. CreateUInt64Type() Creates a new CB.Connector.Metadata.MetaModel.Classes.DataTypes.UInt64Type object. Declaration public IPrimitiveType CreateUInt64Type() Returns Type Description IPrimitiveType A new CB.Connector.Metadata.MetaModel.Classes.DataTypes.UInt64Type object. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Metadata.MetaModel.Factories.MetaModelFactory.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Factories.MetaModelFactory.html",
    "title": "Class MetaModelFactory | CB Connector SDK website",
    "keywords": "Class MetaModelFactory Abstract Factory that always creates MetaModel objects. Inheritance System.Object MetaModelFactory EagerMetaModelFactory LazyMetaModelFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Factories Assembly : CB.Connector.dll Syntax public abstract class MetaModelFactory Methods Create<T>(Object[]) Creates an instance of the specified element using the constructor that best matches the specified parameters. Declaration public virtual T Create<T>(params object[] args) Parameters Type Name Description System.Object [] args An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If args is an empty array or null, the constructor that takes no parameters (the default constructor) is invoked. Returns Type Description T The object. Type Parameters Name Description T The type of object to create. CreateColumn(String, IDataType, Boolean, Int32, Boolean, Boolean, Boolean, Boolean) Creates a new IColumn object. Declaration public virtual IColumn CreateColumn(string name, IDataType type, bool isNullable, int ordinal, bool isPrimaryKey, bool isUnique, bool isForeignKey, bool isAutoincrementable) Parameters Type Name Description System.String name The unique name. IDataType type The data type. System.Boolean isNullable A System.Boolean value indicating whether IColumn accepts null values. System.Int32 ordinal The ordinal position. System.Boolean isPrimaryKey A System.Boolean value indicating whether IColumn is primary key. System.Boolean isUnique A System.Boolean value indicating whether IColumn is unique key. System.Boolean isForeignKey A System.Boolean value indicating whether IColumn is foreign key. System.Boolean isAutoincrementable A System.Boolean value indicating whether IColumn is auto-incremented. Returns Type Description IColumn A new IColumn object. CreateDescriptor(String, String) Creates a new IDescriptor object. Declaration public virtual IDescriptor CreateDescriptor(string body, string remarks = null) Parameters Type Name Description System.String body The body. System.String remarks The remarks. Returns Type Description IDescriptor A new IDescriptor object. CreateForeignKey(String, ITable) Creates a new IForeignKey object. Declaration public virtual IForeignKey CreateForeignKey(string name, ITable reference) Parameters Type Name Description System.String name The unique name. ITable reference The table containing the candidate key. Returns Type Description IForeignKey A new IForeignKey object. CreateJsonType(String) Creates a new IJsonType object. Declaration public virtual IJsonType CreateJsonType(string name) Parameters Type Name Description System.String name The unique name. Returns Type Description IJsonType A new IJsonType object. Exceptions Type Condition ConnectorException ConnectorExceptionType.UnsupportedDataType CreateNotNull(String) Creates a new INotNull object. Declaration public virtual INotNull CreateNotNull(string name) Parameters Type Name Description System.String name The unique name. Returns Type Description INotNull A new INotNull object. CreateParameter(String, IDataType, Boolean, Int32, ParameterDirectionKind, Boolean) Creates a new IParameter object. Declaration public virtual IParameter CreateParameter(string name, IDataType type, bool isNullable, int ordinal, ParameterDirectionKind direction, bool isReadOnly = false) Parameters Type Name Description System.String name The unique name. IDataType type The data type. System.Boolean isNullable A System.Boolean value indicating whether IParameter that can accepts null values. System.Int32 ordinal The ordinal position. ParameterDirectionKind direction The parameter's direction. System.Boolean isReadOnly A System.Boolean value indicating whether IParameter is read-only. Returns Type Description IParameter A new IParameter object. CreateParametricType(Func<IDataType[], IDataType>) Creates a new IParametricType object. Declaration public virtual IParametricType CreateParametricType(Func<IDataType[], IDataType> typeResolver) Parameters Type Name Description System.Func < IDataType [], IDataType > typeResolver A function to test each element for a condition. Returns Type Description IParametricType A new IParametricType object. CreatePrimaryKey(String) Creates a new IPrimaryKey object. Declaration public virtual IPrimaryKey CreatePrimaryKey(string name) Parameters Type Name Description System.String name The unique name. Returns Type Description IPrimaryKey A new IPrimaryKey object. CreateTableType(String) Creates a new ITableType object. Declaration public virtual ITableType CreateTableType(string name) Parameters Type Name Description System.String name The unique name. Returns Type Description ITableType A new ITableType object. CreateUniqueKey(String) Creates a new IUniqueKey object. Declaration public virtual IUniqueKey CreateUniqueKey(string name) Parameters Type Name Description System.String name The unique name. Returns Type Description IUniqueKey A new IUniqueKey object. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Metadata.MetaModel.Factories.LazyMetaModelFactory.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Factories.LazyMetaModelFactory.html",
    "title": "Class LazyMetaModelFactory | CB Connector SDK website",
    "keywords": "Class LazyMetaModelFactory Factory implementation that always creates MetaModel objects. It should be used for lazy loading . Inheritance System.Object MetaModelFactory LazyMetaModelFactory Inherited Members MetaModelFactory.Create<T>(Object[]) MetaModelFactory.CreateDescriptor(String, String) MetaModelFactory.CreateParameter(String, IDataType, Boolean, Int32, ParameterDirectionKind, Boolean) MetaModelFactory.CreateColumn(String, IDataType, Boolean, Int32, Boolean, Boolean, Boolean, Boolean) MetaModelFactory.CreateForeignKey(String, ITable) MetaModelFactory.CreateUniqueKey(String) MetaModelFactory.CreateNotNull(String) MetaModelFactory.CreatePrimaryKey(String) MetaModelFactory.CreateParametricType(Func<IDataType[], IDataType>) MetaModelFactory.CreateTableType(String) MetaModelFactory.CreateJsonType(String) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Factories Assembly : CB.Connector.dll Syntax public class LazyMetaModelFactory : MetaModelFactory Properties Instance Gets an instance of LazyMetaModelFactory Declaration public static LazyMetaModelFactory Instance { get; } Property Value Type Description LazyMetaModelFactory The instance. Methods CreateFunction(String, FunctionType, ILoader) Creates a new IFunction object. Declaration public IFunction CreateFunction(string name, FunctionType functionType, ILoader loader) Parameters Type Name Description System.String name The unique name. FunctionType functionType The type of the function. ILoader loader An ILoader object that enable loading an element (or a set of elements). Returns Type Description IFunction A new IProcedure object. CreateMetaModel(String, String, ILoader) Creates a new IMetaModel object. Declaration public IMetaModel CreateMetaModel(string name, string defaultSchema, ILoader loader) Parameters Type Name Description System.String name The unique name. System.String defaultSchema The default schema name. ILoader loader An ILoader object that enable loading an element (or a set of elements). Returns Type Description IMetaModel A new IMetaModel object. CreateProcedure(String, ILoader) Creates a new IProcedure object. Declaration public IProcedure CreateProcedure(string name, ILoader loader) Parameters Type Name Description System.String name The unique name. ILoader loader An ILoader object that enable loading an element (or a set of elements). Returns Type Description IProcedure A new IProcedure object. CreateSchema(String, ILoader) Creates a new ISchema object. Declaration public ISchema CreateSchema(string name, ILoader loader) Parameters Type Name Description System.String name The unique name. ILoader loader An ILoader object that enable loading an element (or a set of elements). Returns Type Description ISchema A new ISchema object. CreateTable(String, ILoader) Creates a new ITable object. Declaration public ITable CreateTable(string name, ILoader loader) Parameters Type Name Description System.String name The unique name. ILoader loader An ILoader object that enable loading an element (or a set of elements). Returns Type Description ITable A new ITable object. CreateView(String, ILoader) Creates a new IView object. Declaration public IView CreateView(string name, ILoader loader) Parameters Type Name Description System.String name The unique name. ILoader loader An ILoader object that enable loading an element (or a set of elements). Returns Type Description IView A new IView object. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also MetaModelFactory"
  },
  "api/CB.Connector.Metadata.MetaModel.Factories.EagerMetaModelFactory.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Factories.EagerMetaModelFactory.html",
    "title": "Class EagerMetaModelFactory | CB Connector SDK website",
    "keywords": "Class EagerMetaModelFactory Factory implementation that always creates MetaModel objects. It should be used for eager loading . Inheritance System.Object MetaModelFactory EagerMetaModelFactory Inherited Members MetaModelFactory.Create<T>(Object[]) MetaModelFactory.CreateDescriptor(String, String) MetaModelFactory.CreateParameter(String, IDataType, Boolean, Int32, ParameterDirectionKind, Boolean) MetaModelFactory.CreateColumn(String, IDataType, Boolean, Int32, Boolean, Boolean, Boolean, Boolean) MetaModelFactory.CreateForeignKey(String, ITable) MetaModelFactory.CreateUniqueKey(String) MetaModelFactory.CreateNotNull(String) MetaModelFactory.CreatePrimaryKey(String) MetaModelFactory.CreateParametricType(Func<IDataType[], IDataType>) MetaModelFactory.CreateTableType(String) MetaModelFactory.CreateJsonType(String) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Factories Assembly : CB.Connector.dll Syntax public class EagerMetaModelFactory : MetaModelFactory Properties Instance Gets an instance of EagerMetaModelFactory . Declaration public static EagerMetaModelFactory Instance { get; } Property Value Type Description EagerMetaModelFactory The instance. Methods CreateFunction(String, FunctionType) Creates a new IFunction object. Declaration public IFunction CreateFunction(string name, FunctionType functionType) Parameters Type Name Description System.String name The unique name. FunctionType functionType The type of the function. Returns Type Description IFunction A new IFunction object. CreateMetaModel(String, String) Creates a new IMetaModel object. Declaration public IMetaModel CreateMetaModel(string name, string defaultSchema) Parameters Type Name Description System.String name The unique name. System.String defaultSchema The default schema name. Returns Type Description IMetaModel A new IMetaModel object. CreateProcedure(String) Creates a new IProcedure object. Declaration public IProcedure CreateProcedure(string name) Parameters Type Name Description System.String name The unique name. Returns Type Description IProcedure A new IProcedure object. CreateSchema(String) Creates a new ISchema object. Declaration public ISchema CreateSchema(string name) Parameters Type Name Description System.String name The unique name. Returns Type Description ISchema A new ISchema object. CreateTable(String) Creates a new ITable object. Declaration public ITable CreateTable(string name) Parameters Type Name Description System.String name The unique name. Returns Type Description ITable A new ITable object. CreateView(String) Creates a new IView object. Declaration public IView CreateView(string name) Parameters Type Name Description System.String name The unique name. Returns Type Description IView A new IView object. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also MetaModelFactory"
  },
  "api/CB.Connector.Metadata.MetaModel.Extensions.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Extensions.html",
    "title": "Namespace CB.Connector.Metadata.MetaModel.Extensions | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Metadata.MetaModel.Extensions Classes NamedElement Holds extension methods for NamedElement ."
  },
  "api/CB.Connector.Metadata.MetaModel.Extensions.NamedElement.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Extensions.NamedElement.html",
    "title": "Class NamedElement | CB Connector SDK website",
    "keywords": "Class NamedElement Holds extension methods for NamedElement . Inheritance System.Object NamedElement Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Extensions Assembly : CB.Connector.dll Syntax public static class NamedElement Methods GetDepth(INamedElement) Gets the depth. Declaration public static int GetDepth(this INamedElement _this) Parameters Type Name Description INamedElement _this Reference to the calling object. Returns Type Description System.Int32 The depth. Remarks The depth of an element is one greater than the depth of the element that contains it. Exceptions Type Condition System.ArgumentException _this is null . GetDepth(Type) Gets the depth. Declaration public static int GetDepth(this Type _this) Parameters Type Name Description System.Type _this Reference to the calling object. Returns Type Description System.Int32 The depth. Remarks The depth of an element is one greater than the depth of the element that contains it. Exceptions Type Condition System.ArgumentException type GetQualifiedName(INamedElement) Gets the full name that allows the named element to be identified within a hierarchy of nested namespaces. Declaration public static string GetQualifiedName(this INamedElement _this) Parameters Type Name Description INamedElement _this Reference to the calling object. Returns Type Description System.String The full name that allows the named element to be identified within a hierarchy of nested namespaces. Remarks The qualified name is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the named element itself."
  },
  "api/CB.Connector.Metadata.MetaModel.Classes.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Classes.html",
    "title": "Namespace CB.Connector.Metadata.MetaModel.Classes | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Metadata.MetaModel.Classes Classes ComplexType Provides an abstract class for IComplexType . Constraint Provides an abstract class for IConstraint . DataType Provides an abstract class for IDataType . NamedElement Provides an abstract class for INamedElement . Namespace Provides an abstract class for INamespace PrimitiveType Provides an abstract class for IPrimitiveType Procedure Provides a base class for IProcedure . Property Provides an abstract class for IProperty QueryableElement Provides an abstract class for IQueryableElement . Table Provides a base class for ITable ."
  },
  "api/CB.Connector.Metadata.MetaModel.Classes.Table.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Classes.Table.html",
    "title": "Class Table | CB Connector SDK website",
    "keywords": "Class Table Provides a base class for ITable . Inheritance System.Object NamedElement Namespace QueryableElement Table Implements ITable IQueryableElement INamespace INamedElement IElement Inherited Members Namespace.DelimiterString Namespace.DelimiterArray Namespace.Add(INamedElement) Namespace.Remove(INamedElement) Namespace.TryGetElement<T>(String, T) Namespace.TryGetElementInternal<T>(String, T) Namespace.ResolveName(Type, String) Namespace.IsValidName(String) Namespace.GetDefaultNamespaces() NamedElement.Description NamedElement.ToString() NamedElement.Name NamedElement.QualifiedName NamedElement.Owner System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Classes Assembly : CB.Connector.dll Syntax public class Table : QueryableElement, ITable, IQueryableElement, INamespace, INamedElement, IElement Constructors Table(String) Initializes a new instance of the Table class. Declaration public Table(string name) Parameters Type Name Description System.String name The name. Table(String, ILoader) Initializes a new instance of the Table class. Declaration public Table(string name, ILoader loader) Parameters Type Name Description System.String name The name. ILoader loader The loader. Properties Aggregatable Gets a value indicating whether this instance supports Aggregate Functions. Declaration public virtual bool Aggregatable { get; } Property Value Type Description System.Boolean true if this instance is capable of supporting Aggregate Functions; otherwise, false . Columns Gets the sub-collection of named elements. Each element is an IColumn . Declaration public virtual IElementCollection<IColumn> Columns { get; } Property Value Type Description IElementCollection < IColumn > The columns defined for ITable . Constraints Gets the sub-collection of named elements. Each element is an IConstraint . Declaration public virtual IElementCollection<IConstraint> Constraints { get; } Property Value Type Description IElementCollection < IConstraint > The constraints defined for ITable . Deletable Gets or sets a value indicating whether this instance is deletable. Declaration public virtual bool Deletable { get; } Property Value Type Description System.Boolean true if this instance is capable of being deleted; otherwise, false . Elements Gets the collection of named elements. Declaration public override sealed IElementCollection<INamedElement> Elements { get; } Property Value Type Description IElementCollection < INamedElement > The collection of named elements. Overrides Namespace.Elements Filterable Gets a value indicating whether this instance is filterable. Declaration public virtual bool Filterable { get; } Property Value Type Description System.Boolean true if this instance is capable of supporting Where Clause; otherwise, false . Groupable Gets a value indicating whether this instance supports GroupBy. Declaration public virtual bool Groupable { get; } Property Value Type Description System.Boolean true if this instance is capable of supporting GroupBy Clause; otherwise, false . Insertable Gets a value indicating whether this instance is insertable. Declaration public virtual bool Insertable { get; } Property Value Type Description System.Boolean true if this instance is capable of supporting insertion; otherwise, false . LimitSupported Gets a value indicating whether this instance supports Limit. Declaration public virtual bool LimitSupported { get; } Property Value Type Description System.Boolean true if this instance is capable of supporting Limit Clause; otherwise, false . OffsetSupported Gets a value indicating whether this instance supports Offset. Declaration public virtual bool OffsetSupported { get; } Property Value Type Description System.Boolean true if this instance is capable of supporting Offset Clause; otherwise, false . Selectable Gets a value indicating whether this instance is selectable. Declaration public virtual bool Selectable { get; } Property Value Type Description System.Boolean true if this instance is capable of being selected; otherwise, false . Sortable Gets a value indicating whether this instance supports OrderBy. Declaration public virtual bool Sortable { get; } Property Value Type Description System.Boolean true if this instance is capable of supporting OrderBy Clause; otherwise, false . Updatable Gets a value indicating whether this instance is updatable. Declaration public virtual bool Updatable { get; } Property Value Type Description System.Boolean true if this instance is capable of being updated; otherwise, false . Implements ITable IQueryableElement INamespace INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also QueryableElement ITable"
  },
  "api/CB.Connector.Metadata.DataModel.IResultSetReader.html": {
    "href": "api/CB.Connector.Metadata.DataModel.IResultSetReader.html",
    "title": "Interface IResultSetReader | CB Connector SDK website",
    "keywords": "Interface IResultSetReader Accesses and traverses IResult objects. Inherited Members System.Collections.Generic.IEnumerator<CB.Connector.Metadata.DataModel.IResult>.Current System.IDisposable.Dispose() System.Collections.IEnumerator.MoveNext() System.Collections.IEnumerator.Reset() Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface IResultSetReader : IEnumerator<IResult>, IDisposable, IEnumerator Properties ResultSet Gets the IResultSet associated with the IResultSetReader . Declaration IResultSet ResultSet { get; } Property Value Type Description IResultSet The IResultSet associated with the IResultSetReader . Methods HasNext() Determines whether the enumerator has more elements. Declaration bool HasNext() Returns Type Description System.Boolean true if the enumerator has more elements; otherwise, false . MoveLast() Advances the enumerator to the last element of the collection. Declaration bool MoveLast() Returns Type Description System.Boolean true if the enumerator was successfully advanced to the last element; otherwise, false . Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IResult"
  },
  "api/CB.Connector.Metadata.DataModel.IResultSetLoader.html": {
    "href": "api/CB.Connector.Metadata.DataModel.IResultSetLoader.html",
    "title": "Interface IResultSetLoader | CB Connector SDK website",
    "keywords": "Interface IResultSetLoader Fills an IResultSet object with values from a data source. Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface IResultSetLoader Properties CancellationToken Gets the cancellation token. Declaration CancellationToken CancellationToken { get; } Property Value Type Description System.Threading.CancellationToken Returns a CancellationToken object. Remarks A CancellationToken enables cooperative cancellation between threads. Methods OpenTableResultLoader(IEnumerable<IColumnArgument>) Opens an IResultLoader object for writing. Declaration ITableResultLoader OpenTableResultLoader(IEnumerable<IColumnArgument> columns) Parameters Type Name Description System.Collections.Generic.IEnumerable < IColumnArgument > columns The collection of columns that belong to the result set. Returns Type Description ITableResultLoader A new ITableResultLoader instance. ReturnEmptyResult(Exception, Int32, String, Object[]) Returns an empty result. Declaration void ReturnEmptyResult(Exception error, int affectedRows, string messageFormat, params object[] args) Parameters Type Name Description System.Exception error An System.Exception object describing the error condition that occured. System.Int32 affectedRows The number of rows that were affected by the command. System.String messageFormat The message format. System.Object [] args One-dimensional array. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Metadata.DataModel.IResultSet.html": {
    "href": "api/CB.Connector.Metadata.DataModel.IResultSet.html",
    "title": "Interface IResultSet | CB Connector SDK website",
    "keywords": "Interface IResultSet Represents a database result set (a sequence of multiple results). Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface IResultSet Properties CancellationToken Gets the cancellation token. Declaration CancellationToken CancellationToken { get; } Property Value Type Description System.Threading.CancellationToken Returns a CancellationToken object. Remarks A CancellationToken enables cooperative cancellation between threads. Id Gets the unique identifier. Declaration Guid Id { get; } Property Value Type Description System.Guid The unique identifier. Methods OpenLoader(ManualResetEvent) Opens an IResultLoader object for writing. Declaration IResultSetLoader OpenLoader(ManualResetEvent wait4ResultReady) Parameters Type Name Description System.Threading.ManualResetEvent wait4ResultReady Returns Type Description IResultSetLoader A new ITableResultLoader instance. OpenReader() Opens an IResultSetReader object for reading. Declaration IResultSetReader OpenReader() Returns Type Description IResultSetReader A new IResultSetReader instance. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Metadata.DataModel.IResultLoader.html": {
    "href": "api/CB.Connector.Metadata.DataModel.IResultLoader.html",
    "title": "Interface IResultLoader | CB Connector SDK website",
    "keywords": "Interface IResultLoader Fills an IResult object with values from a data source. Inherited Members System.IDisposable.Dispose() Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface IResultLoader : IDisposable Properties CancellationToken Gets the cancellation token. Declaration CancellationToken CancellationToken { get; } Property Value Type Description System.Threading.CancellationToken Returns a CancellationToken object. Remarks A CancellationToken enables cooperative cancellation between threads. Result Gets an IResult . Declaration IResult Result { get; } Property Value Type Description IResult Return an IResult . Methods Close(Exception) Closes the IResultLoader object. Declaration void Close(Exception error = null) Parameters Type Name Description System.Exception error An System.Exception object describing the error condition that occured. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also System.IDisposable"
  },
  "api/CB.Connector.Metadata.DataModel.Classes.Lob.html": {
    "href": "api/CB.Connector.Metadata.DataModel.Classes.Lob.html",
    "title": "Class Lob | CB Connector SDK website",
    "keywords": "Class Lob Default implementation of ILob . Inheritance System.Object Lob BLob CLob Implements ILob System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.DataModel.Classes Assembly : CB.Connector.dll Syntax public class Lob : ILob, IDisposable Constructors Lob(Guid, Stream) Initializes a new instance of the Lob class. Declaration protected Lob(Guid id, Stream baseStream) Parameters Type Name Description System.Guid id The unique identifier. System.IO.Stream baseStream A generic view of a sequence of bytes. Properties BaseStream Gets a generic view of a sequence of bytes. Declaration public Stream BaseStream { get; } Property Value Type Description System.IO.Stream A generic view of sequence of bytes. Id Gets the unique identifier. Declaration public Guid Id { get; } Property Value Type Description System.Guid The unique identifier. Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Implements ILob System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ILob"
  },
  "api/CB.Connector.Metadata.DataModel.Classes.CLob.html": {
    "href": "api/CB.Connector.Metadata.DataModel.Classes.CLob.html",
    "title": "Class CLob | CB Connector SDK website",
    "keywords": "Class CLob Default implementation of ICLob Inheritance System.Object Lob CLob Implements ICLob ILob System.IDisposable Inherited Members Lob.BaseStream Lob.Id Lob.Dispose(Boolean) Lob.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.DataModel.Classes Assembly : CB.Connector.dll Syntax public class CLob : Lob, ICLob, ILob, IDisposable Constructors CLob(Guid, Stream) Initializes a new instance of the CLob class. Declaration public CLob(Guid id, Stream baseStream) Parameters Type Name Description System.Guid id The unique identifier. System.IO.Stream baseStream A generic view of a sequence of bytes. CLob(Guid, Stream, Encoding) Initializes a new instance of the CLob class. Declaration public CLob(Guid id, Stream baseStream, Encoding encoding) Parameters Type Name Description System.Guid id The unique identifier. System.IO.Stream baseStream A generic view of a sequence of bytes. System.Text.Encoding encoding The encoding. Properties Encoding Gets a character encoding. Declaration public Encoding Encoding { get; } Property Value Type Description System.Text.Encoding Returns a character encoding. Implements ICLob ILob System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also Lob ICLob"
  },
  "api/CB.Connector.Metadata.DataModel.Classes.BLob.html": {
    "href": "api/CB.Connector.Metadata.DataModel.Classes.BLob.html",
    "title": "Class BLob | CB Connector SDK website",
    "keywords": "Class BLob Default implementation of IBLob . Inheritance System.Object Lob BLob Implements IBLob ILob System.IDisposable Inherited Members Lob.BaseStream Lob.Id Lob.Dispose(Boolean) Lob.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.DataModel.Classes Assembly : CB.Connector.dll Syntax public class BLob : Lob, IBLob, ILob, IDisposable Constructors BLob(Guid, Stream) Initializes a new instance of the BLob class. Declaration public BLob(Guid id, Stream baseStream) Parameters Type Name Description System.Guid id The unique identifier. System.IO.Stream baseStream A generic view of a sequence of bytes. Implements IBLob ILob System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also Lob IBLob"
  },
  "api/CB.Connector.ISession.html": {
    "href": "api/CB.Connector.ISession.html",
    "title": "Interface ISession | CB Connector SDK website",
    "keywords": "Interface ISession Provides a base interface for defining a CB command session that is an occurrence of a user interacting with a relational database, where the occurrence is a single command. Inherited Members System.IDisposable.Dispose() Namespace : CB.Connector Assembly : CB.Connector.dll Syntax public interface ISession : IDisposable Properties Connector Returns an instance of a class that implements the IConnector interface. Declaration IConnector Connector { get; } Property Value Type Description IConnector A IConnector that represents the connection to a CB Server. DatabaseName Gets or sets the name of the database. Declaration string DatabaseName { get; set; } Property Value Type Description System.String The database name as a string. HandlerFactory Returns an instance of a class that implements the IDataHandlerFactory interface. Declaration IDataHandlerFactory HandlerFactory { get; } Property Value Type Description IDataHandlerFactory An IDataHandlerFactory object that processes the request. MetaModel Returns an instance of a class that implements the IMetaModel interface. Declaration IMetaModel MetaModel { get; } Property Value Type Description IMetaModel An IMetaModel object that represents the mapping between a database and data source objects. SessionId Gets the name of the session. Declaration Guid SessionId { get; } Property Value Type Description System.Guid The name of the session. State Gets or sets the state of the session after a CB command is performed on the connection. Declaration SessionState State { get; set; } Property Value Type Description SessionState An SessionState enumeration. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also System.IDisposable"
  },
  "api/CB.Connector.Command.Translator.Translator-2.html": {
    "href": "api/CB.Connector.Command.Translator.Translator-2.html",
    "title": "Class Translator<TOutput, TContext> | CB Connector SDK website",
    "keywords": "Class Translator<TOutput, TContext> Translator for walking the Syntactic Tree (SQL search condition). Inheritance System.Object Translator<TOutput, TContext> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.Translator Assembly : CB.Connector.dll Syntax public abstract class Translator<TOutput, TContext> Type Parameters Name Description TOutput The type of the output. TContext The type of the context. Methods Translate(AggregateFunction, TContext) Translates the specified AggregateFunction object. Declaration protected abstract TOutput Translate(AggregateFunction argument, TContext context) Parameters Type Name Description AggregateFunction argument The AggregateFunction object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(Block, TContext) Translates the specified Block object. Declaration protected abstract TOutput Translate(Block argument, TContext context) Parameters Type Name Description Block argument The Block object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(ColumnArgument, TContext) Translates the specified ColumnArgument object. Declaration protected abstract TOutput Translate(ColumnArgument argument, TContext context) Parameters Type Name Description ColumnArgument argument The ColumnArgument object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(Constant, TContext) Translates the specified Constant object. Declaration protected abstract TOutput Translate(Constant argument, TContext context) Parameters Type Name Description Constant argument The Constant object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(ScalarValuedFunction, TContext) Translates the specified ScalarValuedFunction object. Declaration protected abstract TOutput Translate(ScalarValuedFunction argument, TContext context) Parameters Type Name Description ScalarValuedFunction argument The ScalarValuedFunction object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(Set, TContext) Translates the specified Set object. Declaration protected abstract TOutput Translate(Set argument, TContext context) Parameters Type Name Description Set argument The Set object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(Variable, TContext) Translates the specified Variable object. Declaration protected abstract TOutput Translate(Variable argument, TContext context) Parameters Type Name Description Variable argument The Variable object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(IArgument, TContext) Translates the specified IArgument object. Declaration public virtual TOutput Translate(IArgument argument, TContext context) Parameters Type Name Description IArgument argument The IArgument object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(AndCriteria, TContext) Translates the specified AndCriteria object. Declaration protected abstract TOutput Translate(AndCriteria criteria, TContext context) Parameters Type Name Description AndCriteria criteria The AndCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(BlockCriteria, TContext) Translates the specified IFilterCriteria object. Declaration protected abstract TOutput Translate(BlockCriteria criteria, TContext context) Parameters Type Name Description BlockCriteria criteria The IFilterCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(AllCriteria, TContext) Translates the specified AllCriteria object. Declaration protected abstract TOutput Translate(AllCriteria criteria, TContext context) Parameters Type Name Description AllCriteria criteria The AllCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(AnyCriteria, TContext) Translates the specified AnyCriteria object. Declaration protected abstract TOutput Translate(AnyCriteria criteria, TContext context) Parameters Type Name Description AnyCriteria criteria The AnyCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(BetweenCriteria, TContext) Translates the specified BetweenCriteria object. Declaration protected abstract TOutput Translate(BetweenCriteria criteria, TContext context) Parameters Type Name Description BetweenCriteria criteria The BetweenCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(EqualCriteria, TContext) Translates the specified EqualCriteria object. Declaration protected abstract TOutput Translate(EqualCriteria criteria, TContext context) Parameters Type Name Description EqualCriteria criteria The EqualCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(ExistsCriteria, TContext) Translates the specified ExistsCriteria object. Declaration protected abstract TOutput Translate(ExistsCriteria criteria, TContext context) Parameters Type Name Description ExistsCriteria criteria The ExistsCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(GreaterCriteria, TContext) Translates the specified GreaterCriteria object. Declaration protected abstract TOutput Translate(GreaterCriteria criteria, TContext context) Parameters Type Name Description GreaterCriteria criteria The GreaterCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(GreaterOrEqualCriteria, TContext) Translates the specified GreaterOrEqualCriteria object. Declaration protected abstract TOutput Translate(GreaterOrEqualCriteria criteria, TContext context) Parameters Type Name Description GreaterOrEqualCriteria criteria The GreaterOrEqualCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(InCriteria, TContext) Translates the specified InCriteria object. Declaration protected abstract TOutput Translate(InCriteria criteria, TContext context) Parameters Type Name Description InCriteria criteria The InCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(IsNotNullCriteria, TContext) Translates the specified IsNotNullCriteria object. Declaration protected abstract TOutput Translate(IsNotNullCriteria criteria, TContext context) Parameters Type Name Description IsNotNullCriteria criteria The IsNotNullCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(IsNullCriteria, TContext) Translates the specified IsNullCriteria object. Declaration protected abstract TOutput Translate(IsNullCriteria criteria, TContext context) Parameters Type Name Description IsNullCriteria criteria The IsNullCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(LessCriteria, TContext) Translates the specified LessCriteria object. Declaration protected abstract TOutput Translate(LessCriteria criteria, TContext context) Parameters Type Name Description LessCriteria criteria The LessCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(LessOrEqualCriteria, TContext) Translates the specified LessOrEqualCriteria object. Declaration protected abstract TOutput Translate(LessOrEqualCriteria criteria, TContext context) Parameters Type Name Description LessOrEqualCriteria criteria The LessOrEqualCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(LikeCriteria, TContext) Translates the specified LikeCriteria object. Declaration protected abstract TOutput Translate(LikeCriteria criteria, TContext context) Parameters Type Name Description LikeCriteria criteria The LikeCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(NotEqualCriteria, TContext) Translates the specified NotEqualCriteria object. Declaration protected abstract TOutput Translate(NotEqualCriteria criteria, TContext context) Parameters Type Name Description NotEqualCriteria criteria The NotEqualCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(NotExistsCriteria, TContext) Translates the specified NotExistsCriteria object. Declaration protected abstract TOutput Translate(NotExistsCriteria criteria, TContext context) Parameters Type Name Description NotExistsCriteria criteria The NotExistsCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(NotInCriteria, TContext) Translates the specified NotInCriteria object. Declaration protected abstract TOutput Translate(NotInCriteria criteria, TContext context) Parameters Type Name Description NotInCriteria criteria The NotInCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(NotLikeCriteria, TContext) Translates the specified NotLikeCriteria object. Declaration protected abstract TOutput Translate(NotLikeCriteria criteria, TContext context) Parameters Type Name Description NotLikeCriteria criteria The NotLikeCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(IFilterCriteria, TContext) Translates the specified IFilterCriteria object. Declaration public virtual TOutput Translate(IFilterCriteria criteria, TContext context) Parameters Type Name Description IFilterCriteria criteria The IFilterCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(NotCriteria, TContext) Translates the specified NotCriteria object. Declaration protected abstract TOutput Translate(NotCriteria criteria, TContext context) Parameters Type Name Description NotCriteria criteria The NotCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(OrCriteria, TContext) Translates the specified OrCriteria object. Declaration protected abstract TOutput Translate(OrCriteria criteria, TContext context) Parameters Type Name Description OrCriteria criteria The OrCriteria object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Translate(Object, TContext) Translates the specified object. Declaration public virtual TOutput Translate(object obj, TContext context) Parameters Type Name Description System.Object obj The object to translate. TContext context The contextual information used to translate the object. Returns Type Description TOutput Defined by the implementer. Exceptions Type Condition System.NotSupportedException Throws exception in case the 'obj' parameter is neither a filter criteria nor an argument. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.html",
    "title": "Namespace CB.Connector.Command.DataHandler.FilterCriteria | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Command.DataHandler.FilterCriteria Classes AndCriteria Provides a base class for conditional-AND operator that combines multiple conditions. BinaryCriteria Operates on two criteria and manipulates them to return a result. BlockCriteria Represents a set whose criteria are enclosed in parentheses. FilterCriteria Provides an abstract class for IFilterCriteria . NotCriteria Provides a base class for not operator that negates a condition. OrCriteria Provides a base class for conditional-OR operator that combines multiple conditions. UnaryCriteria Operates on one criteria and manipulates it to return a result."
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.UnaryCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.UnaryCriteria.html",
    "title": "Class UnaryCriteria | CB Connector SDK website",
    "keywords": "Class UnaryCriteria Operates on one criteria and manipulates it to return a result. Inheritance System.Object FilterCriteria UnaryCriteria BlockCriteria NotCriteria Implements IFilterCriteria Inherited Members FilterCriteria.Childes FilterCriteria.Parent FilterCriteria.Filter(Object[], Object) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria Assembly : CB.Connector.dll Syntax public abstract class UnaryCriteria : FilterCriteria, IFilterCriteria Constructors UnaryCriteria(IFilterCriteria) Initializes a new instance of the UnaryCriteria class with specified filter criteria. Declaration protected UnaryCriteria(IFilterCriteria right) Parameters Type Name Description IFilterCriteria right An IFilterCriteria object. Properties FilterCriteria Gets or sets the filter criteria. Declaration public IFilterCriteria FilterCriteria { get; set; } Property Value Type Description IFilterCriteria Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also FilterCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.OrCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.OrCriteria.html",
    "title": "Class OrCriteria | CB Connector SDK website",
    "keywords": "Class OrCriteria Provides a base class for conditional-OR operator that combines multiple conditions. Inheritance System.Object FilterCriteria BinaryCriteria OrCriteria Implements IFilterCriteria Inherited Members BinaryCriteria.Right BinaryCriteria.Left FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria Assembly : CB.Connector.dll Syntax public class OrCriteria : BinaryCriteria, IFilterCriteria Constructors OrCriteria(IFilterCriteria, IFilterCriteria) Initializes a new instance of the OrCriteria class. Declaration public OrCriteria(IFilterCriteria left, IFilterCriteria right) Parameters Type Name Description IFilterCriteria left The left IFilterCriteria . IFilterCriteria right The right IFilterCriteria . Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also BinaryCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.NotCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.NotCriteria.html",
    "title": "Class NotCriteria | CB Connector SDK website",
    "keywords": "Class NotCriteria Provides a base class for not operator that negates a condition. Inheritance System.Object FilterCriteria UnaryCriteria NotCriteria Implements IFilterCriteria Inherited Members UnaryCriteria.FilterCriteria FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria Assembly : CB.Connector.dll Syntax public class NotCriteria : UnaryCriteria, IFilterCriteria Constructors NotCriteria(IFilterCriteria) Initializes a new instance of the UnaryCriteria class with specified filter criteria. Declaration public NotCriteria(IFilterCriteria right) Parameters Type Name Description IFilterCriteria right An IFilterCriteria object. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also UnaryCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.NotEqualCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.NotEqualCriteria.html",
    "title": "Class NotEqualCriteria | CB Connector SDK website",
    "keywords": "Class NotEqualCriteria Represents Not equal to operator that tests whether one expression is not equal to another expression. Inheritance System.Object FilterCriteria ComparisonCriteria BasicComparisonCriteria NotEqualCriteria Implements IFilterCriteria Inherited Members BasicComparisonCriteria.QuantifierCriteria BasicComparisonCriteria.Left BasicComparisonCriteria.Right ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class NotEqualCriteria : BasicComparisonCriteria, IFilterCriteria Constructors NotEqualCriteria(IArgument, IArgument) Initializes a new instance of the NotEqualCriteria class. Declaration public NotEqualCriteria(IArgument left, IArgument right) Parameters Type Name Description IArgument left The left IArgument . IArgument right The right IArgument . NotEqualCriteria(IEnumerable<IArgument>) Initializes a new instance of the NotEqualCriteria class. Declaration public NotEqualCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also BasicComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.NotBetweenCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.NotBetweenCriteria.html",
    "title": "Class NotBetweenCriteria | CB Connector SDK website",
    "keywords": "Class NotBetweenCriteria Represents NOT BETWEEN operator that checks whether an attribute value is within a range. Inheritance System.Object FilterCriteria ComparisonCriteria ExtendedComparisonCriteria NotBetweenCriteria Implements IFilterCriteria Inherited Members ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class NotBetweenCriteria : ExtendedComparisonCriteria, IFilterCriteria Constructors NotBetweenCriteria(IArgument, IArgument, IArgument) Initializes a new instance of the NotBetweenCriteria class. Declaration public NotBetweenCriteria(IArgument expression, IArgument begin, IArgument end) Parameters Type Name Description IArgument expression The expression to test for in the range defined by begin and end . IArgument begin The begin of an inclusive range. IArgument end The end of an inclusive range. NotBetweenCriteria(IEnumerable<IArgument>) Initializes a new instance of the NotBetweenCriteria class. Declaration public NotBetweenCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Properties Begin Gets the begin of an inclusive range. Declaration public IArgument Begin { get; } Property Value Type Description IArgument The begin of an inclusive range. End Gets the end of an inclusive range. Declaration public IArgument End { get; } Property Value Type Description IArgument The end of an inclusive range. Expression Gets the expression to test for in the given range. Declaration public IArgument Expression { get; } Property Value Type Description IArgument The expression to test for in the given range. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ExtendedComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.LikeCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.LikeCriteria.html",
    "title": "Class LikeCriteria | CB Connector SDK website",
    "keywords": "Class LikeCriteria Represents LIKE operator that checks whether an attribute value matches a given string pattern. Inheritance System.Object FilterCriteria ComparisonCriteria BasicComparisonCriteria LikeCriteria Implements IFilterCriteria Inherited Members BasicComparisonCriteria.QuantifierCriteria BasicComparisonCriteria.Left BasicComparisonCriteria.Right ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class LikeCriteria : BasicComparisonCriteria, IFilterCriteria Remarks A pattern can include regular characters and wildcard characters. During pattern matching, regular characters must exactly match the characters specified in the character string. However, wildcard characters can be matched with arbitrary fragments of the character string. Using wildcard characters makes the LIKE operator more flexible than using the = and != string comparison operators. Constructors LikeCriteria(IArgument, IArgument) Initializes a new instance of the LikeCriteria class. Declaration protected LikeCriteria(IArgument left, IArgument right) Parameters Type Name Description IArgument left The left IArgument . IArgument right The right IArgument . LikeCriteria(IEnumerable<IArgument>) Initializes a new instance of the LikeCriteria class. Declaration public LikeCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also BasicComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.LessOrEqualCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.LessOrEqualCriteria.html",
    "title": "Class LessOrEqualCriteria | CB Connector SDK website",
    "keywords": "Class LessOrEqualCriteria Represents Less than or Equal To operator that compares two expressions. Inheritance System.Object FilterCriteria ComparisonCriteria BasicComparisonCriteria LessOrEqualCriteria Implements IFilterCriteria Inherited Members BasicComparisonCriteria.QuantifierCriteria BasicComparisonCriteria.Left BasicComparisonCriteria.Right ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class LessOrEqualCriteria : BasicComparisonCriteria, IFilterCriteria Constructors LessOrEqualCriteria(IArgument, IArgument) Initializes a new instance of the LessOrEqualCriteria class. Declaration public LessOrEqualCriteria(IArgument left, IArgument right) Parameters Type Name Description IArgument left The left IArgument . IArgument right The right IArgument . LessOrEqualCriteria(IEnumerable<IArgument>) Initializes a new instance of the LessOrEqualCriteria class. Declaration public LessOrEqualCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also BasicComparisonCriteria"
  },
  "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.EqualCriteria.html": {
    "href": "api/CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria.EqualCriteria.html",
    "title": "Class EqualCriteria | CB Connector SDK website",
    "keywords": "Class EqualCriteria Represents Equals to operator that compares the equality of two expressions. Inheritance System.Object FilterCriteria ComparisonCriteria BasicComparisonCriteria EqualCriteria Implements IFilterCriteria Inherited Members BasicComparisonCriteria.QuantifierCriteria BasicComparisonCriteria.Left BasicComparisonCriteria.Right ComparisonCriteria.Arguments ComparisonCriteria.Args FilterCriteria.Childes FilterCriteria.Parent System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.FilterCriteria.ComparisonCriteria Assembly : CB.Connector.dll Syntax public class EqualCriteria : BasicComparisonCriteria, IFilterCriteria Constructors EqualCriteria(IArgument, IArgument) Initializes a new instance of the EqualCriteria class. Declaration public EqualCriteria(IArgument left, IArgument right) Parameters Type Name Description IArgument left The left IArgument . IArgument right The right IArgument . EqualCriteria(IEnumerable<IArgument>) Initializes a new instance of the EqualCriteria class. Declaration public EqualCriteria(IEnumerable<IArgument> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < IArgument > args The collection of arguments that follows the operator. Methods Filter(Object[], Object) Filters values that are based on specified filter criteria. Declaration public override bool Filter(object[] values, object context) Parameters Type Name Description System.Object [] values Required. One-dimensional array of values to be filtered. System.Object context The contextual information used to filter the one-dimensional array of values. Returns Type Description System.Boolean true if the one-dimensional array of values was successfully filtered; otherwise, false . Overrides FilterCriteria.Filter(Object[], Object) Remarks Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. Implements IFilterCriteria Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also BasicComparisonCriteria"
  },
  "api/CB.Connector.Property.ConnectorPropertyFlags.html": {
    "href": "api/CB.Connector.Property.ConnectorPropertyFlags.html",
    "title": "Enum ConnectorPropertyFlags | CB Connector SDK website",
    "keywords": "Enum ConnectorPropertyFlags Represents an enumeration that defines literals used to describe the distinctive nature or features of a property. Namespace : CB.Connector.Property Assembly : CB.Connector.dll Syntax [Flags] public enum ConnectorPropertyFlags Fields Name Description AuthMask The property is used for OAuth authentication. ConnectorCanSet The property is reserved. Hidden The property is hidden. None The property does not have any of the above flags. ReadOnly The property is read-only. UnknownProperty The property is unknown. Extension Methods ConnectorPropertiesExtensions.TryParse(Type, Object) ConnectorPropertiesExtensions.Parse(Type) ConnectorPropertiesExtensions.Decrypt(String) ConnectorPropertiesExtensions.Encrypt(String) ConnectorPropertiesExtensions.IsEncrypted(String, Encoding) ConnectorPropertyFlagsExtensions.SetAuthenticationType(AuthenticationType) ConnectorPropertyFlagsExtensions.GetAuthenticationType()"
  },
  "api/CB.Connector.Property.ConnectorPropertyAttribute.html": {
    "href": "api/CB.Connector.Property.ConnectorPropertyAttribute.html",
    "title": "Class ConnectorPropertyAttribute | CB Connector SDK website",
    "keywords": "Class ConnectorPropertyAttribute Indicates that the attributed property is an account property. This class cannot be inherited. Inheritance System.Object System.Attribute ConnectorPropertyAttribute Implements System.Runtime.InteropServices._Attribute IConnectorPropertyInfo Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Property Assembly : CB.Connector.dll Syntax public sealed class ConnectorPropertyAttribute : Attribute, _Attribute, IConnectorPropertyInfo Examples The following example illustrates the use of the ConnectorPropertyAttribute attribute. public class Example { //Define a property with ConnectorPropertyAttribute. [ConnectorProperty( Key = \"Version\", Name = \"Version\", Description = \"The version of the API.\", Flags = ConnectorPropertyFlags.None, DefaultValue = \"v1.0\", IsEncrypted = false)] public string Version { get; set; } //Define an OAuth property with ConnectorPropertyAttribute. //The flag will inform how to treat this property. //The namespace should be used for grouping properties. [ConnectorProperty( Key = \"ClientID\", Name = \"Client ID\", Description = \"The client identifier.\", Flags = (ConnectorPropertyFlags) ((int) ConnectorPropertyFlags.AuthMask & ((int) AuthenticationType.OAuth2 << 4)), Namespace = \"IOAuth2Configuration\", IsEncrypted = false)] public string ClientId { get; set; } //Define an OAuth property with ConnectorPropertyAttribute. //Shadows represents a dynamic object stored in CB Server. [ConnectorProperty( Key = \"ExpiresAt\", Name = \"ExpiresAt\", Description = \"The token's expiration date.\", Flags = ConnectorPropertyFlags.Hidden | ConnectorPropertyFlags.ConnectorCanSet, Namespace = \"IOAuth2Configuration\", IsEncrypted = true)] public DateTime ExpiresAt { get => Shadows.ExpiresAt; set => Shadows.ExpiresAt = value; } } Properties DefaultValue Gets the default value of the property. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object The default value of the property. DependsOn Gets the dependency(ies) of the property. Declaration public string DependsOn { get; set; } Property Value Type Description System.String The dependency(ies) of the property. Description Gets a textual annotation that is used to add information. Declaration public string Description { get; set; } Property Value Type Description System.String A textual annotation that is used to add information. Enumeration Gets an enumeration of the property. Declaration public string Enumeration { get; set; } Property Value Type Description System.String An enumeration of the property. Flags Gets the flag used to describe the distinctive nature or features of a property. Declaration public ConnectorPropertyFlags Flags { get; set; } Property Value Type Description ConnectorPropertyFlags The flag used to describe the distinctive nature or features of a property. IsEncrypted Gets a value indicating whether the property is encrypted. Declaration public bool IsEncrypted { get; set; } Property Value Type Description System.Boolean true if the property is encrypted; otherwise, false . IsOptional Gets a value indicating whether the property is optional. Declaration public bool IsOptional { get; set; } Property Value Type Description System.Boolean true if the property is optional; otherwise, false . IsOverridable Gets a value indicating whether the property is overridable. Declaration public bool IsOverridable { get; set; } Property Value Type Description System.Boolean true if the property is overridable; otherwise, false . Key Gets the unique name of the property. Declaration public string Key { get; set; } Property Value Type Description System.String The unique name of the property Name Gets the name of the property. Declaration public string Name { get; set; } Property Value Type Description System.String The name of the property Namespace Gets the namespace of the property. Declaration public string Namespace { get; set; } Property Value Type Description System.String The namespace of the property. Ordinal Gets the property’s ordinal position, which specifies where a property is in an order. Declaration public int Ordinal { get; set; } Property Value Type Description System.Int32 The property’s ordinal position. RegexValidator Gets the validator for a regular expression. Declaration public string RegexValidator { get; set; } Property Value Type Description System.String The validator for a regular expression. Type Gets the type of the property. Declaration public Type Type { get; } Property Value Type Description System.Type A Type defined for the property. Implements System.Runtime.InteropServices._Attribute IConnectorPropertyInfo Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also System.Attribute"
  },
  "api/CB.Connector.Property.ConnectorProperties-1.html": {
    "href": "api/CB.Connector.Property.ConnectorProperties-1.html",
    "title": "Class ConnectorProperties<T> | CB Connector SDK website",
    "keywords": "Class ConnectorProperties<T> Default implementation of IConnectorProperties Inheritance System.Object ConnectorProperties<T> Implements IConnectorProperties Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Property Assembly : CB.Connector.dll Syntax public abstract class ConnectorProperties<T> : IConnectorProperties where T : ConnectorProperties<T> Type Parameters Name Description T The type of your class. Constructors ConnectorProperties() Initializes a new instance of the ConnectorProperties<T> class. Declaration protected ConnectorProperties() Properties Decorators Gets the decorators for this instance. Declaration protected Dictionary<Type, IConnectorPropertiesDecorator> Decorators { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Type , IConnectorPropertiesDecorator > The decorators for this instance. PrivateKey Gets the private RSA key used to encrypt/decrypt data with the RSA algorithm. Declaration protected string PrivateKey { get; } Property Value Type Description System.String The private key. PublicKey Gets the public RSA key used to encrypt/decrypt data with the RSA algorithm. Declaration public virtual string PublicKey { get; } Property Value Type Description System.String The public key. Shadows Gets a dynamic object stored in CB Server. Declaration protected dynamic Shadows { get; } Property Value Type Description System.Object A dynamic object stored in CB Server. Methods CanDecorate<TDecorator>() Determines whether this instance can be decorated. Declaration public bool CanDecorate<TDecorator>() Returns Type Description System.Boolean true if this instance can be decorate; otherwise, false . Type Parameters Name Description TDecorator The desired type for the decorator. Decorate<TDecorator>() Decorates this instance. Declaration public TDecorator Decorate<TDecorator>() where TDecorator : IConnectorPropertiesDecorator Returns Type Description TDecorator An IConnectorPropertiesDecorator instance. Type Parameters Name Description TDecorator The desired type for the decorator. GeneratePropertyInfo(Type) Generates the property information. Declaration protected static void GeneratePropertyInfo(Type type) Parameters Type Name Description System.Type type The type declaration. GetKey() Gets the private RSA key used to encrypt/decrypt data with the RSA algorithm. Declaration protected abstract string GetKey() Returns Type Description System.String The private key. LoadDecorators() Loads the decorators. Declaration protected virtual void LoadDecorators() OnUndeclaredProperty(String, Object) Called when a property is not declared. Declaration protected virtual void OnUndeclaredProperty(string key, object value) Parameters Type Name Description System.String key The object to use as the key of the element. System.Object value The object to use as the value of the element Implements IConnectorProperties Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IConnectorProperties"
  },
  "api/CB.Connector.Property.AuthenticationType.html": {
    "href": "api/CB.Connector.Property.AuthenticationType.html",
    "title": "Enum AuthenticationType | CB Connector SDK website",
    "keywords": "Enum AuthenticationType Enumerates the types of authentication used to identify the user. Namespace : CB.Connector.Property Assembly : CB.Connector.dll Syntax public enum AuthenticationType Fields Name Description Anonymous No authentication. Basic Basic Authentication. OAuth1 OAuth 1.0 Authentication OAuth2 OAuth 2.0 Authentication Extension Methods ConnectorPropertiesExtensions.TryParse(Type, Object) ConnectorPropertiesExtensions.Parse(Type) ConnectorPropertiesExtensions.Decrypt(String) ConnectorPropertiesExtensions.Encrypt(String) ConnectorPropertiesExtensions.IsEncrypted(String, Encoding)"
  },
  "api/CB.Connector.Metadata.MetaModel.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.html",
    "title": "Namespace CB.Connector.Metadata.MetaModel | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Metadata.MetaModel Interfaces IBuilder Represents the type that implements eager loading for loading related data. It encapsulates the information needed to build and return a meta model instance at runtime. IColumn Provides a base interface for defining a SQL column . IComplexType Provides a base interface for defining a SQL structured type that are a template for defining structured data in the form of one or more properties, each of which has a data type and describes an instance of a data type. IConstraint Provides a base interface for defining a SQL constraint that is an assertion that indicates a restriction that must be satisfied by any valid realization of the model containing the constraint (that is, rules). IDataType Provides a base interface for defining a SQL Data Type that specifies a set of allowed data values. IDescriptor Provides a base interface for a textual annotation that can be attached to an element. IElement The foundation for all other modeling concepts in the meta model. IForeignKey Provides a base interface for defining a SQL FOREIGN KEY constraint that enforces data integrity and establishes a link between two Named Elements. IFunction Provides a base interface for defining a SQL Function that accepts input parameters and must return one or more values. IJsonType Provides a base interface for representing the definition of a JavaScript Object Notation (JSON) document. ILoader Represents the type that implements lazy loading for loading related data. IMetaModel Provides a base interface for a view of a physical system (data source). It is an abstraction of the physical system (data source). INamedElement Provides a base interface for an element in the model that has a name. The name is used for identification of the INamedElement within the INamespace s wherein it is defined or accessible. INamespace Provides a base interface for an element in the model that contains a set of elements that can be identified by name within the Namespace. INotNull Provides a base interface for defining a SQL NOT NULL constraint. It ensures that a constrained element has no NULL value. IOrdinalElement Provides a base interface for defining an element that has an ordinal position specified for it, which stipulates where an element is in an order. IParameter Provides a base interface for defining a SQL Parameter that is a property owned by a function or procedure. IParametricType Provides a base interface for a data type – parametrized over type – that is determined at runtime. IPrimaryKey Provides a base interface for defining a SQL PRIMARY KEY constraint. It enforces data integrity and ensures unique identification. IPrimitiveType Provides a base interface for defining a SQL Primitive Type that is a predefined data type without any substructure. IProcedure Provides a base interface for defining a SQL Stored Procedure that accepts input parameters and possibly will return one or more values. A procedure is mainly used to perform an action. IProperty Provides a base interface for a structural element that represents an attribute. IQueryableElement Provides a base interface for a namespace that can be manipulated by the SQL language. ISchema Provides a base interface for defining a SQL Schema that represents a logical grouping of database objects. It is the conceptual organization of the relational database. ITable Provides a base interface for defining a SQL Table that is a logical structure identifiable within the schema. A table may own columns and constraints. ITableType Provides a base interface for representing the definition of a table structure. ITypedElement Provides a base interface for defining a named element that has a type specified for it. IUniqueKey Provides a base interface for defining a SQL UNIQUE KEY constraint that ensures that all values of a constrained element are dissimilar. IView Provides a base interface for defining a SQL View that is a virtual table who provides an alternative way of looking at the data in one or more tables. A view can be used to perform joins and simplify multiple tables into a single virtual table and hide complexity. Enums FunctionType Represents an enumeration that defines literals used to specify the type of the function. ParameterDirectionKind Represents an enumeration an Enumeration that defines literals used to specify direction of the parameter."
  },
  "api/CB.Connector.Metadata.MetaModel.ParameterDirectionKind.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.ParameterDirectionKind.html",
    "title": "Enum ParameterDirectionKind | CB Connector SDK website",
    "keywords": "Enum ParameterDirectionKind Represents an enumeration an Enumeration that defines literals used to specify direction of the parameter. Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public enum ParameterDirectionKind Fields Name Description In Indicates that Parameter values are passed IN by the caller. Inout Indicates that Parameter values are passed IN by the caller and (possibly different) values passed OUT to the caller. Out Indicates that Parameter values are passed OUT to the caller. Return Indicates that Parameter values are passed as RETURN values back to the caller (procedure or function). Extension Methods ConnectorPropertiesExtensions.TryParse(Type, Object) ConnectorPropertiesExtensions.Parse(Type) ConnectorPropertiesExtensions.Decrypt(String) ConnectorPropertiesExtensions.Encrypt(String) ConnectorPropertiesExtensions.IsEncrypted(String, Encoding)"
  },
  "api/CB.Connector.Metadata.MetaModel.IView.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IView.html",
    "title": "Interface IView | CB Connector SDK website",
    "keywords": "Interface IView Provides a base interface for defining a SQL View that is a virtual table who provides an alternative way of looking at the data in one or more tables. A view can be used to perform joins and simplify multiple tables into a single virtual table and hide complexity. Inherited Members INamespace.Elements INamespace.Add(INamedElement) INamespace.Remove(INamedElement) INamespace.TryGetElement<T>(String, T) INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IView : IQueryableElement, INamespace, INamedElement, IElement Properties Columns Gets the sub-collection of named elements. Each element is an IColumn . Declaration IElementCollection<IColumn> Columns { get; } Property Value Type Description IElementCollection < IColumn > The columns defined for IView . Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IQueryableElement"
  },
  "api/CB.Connector.Metadata.MetaModel.IUniqueKey.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IUniqueKey.html",
    "title": "Interface IUniqueKey | CB Connector SDK website",
    "keywords": "Interface IUniqueKey Provides a base interface for defining a SQL UNIQUE KEY constraint that ensures that all values of a constrained element are dissimilar. Inherited Members IConstraint.ConstrainedElements INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IUniqueKey : IConstraint, INamedElement, IElement Properties ConstrainedColumns Gets the sub-collection of named elements. Each element is an IColumn and has to belong to the owner of the IUniqueKey . Declaration IElementCollection<IColumn> ConstrainedColumns { get; } Property Value Type Description IElementCollection < IColumn > The sub-collection of named elements. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IConstraint"
  },
  "api/CB.Connector.Metadata.MetaModel.IComplexType.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IComplexType.html",
    "title": "Interface IComplexType | CB Connector SDK website",
    "keywords": "Interface IComplexType Provides a base interface for defining a SQL structured type that are a template for defining structured data in the form of one or more properties, each of which has a data type and describes an instance of a data type. Inherited Members INamespace.Elements INamespace.Add(INamedElement) INamespace.Remove(INamedElement) INamespace.TryGetElement<T>(String, T) INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IComplexType : IDataType, INamespace, INamedElement, IElement Remarks An IComplexType is a Namespace; as such, it has the capability of owning Named Elements. However, some boundaries must be taken into consideration like: Complex Types can only exist as a type; Constraints cannot be defined inside of IComplexType s; Complex Types cannot participate in relationships. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IDataType INamespace"
  },
  "api/CB.Connector.Metadata.MetaModel.IColumn.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IColumn.html",
    "title": "Interface IColumn | CB Connector SDK website",
    "keywords": "Interface IColumn Provides a base interface for defining a SQL column . Inherited Members ITypedElement.Type ITypedElement.IsNullable ITypedElement.DefaultValue INamedElement.Name INamedElement.QualifiedName INamedElement.Owner IOrdinalElement.Ordinal IElement.Description Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IColumn : IProperty, ITypedElement, INamedElement, IOrdinalElement, IElement Properties IsAutoincrementable Gets a value indicating whether this instance is auto-incremented, meaning that a unique number is generated automatically when a new record is inserted. Declaration bool IsAutoincrementable { get; } Property Value Type Description System.Boolean true if this instance is auto-incremented; otherwise, false . IsForeignKey Gets a value indicating whether this instance is a foreign key. Declaration bool IsForeignKey { get; } Property Value Type Description System.Boolean true if this instance is a foreign key; otherwise, false . IsPrimaryKey Gets a value indicating whether this instance is a primary key. Declaration bool IsPrimaryKey { get; } Property Value Type Description System.Boolean true if this instance is a primary key; otherwise, false . IsReadOnly Gets or sets a value indicating whether this instance is read-only, meaning that the column may not be written to after initialization. Declaration bool IsReadOnly { get; set; } Property Value Type Description System.Boolean true if this instance is read-only; otherwise, false . IsSearchable Gets or sets a value indicating whether this instance is capable of being computationally searched, meaning that the column can be called in where clause. Declaration bool IsSearchable { get; set; } Property Value Type Description System.Boolean true if this instance is capable of being computationally searched; otherwise, false . IsSortable Gets or sets a value indicating whether this instance is sortable, meaning that the column can be called in order by clause Declaration bool IsSortable { get; } Property Value Type Description System.Boolean true if this instance is sortable; otherwise, false . IsUnique Gets a value indicating whether this instance is included in the definition of a primary key or unique key. Declaration bool IsUnique { get; } Property Value Type Description System.Boolean true if this instance is included in the definition of a primary key or unique key; otherwise, false . Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also IProperty"
  },
  "api/CB.Connector.Metadata.MetaModel.IBuilder.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.IBuilder.html",
    "title": "Interface IBuilder | CB Connector SDK website",
    "keywords": "Interface IBuilder Represents the type that implements eager loading for loading related data. It encapsulates the information needed to build and return a meta model instance at runtime. Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public interface IBuilder Remarks This way there is clear separation on the construction of meta model object from its representation. That process is triggered when the GetModel() method is called. Methods GetModel() Returns an IMetaModel object. Declaration IMetaModel GetModel() Returns Type Description IMetaModel An abstraction that represents the mapping between a database and data source objects. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Metadata.MetaModel.Helpers.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Helpers.html",
    "title": "Namespace CB.Connector.Metadata.MetaModel.Helpers | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Metadata.MetaModel.Helpers Classes SupportedTypeCatalog Provides helper methods to facilitate type catalog creation: listing all types, allowing to select and load only the needed types for the current database. Enums SupportedType Represents an enumeration that defines literals used to specify the supported types."
  },
  "api/CB.Connector.Metadata.MetaModel.Helpers.SupportedTypeCatalog.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Helpers.SupportedTypeCatalog.html",
    "title": "Class SupportedTypeCatalog | CB Connector SDK website",
    "keywords": "Class SupportedTypeCatalog Provides helper methods to facilitate type catalog creation: listing all types, allowing to select and load only the needed types for the current database. Inheritance System.Object SupportedTypeCatalog Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.MetaModel.Helpers Assembly : CB.Connector.dll Syntax public static class SupportedTypeCatalog Properties PrimitiveTypes Gets the primitive types for the information schema. Declaration public static IDictionary<string, IPrimitiveType> PrimitiveTypes { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IPrimitiveType > The primitive types."
  },
  "api/CB.Connector.Metadata.MetaModel.Helpers.SupportedType.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Helpers.SupportedType.html",
    "title": "Enum SupportedType | CB Connector SDK website",
    "keywords": "Enum SupportedType Represents an enumeration that defines literals used to specify the supported types. Namespace : CB.Connector.Metadata.MetaModel.Helpers Assembly : CB.Connector.dll Syntax public enum SupportedType Fields Name Description AnyType Any type Boolean Binary-valued logic (true or false) Byte Unsigned 8-bit integer (0 to 255) ByteArray Array of bytes (e.g. image) Char Character DateTime Date and time which may or may not include time-zone offset (e.g. 2019-01-01 18:52:44.000) Decimal Numeric values with decimal representation Double Binary64 floating-point number Int16 Signed 16-bit integer Int32 Signed 32-bit integer Int64 Signed 64-bit integer SByte Signed 8-bit integer (-128 to 127) Single Binary32 floating-point number String Character string (text) (Maximum Length is 8000) UInt16 Unsigned 16-bit integer UInt32 Unsigned 32-bit integer UInt64 Unsigned 64-bit integer Extension Methods ConnectorPropertiesExtensions.TryParse(Type, Object) ConnectorPropertiesExtensions.Parse(Type) ConnectorPropertiesExtensions.Decrypt(String) ConnectorPropertiesExtensions.Encrypt(String) ConnectorPropertiesExtensions.IsEncrypted(String, Encoding)"
  },
  "api/CB.Connector.Metadata.MetaModel.FunctionType.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.FunctionType.html",
    "title": "Enum FunctionType | CB Connector SDK website",
    "keywords": "Enum FunctionType Represents an enumeration that defines literals used to specify the type of the function. Namespace : CB.Connector.Metadata.MetaModel Assembly : CB.Connector.dll Syntax public enum FunctionType Fields Name Description Aggregate An aggregate function who performs a calculation on a set of values and returns a single value. ScalarValued A scalar-valued function who returns a single value. TableValued A table-valued function who returns structured data of a specific table. Unknown The function type is unknown. Extension Methods ConnectorPropertiesExtensions.TryParse(Type, Object) ConnectorPropertiesExtensions.Parse(Type) ConnectorPropertiesExtensions.Decrypt(String) ConnectorPropertiesExtensions.Encrypt(String) ConnectorPropertiesExtensions.IsEncrypted(String, Encoding)"
  },
  "api/CB.Connector.Metadata.MetaModel.Factories.html": {
    "href": "api/CB.Connector.Metadata.MetaModel.Factories.html",
    "title": "Namespace CB.Connector.Metadata.MetaModel.Factories | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Metadata.MetaModel.Factories Classes EagerMetaModelFactory Factory implementation that always creates MetaModel objects. It should be used for eager loading . LazyMetaModelFactory Factory implementation that always creates MetaModel objects. It should be used for lazy loading . MetaModelFactory Abstract Factory that always creates MetaModel objects. PrimitiveTypesFactory Factory implementation that always creates primitive data types."
  },
  "api/CB.Connector.Metadata.DataModel.ITableResultRow.html": {
    "href": "api/CB.Connector.Metadata.DataModel.ITableResultRow.html",
    "title": "Interface ITableResultRow | CB Connector SDK website",
    "keywords": "Interface ITableResultRow Represents a row of data in a ITableResult object. Inherited Members System.IDisposable.Dispose() Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface ITableResultRow : IDisposable Properties Columns Gets the collection of columns that belong to the table. Declaration IList<IColumnArgument> Columns { get; } Property Value Type Description System.Collections.Generic.IList < IColumnArgument > The collection of IColumnArgument objects for the table. An empty collection is returned if no IColumnArgument objects exist. Id Gets or sets the index of the row. Declaration uint Id { get; } Property Value Type Description System.UInt32 The index of the row. Item[Int32] Gets or sets the element at the specified index. Declaration object this[int index] { get; set; } Parameters Type Name Description System.Int32 index The zero-based index of the element to get or set. Property Value Type Description System.Object Item[String] Gets or sets the element with the specified name. Declaration object this[string name] { get; set; } Parameters Type Name Description System.String name The specified name of the element to get or set. Property Value Type Description System.Object RowData Returns data about each cell in a row. Declaration IRowData RowData { get; } Property Value Type Description IRowData Data about each cell in a row. Methods GetValues() Gets the values in the row, one per column. Declaration object[] GetValues() Returns Type Description System.Object [] The values in the row, one per column. SetValues(Object[]) Sets the values in the row, one per column. Declaration void SetValues(params object[] values) Parameters Type Name Description System.Object [] values The values in the row, one per column. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also System.IDisposable"
  },
  "api/CB.Connector.Metadata.DataModel.ITableResultReader.html": {
    "href": "api/CB.Connector.Metadata.DataModel.ITableResultReader.html",
    "title": "Interface ITableResultReader | CB Connector SDK website",
    "keywords": "Interface ITableResultReader Accesses and traverses ITableResultRow objects. Inherited Members System.Collections.Generic.IEnumerator<CB.Connector.Metadata.DataModel.ITableResultRow>.Current System.IDisposable.Dispose() System.Collections.IEnumerator.MoveNext() System.Collections.IEnumerator.Reset() Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface ITableResultReader : IEnumerator<ITableResultRow>, IDisposable, IEnumerator Properties TableResult Gets the ITableResult associated with the ITableResultReader . Declaration ITableResult TableResult { get; } Property Value Type Description ITableResult The ITableResult associated with the ITableResultReader . Methods GetLastError() Returns an System.Exception object describing the error condition that occured. Declaration Exception GetLastError() Returns Type Description System.Exception An System.Exception object describing the error condition that occured Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ITableResultRow"
  },
  "api/CB.Connector.Metadata.DataModel.ITableResultLoader.html": {
    "href": "api/CB.Connector.Metadata.DataModel.ITableResultLoader.html",
    "title": "Interface ITableResultLoader | CB Connector SDK website",
    "keywords": "Interface ITableResultLoader Represents a database result set, which is usually generated by executing a statement that queries the data source. Inherited Members IResultLoader.CancellationToken IResultLoader.Result IResultLoader.Close(Exception) System.IDisposable.Dispose() Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface ITableResultLoader : IResultLoader, IDisposable Examples The following example creates an ITableResultLoader object. The example reads through the data, writing it to the ITableResultLoader . Finally, the example closes the ITableResultLoader as it exits the Using code block. public void ReadData(IResultSetLoader loader, IExecutionContext ctx, string connStr, string query) { using (var conn = new SqlConnection(connStr)) { conn.Open(); using (SqlCommand sqlcommand = new SqlCommand(query, conn)) { //Retrieves a list of the variables (i.e. @ parameters). List<Variable> variables = ctx.GetAllVariables().ToList(); variables.ForEach(v => { sqlcommand.Parameters.Add(new SqlParameter(v.Name, ctx.GetVariableValue(v))); }); var reader = sqlcommand.ExecuteReader(); //Opens an ITableResultLoader object for writing. using (ITableResultLoader tableLoader = loader.OpenTableResultLoader(ResultColumns)) { if (reader.HasRows) { while (reader.Read() && !tableLoader.CancellationToken.IsCancellationRequested) { //Create a new ITableResultRow instance ITableResultRow row = tableLoader.NewRow(); //Gets the values in the row, one per column. reader.GetValues(row.GetValues()); //Adds a row to the ITableResultLoader. tableLoader.Add(row); } reader.Close(); } } } } } Methods Add(ITableResultRow) Adds a row to the ITableResultLoader . Declaration void Add(ITableResultRow row) Parameters Type Name Description ITableResultRow row The row to add to the ITableResultLoader . NewRow() Creates a new ITableResultRow instance. Declaration ITableResultRow NewRow() Returns Type Description ITableResultRow A ITableResultRow instance. SetMessage(String, Object[]) Sets a message to the ITableResultLoader . Declaration void SetMessage(string messageFormat, params object[] args) Parameters Type Name Description System.String messageFormat The message format. System.Object [] args The arguments. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IResultLoader"
  },
  "api/CB.Connector.Metadata.DataModel.ITableResult.html": {
    "href": "api/CB.Connector.Metadata.DataModel.ITableResult.html",
    "title": "Interface ITableResult | CB Connector SDK website",
    "keywords": "Interface ITableResult Represents a table of data. Inherited Members IResult.CancellationToken IResult.ResultType IResult.State IResult.AffectedRows IResult.ColumnCount IResult.Message IResult.GetLastError() IResult.OpenLoader() IResult.OnStateChanged System.IDisposable.Dispose() Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface ITableResult : IResult, IDisposable Properties Columns Gets the collection of columns that belong to this table. Declaration IList<IColumnArgument> Columns { get; } Property Value Type Description System.Collections.Generic.IList < IColumnArgument > The collection of IColumnArgument objects for the table. An empty collection is returned if no IColumnArgument objects exist. Methods GetLob(Guid) Gets ILob object with the specified identifier. Declaration ILob GetLob(Guid id) Parameters Type Name Description System.Guid id The unique identifier. Returns Type Description ILob The ILob object with the specified identifier. OpenReader(Boolean) Opens an ITableResultReader object for reading. Declaration ITableResultReader OpenReader(bool autoDisposeColumns = true) Parameters Type Name Description System.Boolean autoDisposeColumns Returns Type Description ITableResultReader A new ITableResultReader instance. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IResult"
  },
  "api/CB.Connector.Metadata.DataModel.IBLob.html": {
    "href": "api/CB.Connector.Metadata.DataModel.IBLob.html",
    "title": "Interface IBLob | CB Connector SDK website",
    "keywords": "Interface IBLob Represents a binary large object (BLOB) data types used to store unstructured binary data. Inherited Members ILob.BaseStream ILob.Id System.IDisposable.Dispose() Namespace : CB.Connector.Metadata.DataModel Assembly : CB.Connector.dll Syntax public interface IBLob : ILob, IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ILob"
  },
  "api/CB.Connector.Metadata.DataModel.Classes.html": {
    "href": "api/CB.Connector.Metadata.DataModel.Classes.html",
    "title": "Namespace CB.Connector.Metadata.DataModel.Classes | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Metadata.DataModel.Classes Classes BLob Default implementation of IBLob . CLob Default implementation of ICLob Lob Default implementation of ILob . ResultFormatterClassic Default implementation of IResultFormatter . ResultStateChanged Represents an event for when the current state of the result changes. RowAddedArgs Represents an event for when a new ITableResultRow is added to the ITableResult object."
  },
  "api/CB.Connector.Metadata.DataModel.Classes.RowAddedArgs.html": {
    "href": "api/CB.Connector.Metadata.DataModel.Classes.RowAddedArgs.html",
    "title": "Class RowAddedArgs | CB Connector SDK website",
    "keywords": "Class RowAddedArgs Represents an event for when a new ITableResultRow is added to the ITableResult object. Inheritance System.Object System.EventArgs RowAddedArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Metadata.DataModel.Classes Assembly : CB.Connector.dll Syntax public class RowAddedArgs : EventArgs Constructors RowAddedArgs(ITableResultRow) Initializes a new instance of the RowAddedArgs class. Declaration public RowAddedArgs(ITableResultRow row) Parameters Type Name Description ITableResultRow row The ITableResultRow that the event occurred for. Properties Row Gets the ITableResultRow associated with the event. Declaration public ITableResultRow Row { get; } Property Value Type Description ITableResultRow The ITableResultRow associated with the event. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also System.EventArgs"
  },
  "notes/v1.html": {
    "href": "notes/v1.html",
    "title": "Features included in CB Connector SDK 1.0 | CB Connector SDK website",
    "keywords": "Features included in CB Connector SDK 1.0 Relational data model Loading related data: Supports eager and lazy loading. Relationships support: Allows for the definition of one-to-one, one-to-many and many-to-many relationships in the model based on a foreign key. Constraints support: Allows for the definition of restrictions. Primitive types: Allows for the definition of common primitive types (e.g. int , string ). Parametric types: Allows for the definition of data types parametrized over type that is determined at runtime. Complex types: Allows for the definition of table data type. System procedures: Provides system procedures (e.g. SPSYSTABLES , SPSYSPROCEDURES ) Built-in system functions: Provides built-in system functions (e.g. SCOPE_IDENTITY() ) Query Transact-SQL support: Provides the ability to use Transact-SQL language to manage data from the database. Multi line insert support: Insert multiple rows using single insert statement. Caching Caching support: Includes in-memory caching for improving the performance by reducing the effort required to generate content. Error handling Exceptions: Provides helpful error messages."
  },
  "api/CB.Connector.Command.DataHandler.OrderBy.html": {
    "href": "api/CB.Connector.Command.DataHandler.OrderBy.html",
    "title": "Class OrderBy | CB Connector SDK website",
    "keywords": "Class OrderBy Provides an abstract class for defining order by clause. Inheritance System.Object DataHandler DataFilter OrderBy Implements IDataHandler System.IDisposable Inherited Members DataHandler.Previous DataHandler.ResultColumns DataHandler.GetAllColumns(String) DataHandler.Elements DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class OrderBy : DataFilter, IDataHandler, IDisposable Remarks The responsibility of order by clause is to order the selected rows based on one or more attributes. Properties Arguments Represents an OrderByArguments object defined for the OrderBy object. Declaration public OrderByArguments Arguments { get; } Property Value Type Description OrderByArguments An OrderByArguments object that represents the data handler’s state. Methods Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override sealed bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Overrides DataHandler.Init(IDataHandlerArguments) Implements IDataHandler System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataFilter"
  },
  "api/CB.Connector.Command.DataHandler.CrossJoin.html": {
    "href": "api/CB.Connector.Command.DataHandler.CrossJoin.html",
    "title": "Class CrossJoin | CB Connector SDK website",
    "keywords": "Class CrossJoin Provides an abstract class for cross join clause. Inheritance System.Object DataHandler DataSource Join CrossJoin Implements IDataHandler System.IDisposable INamedElement IElement Inherited Members Join.Arguments Join.Init(IDataHandlerArguments) Join.Elements Join.ResultColumns Join.GetAllColumns(String) DataSource.Description DataSource.Name DataSource.QualifiedName DataSource.Owner DataSource.OriginalName DataHandler.Previous DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class CrossJoin : Join, IDataHandler, IDisposable, INamedElement, IElement Remarks A cross join does Cartesian Product between two or more tables. Implements IDataHandler System.IDisposable INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also Join"
  },
  "api/CB.Connector.Command.DataHandler.BaseDataSink.html": {
    "href": "api/CB.Connector.Command.DataHandler.BaseDataSink.html",
    "title": "Class BaseDataSink | CB Connector SDK website",
    "keywords": "Class BaseDataSink Represents the base data sink, which consumes the output data (that is, the result of the complete computation). Inheritance System.Object DataHandler DataSink BaseDataSink Aggregate SelectSink Implements IDataHandler System.IDisposable Inherited Members DataHandler.Previous DataHandler.Init(IDataHandlerArguments) DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class BaseDataSink : DataSink, IDataHandler, IDisposable Constructors BaseDataSink() Constructor. Initializes a new instance of the BaseDataSink class. Declaration protected BaseDataSink() Properties Elements Gets the collection of elements defined in the metadata. Declaration public override IElementCollection<IColumnArgument> Elements { get; } Property Value Type Description IElementCollection < IColumnArgument > The collection of elements defined in the metadata. Overrides DataHandler.Elements ResultColumns Gets the collection of columns that belong to the result set. Declaration public override ICollection<IColumnArgument> ResultColumns { get; } Property Value Type Description System.Collections.Generic.ICollection < IColumnArgument > The collection of columns that belong to the result set. Overrides DataHandler.ResultColumns Methods GetAllColumns(String) Gets the collection of columns that are used by next handlers. Declaration public override ICollection<IColumnArgument> GetAllColumns(string nameFilter) Parameters Type Name Description System.String nameFilter Returns Type Description System.Collections.Generic.ICollection < IColumnArgument > The collection of columns that are used by next handlers. Overrides DataHandler.GetAllColumns(String) Implements IDataHandler System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataSink"
  },
  "api/CB.Connector.Command.DataHandler.Having.html": {
    "href": "api/CB.Connector.Command.DataHandler.Having.html",
    "title": "Class Having | CB Connector SDK website",
    "keywords": "Class Having Provides an abstract class for defining having clause. Inheritance System.Object DataHandler DataFilter Having Implements IDataHandler System.IDisposable Inherited Members DataHandler.Previous DataHandler.ResultColumns DataHandler.GetAllColumns(String) DataHandler.Elements DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class Having : DataFilter, IDataHandler, IDisposable Remarks The responsibility of having clause is to restrict the selection of grouped rows based on a search criterion. Properties Arguments Represents an HavingArguments object defined for the Having object. Declaration public HavingArguments Arguments { get; } Property Value Type Description HavingArguments An HavingArguments object that represents the data handler’s state. Methods Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override sealed bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Overrides DataHandler.Init(IDataHandlerArguments) Implements IDataHandler System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataFilter"
  },
  "api/CB.Connector.Command.DataHandler.FullJoin.html": {
    "href": "api/CB.Connector.Command.DataHandler.FullJoin.html",
    "title": "Class FullJoin | CB Connector SDK website",
    "keywords": "Class FullJoin Provides an abstract class for defining full join clause. Inheritance System.Object DataHandler DataSource Join FullJoin Implements IDataHandler System.IDisposable INamedElement IElement Inherited Members Join.Arguments Join.Init(IDataHandlerArguments) Join.Elements Join.ResultColumns Join.GetAllColumns(String) DataSource.Description DataSource.Name DataSource.QualifiedName DataSource.Owner DataSource.OriginalName DataHandler.Previous DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class FullJoin : Join, IDataHandler, IDisposable, INamedElement, IElement Remarks The responsibility of full join clause is to return all records when there is a match in either left or right table records. Implements IDataHandler System.IDisposable INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also Join"
  },
  "api/CB.Connector.Command.DataHandler.DataSink.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataSink.html",
    "title": "Class DataSink | CB Connector SDK website",
    "keywords": "Class DataSink Represents the data sink, which consumes the output data (that is, the result of the complete computation). Inheritance System.Object DataHandler DataSink BaseDataSink DeleteSink ExecuteSink InsertSink UpdateSink Implements IDataHandler System.IDisposable Inherited Members DataHandler.Previous DataHandler.ResultColumns DataHandler.GetAllColumns(String) DataHandler.Elements DataHandler.Init(IDataHandlerArguments) DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class DataSink : DataHandler, IDataHandler, IDisposable Implements IDataHandler System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandler"
  },
  "api/CB.Connector.Command.DataHandler.Aggregate.html": {
    "href": "api/CB.Connector.Command.DataHandler.Aggregate.html",
    "title": "Class Aggregate | CB Connector SDK website",
    "keywords": "Class Aggregate Provides an abstract class for defining aggregate functions and group by clause. Inheritance System.Object DataHandler DataSink BaseDataSink Aggregate Implements IDataHandler System.IDisposable Inherited Members BaseDataSink.Elements BaseDataSink.ResultColumns BaseDataSink.GetAllColumns(String) DataHandler.Previous DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class Aggregate : BaseDataSink, IDataHandler, IDisposable Remarks An aggregate function performs a calculation on a set of values and returns a single value. The responsibility of group by clause is to group the selected rows based on one or more attributes. Properties Arguments Represents an AggregateArguments object defined for the Aggregate object. Declaration public AggregateArguments Arguments { get; } Property Value Type Description AggregateArguments An AggregateArguments object that represents the data handler’s state. Methods Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override sealed bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Overrides DataHandler.Init(IDataHandlerArguments) Implements IDataHandler System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also BaseDataSink"
  },
  "api/CB.Connector.Command.DataHandler.InsertSink.html": {
    "href": "api/CB.Connector.Command.DataHandler.InsertSink.html",
    "title": "Class InsertSink | CB Connector SDK website",
    "keywords": "Class InsertSink Provides an abstract class for defining insert statement. Inheritance System.Object DataHandler DataSink InsertSink Implements IDataHandler System.IDisposable Inherited Members DataHandler.Previous DataHandler.ResultColumns DataHandler.GetAllColumns(String) DataHandler.Elements DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class InsertSink : DataSink, IDataHandler, IDisposable Remarks The responsibility of insert statement is to add one or more rows of data to the data source. Properties Arguments Represents an InsertSinkArguments object defined for the InsertSink object. Declaration public InsertSinkArguments Arguments { get; } Property Value Type Description InsertSinkArguments An InsertSinkArguments object that represents the data handler’s state. Methods Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override sealed bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Overrides DataHandler.Init(IDataHandlerArguments) Implements IDataHandler System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataSink"
  },
  "api/CB.Connector.Command.DataHandler.InnerJoin.html": {
    "href": "api/CB.Connector.Command.DataHandler.InnerJoin.html",
    "title": "Class InnerJoin | CB Connector SDK website",
    "keywords": "Class InnerJoin Provides an abstract class for defining inner join clause. Inheritance System.Object DataHandler DataSource Join InnerJoin Implements IDataHandler System.IDisposable INamedElement IElement Inherited Members Join.Arguments Join.Init(IDataHandlerArguments) Join.Elements Join.ResultColumns Join.GetAllColumns(String) DataSource.Description DataSource.Name DataSource.QualifiedName DataSource.Owner DataSource.OriginalName DataHandler.Previous DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class InnerJoin : Join, IDataHandler, IDisposable, INamedElement, IElement Remarks The responsibility of inner join clause is to select records that have matching values in both tables. Implements IDataHandler System.IDisposable INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also Join"
  },
  "api/CB.Connector.Command.DataHandler.TableFunctionSource.html": {
    "href": "api/CB.Connector.Command.DataHandler.TableFunctionSource.html",
    "title": "Class TableFunctionSource | CB Connector SDK website",
    "keywords": "Class TableFunctionSource Provides an abstract class for defining table-valued function in a parsed statement. Inheritance System.Object DataHandler DataSource TableFunctionSource Implements IDataHandler System.IDisposable INamedElement IElement Inherited Members DataHandler.Previous DataHandler.GetAllColumns(String) DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class TableFunctionSource : DataSource, IDataHandler, IDisposable, INamedElement, IElement Properties Arguments Represents an TableFunctionSourceArguments object defined for the TableFunctionSource object. Declaration public TableFunctionSourceArguments Arguments { get; } Property Value Type Description TableFunctionSourceArguments An TableFunctionSourceArguments object that represents the data handler’s state. Description Gets or sets the description defined for IElement . Declaration public override IDescriptor Description { get; set; } Property Value Type Description IDescriptor The description. Overrides DataSource.Description Elements Gets the collection of elements defined in the metadata. Declaration public override IElementCollection<IColumnArgument> Elements { get; } Property Value Type Description IElementCollection < IColumnArgument > The collection of elements defined in the metadata. Overrides DataHandler.Elements Name Gets the name of the named element. Declaration public override string Name { get; } Property Value Type Description System.String The name of the named element. Overrides DataSource.Name Remarks Must not exceed 128 characters OriginalName Gets or sets the original name of the source element. Declaration public override string OriginalName { get; } Property Value Type Description System.String The full name of the source element. Returns {account_name.schema_name.element_name}. Overrides DataSource.OriginalName Owner Gets or sets the owner of the named element. Declaration public override INamedElement Owner { get; set; } Property Value Type Description INamedElement A System.String value that specifies the owner of the named element. Overrides DataSource.Owner QualifiedName Gets the name that allows the named element to be identified within a hierarchy of nested namespaces. Declaration public override string QualifiedName { get; } Property Value Type Description System.String The qualified name. Overrides DataSource.QualifiedName Remarks It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the named element itself. ResultColumns Gets the collection of columns that belong to the result set. Declaration public override ICollection<IColumnArgument> ResultColumns { get; } Property Value Type Description System.Collections.Generic.ICollection < IColumnArgument > The collection of columns that belong to the result set. Overrides DataHandler.ResultColumns Methods Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override sealed bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Overrides DataHandler.Init(IDataHandlerArguments) Implements IDataHandler System.IDisposable INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also DataSource"
  },
  "api/CB.Connector.Command.DataHandler.Limit.html": {
    "href": "api/CB.Connector.Command.DataHandler.Limit.html",
    "title": "Class Limit | CB Connector SDK website",
    "keywords": "Class Limit Provides an abstract class for defining limit and offset clauses. Inheritance System.Object DataHandler DataFilter Limit Implements IDataHandler System.IDisposable Inherited Members DataHandler.Previous DataHandler.ResultColumns DataHandler.GetAllColumns(String) DataHandler.Elements DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class Limit : DataFilter, IDataHandler, IDisposable Remarks The responsibility of limit and offset clauses is to retrieve just a portion of the data. Properties Arguments Represents an LimitArguments object defined for the Limit object. Declaration public LimitArguments Arguments { get; } Property Value Type Description LimitArguments An LimitArguments object that represents the data handler’s state. Methods Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override sealed bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Overrides DataHandler.Init(IDataHandlerArguments) Implements IDataHandler System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataFilter"
  },
  "api/CB.Connector.Command.DataHandler.LeftJoin.html": {
    "href": "api/CB.Connector.Command.DataHandler.LeftJoin.html",
    "title": "Class LeftJoin | CB Connector SDK website",
    "keywords": "Class LeftJoin Provides an abstract class for defining left join clause. Inheritance System.Object DataHandler DataSource Join LeftJoin Implements IDataHandler System.IDisposable INamedElement IElement Inherited Members Join.Arguments Join.Init(IDataHandlerArguments) Join.Elements Join.ResultColumns Join.GetAllColumns(String) DataSource.Description DataSource.Name DataSource.QualifiedName DataSource.Owner DataSource.OriginalName DataHandler.Previous DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class LeftJoin : Join, IDataHandler, IDisposable, INamedElement, IElement Remarks The responsibility of left join clause is to return all records from the left table, and the matched records from the right table. Implements IDataHandler System.IDisposable INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also Join"
  },
  "api/CB.Connector.Command.DataHandler.Join.html": {
    "href": "api/CB.Connector.Command.DataHandler.Join.html",
    "title": "Class Join | CB Connector SDK website",
    "keywords": "Class Join Provides an abstract class for defining join clause. Inheritance System.Object DataHandler DataSource Join CrossJoin FullJoin InnerJoin LeftJoin RightJoin Implements IDataHandler System.IDisposable INamedElement IElement Inherited Members DataSource.Description DataSource.Name DataSource.QualifiedName DataSource.Owner DataSource.OriginalName DataHandler.Previous DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class Join : DataSource, IDataHandler, IDisposable, INamedElement, IElement Remarks The responsibility of join clause is to combine rows from two or more tables, based on a related column between them. Constructors Join() Constructor. Initializes a new instance of the BaseDataSink class. Declaration protected Join() Properties Arguments Represents an JoinArguments object defined for the Join object. Declaration public JoinArguments Arguments { get; } Property Value Type Description JoinArguments An JoinArguments object that represents the data handler’s state. Elements Gets the collection of elements defined in the metadata. Declaration public override IElementCollection<IColumnArgument> Elements { get; } Property Value Type Description IElementCollection < IColumnArgument > The collection of elements defined in the metadata. Overrides DataHandler.Elements ResultColumns Gets the collection of columns that belong to the result set. Declaration public override ICollection<IColumnArgument> ResultColumns { get; } Property Value Type Description System.Collections.Generic.ICollection < IColumnArgument > The collection of columns that belong to the result set. Overrides DataHandler.ResultColumns Methods GetAllColumns(String) Gets the collection of columns that are used by next handlers. Declaration public override ICollection<IColumnArgument> GetAllColumns(string nameFilter) Parameters Type Name Description System.String nameFilter Returns Type Description System.Collections.Generic.ICollection < IColumnArgument > The collection of columns that are used by next handlers. Overrides DataHandler.GetAllColumns(String) Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override sealed bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Overrides DataHandler.Init(IDataHandlerArguments) Implements IDataHandler System.IDisposable INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also DataSource"
  },
  "api/CB.Connector.Command.DataHandler.DeleteSink.html": {
    "href": "api/CB.Connector.Command.DataHandler.DeleteSink.html",
    "title": "Class DeleteSink | CB Connector SDK website",
    "keywords": "Class DeleteSink Provides an abstract class for defining delete statement. Inheritance System.Object DataHandler DataSink DeleteSink Implements IDataHandler System.IDisposable Inherited Members DataHandler.Previous DataHandler.ResultColumns DataHandler.GetAllColumns(String) DataHandler.Elements DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class DeleteSink : DataSink, IDataHandler, IDisposable Remarks The responsibility of a delete statement is to remove one or more rows of data from the data source. Properties Arguments Represents an DeleteSinkArguments object defined for the DeleteSink object. Declaration public DeleteSinkArguments Arguments { get; } Property Value Type Description DeleteSinkArguments An DeleteSinkArguments object that represents the data handler’s state. Methods Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override sealed bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Overrides DataHandler.Init(IDataHandlerArguments) Implements IDataHandler System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataSink"
  },
  "api/CB.Connector.Command.DataHandler.DataSource.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataSource.html",
    "title": "Class DataSource | CB Connector SDK website",
    "keywords": "Class DataSource Represents a source element, which provides input data. Inheritance System.Object DataHandler DataSource Join SubQuery TableFunctionSource TableSource Implements IDataHandler System.IDisposable INamedElement IElement Inherited Members DataHandler.Previous DataHandler.ResultColumns DataHandler.GetAllColumns(String) DataHandler.Elements DataHandler.Init(IDataHandlerArguments) DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class DataSource : DataHandler, IDataHandler, IDisposable, INamedElement, IElement Properties Description Gets or sets the description defined for IElement . Declaration public virtual IDescriptor Description { get; set; } Property Value Type Description IDescriptor The description. Name Gets the name of the named element. Declaration public virtual string Name { get; protected set; } Property Value Type Description System.String The name of the named element. Remarks Must not exceed 128 characters OriginalName Gets or sets the original name of the source element. Declaration public virtual string OriginalName { get; protected set; } Property Value Type Description System.String The full name of the source element. Returns {account_name.schema_name.element_name}. Owner Gets or sets the owner of the named element. Declaration public virtual INamedElement Owner { get; set; } Property Value Type Description INamedElement A System.String value that specifies the owner of the named element. QualifiedName Gets the name that allows the named element to be identified within a hierarchy of nested namespaces. Declaration public virtual string QualifiedName { get; protected set; } Property Value Type Description System.String The qualified name. Remarks It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the named element itself. Implements IDataHandler System.IDisposable INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also DataHandler INamedElement"
  },
  "api/CB.Connector.Collections.IRequestedElementCollection-1.html": {
    "href": "api/CB.Connector.Collections.IRequestedElementCollection-1.html",
    "title": "Interface IRequestedElementCollection<T> | CB Connector SDK website",
    "keywords": "Interface IRequestedElementCollection<T> Represents a generic collection of key/value pairs that can be individually accessed by index and by key. It collects elements that were requested by TryGetValue method (or added by Add method with requested flag) Inherited Members IElementCollection<T>.TryGetValue<TValue>(String, TValue) System.Collections.Generic.ICollection<T>.Add(T) System.Collections.Generic.ICollection<T>.Clear() System.Collections.Generic.ICollection<T>.Contains(T) System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) System.Collections.Generic.ICollection<T>.Remove(T) System.Collections.Generic.ICollection<T>.Count System.Collections.Generic.ICollection<T>.IsReadOnly System.Collections.Generic.IEnumerable<T>.GetEnumerator() IIndexableCollection<String, T>.Item[String] IIndexableCollection<String, T>.Item[Int32] IIndexableCollection<String, T>.Values IIndexableCollection<String, T>.Contains(String) IIndexableCollection<String, T>.GetKeyForItem(T) Namespace : CB.Connector.Collections Assembly : CB.Connector.dll Syntax public interface IRequestedElementCollection<T> : IElementCollection<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IIndexableCollection<string, T> Type Parameters Name Description T The type of elements in the collection. Methods GetAllElements(String) Gets an System.Collections.Generic.ICollection<T> containing the all elements in the IIndexableCollection<TKey, TValue> . Declaration ICollection<T> GetAllElements(string filterName) Parameters Type Name Description System.String filterName Returns Type Description System.Collections.Generic.ICollection <T> An System.Collections.Generic.ICollection<T> containing all elements in the IIndexableCollection<TKey, TValue> . Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also System.Collections.Generic.ICollection <T> System.String"
  },
  "api/CB.Connector.Collections.Classes.RequestedElementCollection.html": {
    "href": "api/CB.Connector.Collections.Classes.RequestedElementCollection.html",
    "title": "Class RequestedElementCollection | CB Connector SDK website",
    "keywords": "Class RequestedElementCollection Provides the base class for a generic collection of key/value pairs that can be individually accessed by index and by key. It collects elements that were requested by TryGetValue method (or added by Add method with requested flag) Inheritance System.Object RequestedElementCollection Implements IRequestedElementCollection < IColumnArgument > IElementCollection < IColumnArgument > System.Collections.Generic.ICollection < IColumnArgument > System.Collections.Generic.IEnumerable < IColumnArgument > System.Collections.IEnumerable IIndexableCollection < System.String , IColumnArgument > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Collections.Classes Assembly : CB.Connector.dll Syntax public class RequestedElementCollection : IRequestedElementCollection<IColumnArgument>, IElementCollection<IColumnArgument>, ICollection<IColumnArgument>, IEnumerable<IColumnArgument>, IEnumerable, IIndexableCollection<string, IColumnArgument> Constructors RequestedElementCollection(IDataHandler) Initializes a new instance of the RequestedElementCollection class. Declaration public RequestedElementCollection(IDataHandler owner) Parameters Type Name Description IDataHandler owner The owner. Properties Count Gets the number of elements contained in the RequestedElementCollection . Declaration public int Count { get; } Property Value Type Description System.Int32 The number of elements contained in the RequestedElementCollection . IsReadOnly Gets a value indicating whether the RequestedElementCollection is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean true if RequestedElementCollection is read-only; otherwise, false . Item[Int32] Gets or sets the element at the specified index. Declaration public IColumnArgument this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the element. Property Value Type Description IColumnArgument The type of the value in the collection. Exceptions Type Condition System.NotImplementedException Item[String] Gets or sets the element with the specified key. Declaration public IColumnArgument this[string key] { get; set; } Parameters Type Name Description System.String key The key of the element. Property Value Type Description IColumnArgument The type of the value in the collection. Values Gets a collection containing the values in the RequestedElementCollection . Declaration public ICollection<IColumnArgument> Values { get; } Property Value Type Description System.Collections.Generic.ICollection < IColumnArgument > A collection containing the values in the RequestedElementCollection . Methods Add(IColumnArgument) Adds an item to the RequestedElementCollection . Declaration public void Add(IColumnArgument item) Parameters Type Name Description IColumnArgument item The object to add to the RequestedElementCollection . Add(IColumnArgument, Boolean) Adds an item to the RequestedElementCollection . Declaration public void Add(IColumnArgument item, bool requested) Parameters Type Name Description IColumnArgument item The object to add to the RequestedElementCollection . System.Boolean requested true if requested; otherwise, false . Clear() Removes all items from the RequestedElementCollection . Declaration public void Clear() Contains(IColumnArgument) Determines whether the RequestedElementCollection contains a specific value. Declaration public bool Contains(IColumnArgument item) Parameters Type Name Description IColumnArgument item The object to locate in the RequestedElementCollection . Returns Type Description System.Boolean true if item is found in the RequestedElementCollection ; otherwise, false . Contains(String) Determines whether the collection contains an element with the specified key. Declaration public bool Contains(string key) Parameters Type Name Description System.String key The key to locate in the RequestedElementCollection . Returns Type Description System.Boolean true if the RequestedElementCollection contains an element with the key; otherwise, false . CopyTo(IColumnArgument[], Int32) Copies the elements of the RequestedElementCollection to an System.Array , starting at a particular System.Array index. Declaration public void CopyTo(IColumnArgument[] array, int arrayIndex) Parameters Type Name Description IColumnArgument [] array The one-dimensional System.Array that is the destination of the elements copied from RequestedElementCollection . The System.Array must have zero-based indexing. System.Int32 arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition System.IndexOutOfRangeException GetAllElements(String) Gets a collection containing the all elements in the RequestedElementCollection . Declaration public ICollection<IColumnArgument> GetAllElements(string filterName) Parameters Type Name Description System.String filterName Returns Type Description System.Collections.Generic.ICollection < IColumnArgument > A collection containing the all elements in the RequestedElementCollection . GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<IColumnArgument> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IColumnArgument > An enumerator that can be used to iterate through the collection. GetKeyForItem(IColumnArgument) Extracts the key from the specified element. Declaration public string GetKeyForItem(IColumnArgument item) Parameters Type Name Description IColumnArgument item The element from which to extract the key. Returns Type Description System.String The key for the specified element. Exceptions Type Condition System.NotImplementedException Remove(IColumnArgument) Removes the first occurrence of a specific object from the RequestedElementCollection . Declaration public bool Remove(IColumnArgument item) Parameters Type Name Description IColumnArgument item The object to remove from the RequestedElementCollection . Returns Type Description System.Boolean true if item was successfully removed from the RequestedElementCollection ; otherwise, false . This method also returns false if item is not found in the original ElementCollection<T> . TryGetValue<TValue>(String, out TValue) Gets the value of the specified type associated with the specified key. Declaration public bool TryGetValue<TValue>(string key, out TValue value) where TValue : IColumnArgument Parameters Type Name Description System.String key The key of the value to get. TValue value When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the object that implements ElementCollection<T> contains an element with the specified key; otherwise, false . Type Parameters Name Description TValue The type of the value to get. Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IRequestedElementCollection<T> IElementCollection<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IIndexableCollection<TKey, TValue> Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IRequestedElementCollection <T>"
  },
  "api/CB.Connector.Command.Command.html": {
    "href": "api/CB.Connector.Command.Command.html",
    "title": "Class Command | CB Connector SDK website",
    "keywords": "Class Command Provides an abstract class for ICommand . Inheritance System.Object Command Statement Implements ICommand Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command Assembly : CB.Connector.dll Syntax public abstract class Command : ICommand Methods Execute(IResultSetLoader, IExecutionContext) Defines the method to be called when the command is invoked. Declaration public abstract void Execute(IResultSetLoader loader, IExecutionContext context) Parameters Type Name Description IResultSetLoader loader The loader used to load a valid result expected by the CB Server. IExecutionContext context The contextual information passed to the plug-in at runtime. Remarks Executes the query and builds an IResultSetLoader . Init(IDataHandler) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public abstract void Init(IDataHandler dataHandler) Parameters Type Name Description IDataHandler dataHandler An IDataHandler object. Implements ICommand Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also ICommand"
  },
  "api/CB.Connector.Command.DataHandler.html": {
    "href": "api/CB.Connector.Command.DataHandler.html",
    "title": "Namespace CB.Connector.Command.DataHandler | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Command.DataHandler Classes Aggregate Provides an abstract class for defining aggregate functions and group by clause. BaseDataSink Represents the base data sink, which consumes the output data (that is, the result of the complete computation). CrossJoin Provides an abstract class for cross join clause. DataFilter Represents the data filter that encapsulates a processing step (algorithm). DataHandler Provides an abstract class for IDataHandler . DataSink Represents the data sink, which consumes the output data (that is, the result of the complete computation). DataSource Represents a source element, which provides input data. DeleteSink Provides an abstract class for defining delete statement. Distinct Provides an abstract class for defining distinct clause. ExecuteSink Provides an abstract class for defining execute statement. FullJoin Provides an abstract class for defining full join clause. Having Provides an abstract class for defining having clause. InnerJoin Provides an abstract class for defining inner join clause. InsertSink Provides an abstract class for defining insert statement. Join Provides an abstract class for defining join clause. LeftJoin Provides an abstract class for defining left join clause. Limit Provides an abstract class for defining limit and offset clauses. OrderBy Provides an abstract class for defining order by clause. RightJoin Provides an abstract class for defining right join clause. SelectSink Provides an abstract class for defining select statement. SubQuery Provides an abstract class for defining sub-query (regular query placed inside parenthesis). TableFunctionSource Provides an abstract class for defining table-valued function in a parsed statement. TableSource Provides an abstract class for defining reference table(s) in a parsed statement. UpdateSink Provides an abstract class for defining update statement. Where Provides an abstract class for defining where clause."
  },
  "api/CB.Connector.Command.Interfaces.ICommand.html": {
    "href": "api/CB.Connector.Command.Interfaces.ICommand.html",
    "title": "Interface ICommand | CB Connector SDK website",
    "keywords": "Interface ICommand Represents a Transact-SQL statement or stored procedure to execute against a data source. Namespace : CB.Connector.Command.Interfaces Assembly : CB.Connector.dll Syntax public interface ICommand Methods Execute(IResultSetLoader, IExecutionContext) Defines the method to be called when the command is invoked. Declaration void Execute(IResultSetLoader loader, IExecutionContext context) Parameters Type Name Description IResultSetLoader loader The loader used to load a valid result expected by the CB Server. IExecutionContext context The contextual information passed to the plug-in at runtime. Remarks Executes the query and builds an IResultSetLoader . Init(IDataHandler) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration void Init(IDataHandler dataHandler) Parameters Type Name Description IDataHandler dataHandler An IDataHandler object. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Command.Interfaces.IExecutionContext.html": {
    "href": "api/CB.Connector.Command.Interfaces.IExecutionContext.html",
    "title": "Interface IExecutionContext | CB Connector SDK website",
    "keywords": "Interface IExecutionContext Defines the contextual information passed to a plug-in at runtime. Namespace : CB.Connector.Command.Interfaces Assembly : CB.Connector.dll Syntax public interface IExecutionContext Properties CancellationToken Gets the cancellation token. Declaration CancellationToken CancellationToken { get; } Property Value Type Description System.Threading.CancellationToken Returns a CancellationToken object. Remarks A CancellationToken enables cooperative cancellation between threads. CurrentHandler Gets the current handler in the pipeline, which is used to resolve columns in projections or expressions. Declaration IDataHandler CurrentHandler { get; set; } Property Value Type Description IDataHandler The current handler in the pipeline, which is used to resolve columns in projections or expressions. Id Gets the identifier. Declaration Guid Id { get; } Property Value Type Description System.Guid ResultFormatter Gets the component for formatting data that belong to the result set. Declaration IResultFormatter ResultFormatter { get; } Property Value Type Description IResultFormatter Methods AddAdditionalCurrentHandler(IDataHandler) Adds additional current handler in case of join statement /// Declaration void AddAdditionalCurrentHandler(IDataHandler handler) Parameters Type Name Description IDataHandler handler GetAllVariables() Retrieves a list of the Variable s. Declaration IList<Variable> GetAllVariables() Returns Type Description System.Collections.Generic.IList < Variable > GetVariableValue(Variable) Returns the value of a specified Variable . Declaration object GetVariableValue(Variable variable) Parameters Type Name Description Variable variable The object whose value will be returned. Returns Type Description System.Object OpenScopeIdentityLoader(IColumnArgument[]) Opens an ITableResultLoader object for writing. Declaration ITableResultLoader OpenScopeIdentityLoader(params IColumnArgument[] columns) Parameters Type Name Description IColumnArgument [] columns The collection of columns that belong to the result set. Returns Type Description ITableResultLoader A new ITableResultLoader instance. Remarks The scope_identity() function returns the last identity value(s) inserted into one or multiple column(s) in the same scope. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Command.Interfaces.html": {
    "href": "api/CB.Connector.Command.Interfaces.html",
    "title": "Namespace CB.Connector.Command.Interfaces | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Command.Interfaces Interfaces ICommand Represents a Transact-SQL statement or stored procedure to execute against a data source. IExecutionContext Defines the contextual information passed to a plug-in at runtime."
  },
  "api/CB.Connector.html": {
    "href": "api/CB.Connector.html",
    "title": "Namespace CB.Connector | CB Connector SDK website",
    "keywords": "Namespace CB.Connector Interfaces IConnector Provides a base interface to specify the backbone of a functional connector. IConnector<TProperty, TSession> Provides a generic interface for IConnector . IDataHandlerFactory Factory implementation that always creates IDataHandler objects. ISession Provides a base interface for defining a CB command session that is an occurrence of a user interacting with a relational database, where the occurrence is a single command. Enums SessionState Represents an enumeration that defines literals used to describe the current state of the connection to a data source."
  },
  "api/CB.Connector.Classes.DataHandlerFactory.html": {
    "href": "api/CB.Connector.Classes.DataHandlerFactory.html",
    "title": "Class DataHandlerFactory | CB Connector SDK website",
    "keywords": "Class DataHandlerFactory Provides an abstract class for IDataHandlerFactory . Inheritance System.Object DataHandlerFactory Implements IDataHandlerFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Classes Assembly : CB.Connector.dll Syntax public abstract class DataHandlerFactory : IDataHandlerFactory Methods TryCreate(out Aggregate) Creates a new Aggregate instance. Declaration public abstract bool TryCreate(out Aggregate handler) Parameters Type Name Description Aggregate handler When this method returns, contains a new Aggregate instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the Aggregate was successfully created; otherwise, false . TryCreate(out CrossJoin) Creates a new CrossJoin instance. Declaration public abstract bool TryCreate(out CrossJoin handler) Parameters Type Name Description CrossJoin handler When this method returns, contains a new CrossJoin instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the CrossJoin was successfully created; otherwise, false . TryCreate(out DeleteSink) Creates a new DeleteSink instance. Declaration public abstract bool TryCreate(out DeleteSink handler) Parameters Type Name Description DeleteSink handler When this method returns, contains a new DeleteSink instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the DeleteSink was successfully created; otherwise, false . TryCreate(out Distinct) Creates a new Distinct instance. Declaration public abstract bool TryCreate(out Distinct handler) Parameters Type Name Description Distinct handler When this method returns, contains a new Distinct instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the Distinct was successfully created; otherwise, false . TryCreate(out ExecuteSink) Creates a new ExecuteSink instance. Declaration public abstract bool TryCreate(out ExecuteSink handler) Parameters Type Name Description ExecuteSink handler When this method returns, contains a new ExecuteSink instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the ExecuteSink was successfully created; otherwise, false . TryCreate(out FullJoin) Creates a new FullJoin instance. Declaration public abstract bool TryCreate(out FullJoin handler) Parameters Type Name Description FullJoin handler When this method returns, contains a new FullJoin instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the FullJoin was successfully created; otherwise, false . TryCreate(out Having) Creates a new Having instance. Declaration public abstract bool TryCreate(out Having handler) Parameters Type Name Description Having handler When this method returns, contains a new Having instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the Having was successfully created; otherwise, false . TryCreate(out InnerJoin) Creates a new InnerJoin instance. Declaration public abstract bool TryCreate(out InnerJoin handler) Parameters Type Name Description InnerJoin handler When this method returns, contains a new InnerJoin instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the InnerJoin was successfully created; otherwise, false . TryCreate(out InsertSink) Creates a new InsertSink instance. Declaration public abstract bool TryCreate(out InsertSink handler) Parameters Type Name Description InsertSink handler When this method returns, contains a new InsertSink instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the InsertSink was successfully created; otherwise, false . TryCreate(out LeftJoin) Creates a new LeftJoin instance. Declaration public abstract bool TryCreate(out LeftJoin handler) Parameters Type Name Description LeftJoin handler When this method returns, contains a new LeftJoin instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the LeftJoin was successfully created; otherwise, false . TryCreate(out Limit) Creates a new Limit instance. Declaration public abstract bool TryCreate(out Limit handler) Parameters Type Name Description Limit handler When this method returns, contains a new Limit instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the Limit was successfully created; otherwise, false . TryCreate(out OrderBy) Creates a new OrderBy instance. Declaration public abstract bool TryCreate(out OrderBy handler) Parameters Type Name Description OrderBy handler When this method returns, contains a new OrderBy instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the OrderBy was successfully created; otherwise, false . TryCreate(out RightJoin) Creates a new RightJoin instance. Declaration public abstract bool TryCreate(out RightJoin handler) Parameters Type Name Description RightJoin handler When this method returns, contains a new RightJoin instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the RightJoin was successfully created; otherwise, false . TryCreate(out SelectSink) Creates a new SelectSink instance. Declaration public abstract bool TryCreate(out SelectSink handler) Parameters Type Name Description SelectSink handler When this method returns, contains a new SelectSink instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the SelectSink was successfully created; otherwise, false . TryCreate(out SubQuery) Creates a new SubQuery instance. Declaration public abstract bool TryCreate(out SubQuery handler) Parameters Type Name Description SubQuery handler When this method returns, contains a new SubQuery instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the SubQuery was successfully created; otherwise, false . TryCreate(out TableFunctionSource) Creates a new TableFunctionSource instance. Declaration public abstract bool TryCreate(out TableFunctionSource handler) Parameters Type Name Description TableFunctionSource handler When this method returns, contains a new TableFunctionSource instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the TableFunctionSource was successfully created; otherwise, false . TryCreate(out TableSource) Creates a new TableSource instance. Declaration public abstract bool TryCreate(out TableSource handler) Parameters Type Name Description TableSource handler When this method returns, contains a new TableSource instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the TableSource was successfully created; otherwise, false . TryCreate(out UpdateSink) Creates a new UpdateSink instance. Declaration public abstract bool TryCreate(out UpdateSink handler) Parameters Type Name Description UpdateSink handler When this method returns, contains a new UpdateSink instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the UpdateSink was successfully created; otherwise, false . TryCreate(out Where) Creates a new Where instance. Declaration public abstract bool TryCreate(out Where handler) Parameters Type Name Description Where handler When this method returns, contains a new Where instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the Where was successfully created; otherwise, false . TryCreate<T>(out T, Object[]) Creates an instance of the specified type using the constructor that best matches the specified parameters. Declaration public bool TryCreate<T>(out T handler, params object[] args) Parameters Type Name Description T handler When this method returns, contains a reference to the newly created object. System.Object [] args An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If args is an empty array or null , the the default constructor is invoked. Returns Type Description System.Boolean Type Parameters Name Description T The type of object to create. Implements IDataHandlerFactory Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IDataHandlerFactory"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.AssignArgumentsFromHandler.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.AssignArgumentsFromHandler.html",
    "title": "Class AssignArgumentsFromHandler | CB Connector SDK website",
    "keywords": "Class AssignArgumentsFromHandler Provides a base class for AssignArguments . Inheritance System.Object AssignArguments AssignArgumentsFromHandler Inherited Members AssignArguments.AssignedPairs System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public sealed class AssignArgumentsFromHandler : AssignArguments Constructors AssignArgumentsFromHandler(IEnumerable<KeyValuePair<IColumnArgument, IArgument>>, IDataHandler) Initializes a new instance of the AssignArgumentsFromHandler class. Declaration public AssignArgumentsFromHandler(IEnumerable<KeyValuePair<IColumnArgument, IArgument>> args, IDataHandler from) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < IColumnArgument , IArgument >> args The enumerable of column/argument pairs. IDataHandler from An IDataHandler object that follows the from clause. Properties From Gets an IDataHandler object that follows the from clause. Declaration public IDataHandler From { get; } Property Value Type Description IDataHandler Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also AssignArguments"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.HavingArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.HavingArguments.html",
    "title": "Class HavingArguments | CB Connector SDK website",
    "keywords": "Class HavingArguments Provides a base class that encapsulates information for Having object. Inheritance System.Object DataHandlerArguments HavingArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public sealed class HavingArguments : DataHandlerArguments, IDataHandlerArguments Constructors HavingArguments(IFilterCriteria) Initializes a new instance of the HavingArguments class. Declaration public HavingArguments(IFilterCriteria filter) Parameters Type Name Description IFilterCriteria filter The search criteria that follows the having clause. Properties Filter Gets the search criteria that follows the having clause. Declaration public IFilterCriteria Filter { get; } Property Value Type Description IFilterCriteria Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandlerArguments"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.InsertSinkArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.InsertSinkArguments.html",
    "title": "Class InsertSinkArguments | CB Connector SDK website",
    "keywords": "Class InsertSinkArguments Provides a base class that encapsulates information for InsertSink object. Inheritance System.Object DataHandlerArguments InsertSinkArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public sealed class InsertSinkArguments : DataHandlerArguments, IDataHandlerArguments Constructors InsertSinkArguments(List<IColumnArgument>) Initializes a new instance of the InsertSinkArguments class. Declaration public InsertSinkArguments(List<IColumnArgument> columns = null) Parameters Type Name Description System.Collections.Generic.List < IColumnArgument > columns The collection of columns that follow insert into clause. Properties Columns Gets a collection of source columns that follow insert into clause, whose value is passed. Declaration public List<IColumnArgument> Columns { get; } Property Value Type Description System.Collections.Generic.List < IColumnArgument > Values Gets or sets a collection of values that follow values clause. Each value corresponds to a specific column. Declaration public Set Values { get; set; } Property Value Type Description Set Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandlerArguments"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.SelectSinkArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.SelectSinkArguments.html",
    "title": "Class SelectSinkArguments | CB Connector SDK website",
    "keywords": "Class SelectSinkArguments Provides a base class that encapsulates information for SelectSink object. Inheritance System.Object DataHandlerArguments SelectSinkArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public sealed class SelectSinkArguments : DataHandlerArguments, IDataHandlerArguments Constructors SelectSinkArguments(ICollection<IColumnArgument>) Initializes a new instance of the SelectSinkArguments class. Declaration public SelectSinkArguments(ICollection<IColumnArgument> columns) Parameters Type Name Description System.Collections.Generic.ICollection < IColumnArgument > columns The collection of columns that follow select clause. Properties Columns Gets or sets a collection of columns that follow select clause. Declaration public ICollection<IColumnArgument> Columns { get; } Property Value Type Description System.Collections.Generic.ICollection < IColumnArgument > Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandlerArguments"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.SubQueryArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.SubQueryArguments.html",
    "title": "Class SubQueryArguments | CB Connector SDK website",
    "keywords": "Class SubQueryArguments Provides a base class that encapsulates information for SubQuery object. Inheritance System.Object DataHandlerArguments SubQueryArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public sealed class SubQueryArguments : DataHandlerArguments, IDataHandlerArguments Constructors SubQueryArguments(Statement) Initializes a new instance of the SubQueryArguments class. Declaration public SubQueryArguments(Statement statement) Parameters Type Name Description Statement statement The statement. Properties Statement Gets or sets the statement. Declaration public Statement Statement { get; set; } Property Value Type Description Statement Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandlerArguments"
  },
  "api/CB.Connector.Command.DataHandler.Interfaces.html": {
    "href": "api/CB.Connector.Command.DataHandler.Interfaces.html",
    "title": "Namespace CB.Connector.Command.DataHandler.Interfaces | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Command.DataHandler.Interfaces Interfaces IDataHandler Provides a consistent interface for defining a parsed statement; that is, the parts from which it is constructed and how those parts are arranged. It represents commands that can operate on the data within a data source. IDataHandlerArguments Provides a base interface that Encapsulates information regarding a specific data handler."
  },
  "api/CB.Connector.IDataHandlerFactory.html": {
    "href": "api/CB.Connector.IDataHandlerFactory.html",
    "title": "Interface IDataHandlerFactory | CB Connector SDK website",
    "keywords": "Interface IDataHandlerFactory Factory implementation that always creates IDataHandler objects. Namespace : CB.Connector Assembly : CB.Connector.dll Syntax public interface IDataHandlerFactory Remarks A class that implements the IDataHandlerFactory interface has no behavior except to manufacture new instances of classes that implement the IDataHandler interface. Methods TryCreate(out Aggregate) Creates a new Aggregate instance. Declaration bool TryCreate(out Aggregate handler) Parameters Type Name Description Aggregate handler When this method returns, contains a new Aggregate instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the Aggregate was successfully created; otherwise, false . TryCreate(out CrossJoin) Creates a new CrossJoin instance. Declaration bool TryCreate(out CrossJoin handler) Parameters Type Name Description CrossJoin handler When this method returns, contains a new CrossJoin instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the CrossJoin was successfully created; otherwise, false . TryCreate(out DeleteSink) Creates a new DeleteSink instance. Declaration bool TryCreate(out DeleteSink handler) Parameters Type Name Description DeleteSink handler When this method returns, contains a new DeleteSink instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the DeleteSink was successfully created; otherwise, false . TryCreate(out Distinct) Creates a new Distinct instance. Declaration bool TryCreate(out Distinct handler) Parameters Type Name Description Distinct handler When this method returns, contains a new Distinct instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the Distinct was successfully created; otherwise, false . TryCreate(out ExecuteSink) Creates a new ExecuteSink instance. Declaration bool TryCreate(out ExecuteSink handler) Parameters Type Name Description ExecuteSink handler When this method returns, contains a new ExecuteSink instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the ExecuteSink was successfully created; otherwise, false . TryCreate(out FullJoin) Creates a new FullJoin instance. Declaration bool TryCreate(out FullJoin handler) Parameters Type Name Description FullJoin handler When this method returns, contains a new FullJoin instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the FullJoin was successfully created; otherwise, false . TryCreate(out Having) Creates a new Having instance. Declaration bool TryCreate(out Having handler) Parameters Type Name Description Having handler When this method returns, contains a new Having instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the Having was successfully created; otherwise, false . TryCreate(out InnerJoin) Creates a new InnerJoin instance. Declaration bool TryCreate(out InnerJoin handler) Parameters Type Name Description InnerJoin handler When this method returns, contains a new InnerJoin instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the InnerJoin was successfully created; otherwise, false . TryCreate(out InsertSink) Creates a new InsertSink instance. Declaration bool TryCreate(out InsertSink handler) Parameters Type Name Description InsertSink handler When this method returns, contains a new InsertSink instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the InsertSink was successfully created; otherwise, false . TryCreate(out LeftJoin) Creates a new LeftJoin instance. Declaration bool TryCreate(out LeftJoin handler) Parameters Type Name Description LeftJoin handler When this method returns, contains a new LeftJoin instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the LeftJoin was successfully created; otherwise, false . TryCreate(out Limit) Creates a new Limit instance. Declaration bool TryCreate(out Limit handler) Parameters Type Name Description Limit handler When this method returns, contains a new Limit instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the Limit was successfully created; otherwise, false . TryCreate(out OrderBy) Creates a new OrderBy instance. Declaration bool TryCreate(out OrderBy handler) Parameters Type Name Description OrderBy handler When this method returns, contains a new OrderBy instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the OrderBy was successfully created; otherwise, false . TryCreate(out RightJoin) Creates a new RightJoin instance. Declaration bool TryCreate(out RightJoin handler) Parameters Type Name Description RightJoin handler When this method returns, contains a new RightJoin instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the RightJoin was successfully created; otherwise, false . TryCreate(out SelectSink) Creates a new SelectSink instance. Declaration bool TryCreate(out SelectSink handler) Parameters Type Name Description SelectSink handler When this method returns, contains a new SelectSink instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the SelectSink was successfully created; otherwise, false . TryCreate(out SubQuery) Creates a new SubQuery instance. Declaration bool TryCreate(out SubQuery handler) Parameters Type Name Description SubQuery handler When this method returns, contains a new SubQuery instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the SubQuery was successfully created; otherwise, false . TryCreate(out TableFunctionSource) Creates a new TableFunctionSource instance. Declaration bool TryCreate(out TableFunctionSource handler) Parameters Type Name Description TableFunctionSource handler When this method returns, contains a new TableFunctionSource instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the TableFunctionSource was successfully created; otherwise, false . TryCreate(out TableSource) Creates a new TableSource instance. Declaration bool TryCreate(out TableSource handler) Parameters Type Name Description TableSource handler When this method returns, contains a new TableSource instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the TableSource was successfully created; otherwise, false . TryCreate(out UpdateSink) Creates a new UpdateSink instance. Declaration bool TryCreate(out UpdateSink handler) Parameters Type Name Description UpdateSink handler When this method returns, contains a new UpdateSink instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the UpdateSink was successfully created; otherwise, false . TryCreate(out Where) Creates a new Where instance. Declaration bool TryCreate(out Where handler) Parameters Type Name Description Where handler When this method returns, contains a new Where instance; otherwise, null . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the Where was successfully created; otherwise, false . Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.DistinctArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.DistinctArguments.html",
    "title": "Class DistinctArguments | CB Connector SDK website",
    "keywords": "Class DistinctArguments Provides a base class that encapsulates information for Distinct object. Inheritance System.Object DataHandlerArguments DistinctArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public sealed class DistinctArguments : DataHandlerArguments, IDataHandlerArguments Constructors DistinctArguments(ICollection<IColumnArgument>) Initializes a new instance of the DistinctArguments class. Declaration public DistinctArguments(ICollection<IColumnArgument> columns) Parameters Type Name Description System.Collections.Generic.ICollection < IColumnArgument > columns The collection of columns that follows the distinct clause. Properties Columns Gets a collection of columns that follows the distinct clause. Declaration public ICollection<IColumnArgument> Columns { get; } Property Value Type Description System.Collections.Generic.ICollection < IColumnArgument > Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandlerArguments"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.ExecuteSinkArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.ExecuteSinkArguments.html",
    "title": "Class ExecuteSinkArguments | CB Connector SDK website",
    "keywords": "Class ExecuteSinkArguments Provides a base class that encapsulates information for ExecuteSink object. Inheritance System.Object DataHandlerArguments ExecuteSinkArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public sealed class ExecuteSinkArguments : DataHandlerArguments, IDataHandlerArguments Constructors ExecuteSinkArguments(String, Set, IProcedure) Initializes a new instance of the ExecuteSinkArguments class. Declaration public ExecuteSinkArguments(string procedureName, Set parameters, IProcedure procedure = null) Parameters Type Name Description System.String procedureName The procedure’s name. Set parameters The parameters. IProcedure procedure The metadata. Properties Parameters Gets the collection of dissimilar values. Declaration public Set Parameters { get; } Property Value Type Description Set Procedure Gets or sets procedure that has its place on the model. Declaration public IProcedure Procedure { get; set; } Property Value Type Description IProcedure ProcedureName Gets the procedure’s name. Declaration public string ProcedureName { get; } Property Value Type Description System.String Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandlerArguments"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.UpdateSinkArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.UpdateSinkArguments.html",
    "title": "Class UpdateSinkArguments | CB Connector SDK website",
    "keywords": "Class UpdateSinkArguments Provides a base class that encapsulates information for UpdateSink object. Inheritance System.Object DataHandlerArguments UpdateSinkArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public class UpdateSinkArguments : DataHandlerArguments, IDataHandlerArguments Constructors UpdateSinkArguments(AssignArguments) Initializes a new instance of the UpdateSinkArguments class. Declaration public UpdateSinkArguments(AssignArguments arguments) Parameters Type Name Description AssignArguments arguments The collection of columns/argument pair that follows the set clause. Properties Arguments Gets the collection of columns/argument pair that follows the set clause. Declaration public AssignArguments Arguments { get; } Property Value Type Description AssignArguments Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandlerArguments"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.WhereArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.WhereArguments.html",
    "title": "Class WhereArguments | CB Connector SDK website",
    "keywords": "Class WhereArguments Provides a base class that encapsulates information for Where object. Inheritance System.Object DataHandlerArguments WhereArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public class WhereArguments : DataHandlerArguments, IDataHandlerArguments Constructors WhereArguments(IFilterCriteria) Initializes a new instance of the WhereArguments class. Declaration public WhereArguments(IFilterCriteria filter) Parameters Type Name Description IFilterCriteria filter The search criteria that follows the where clause. Properties Filter Gets the search criteria that follows the where clause. Declaration public IFilterCriteria Filter { get; } Property Value Type Description IFilterCriteria Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandlerArguments"
  },
  "api/CB.Connector.Command.Statement.html": {
    "href": "api/CB.Connector.Command.Statement.html",
    "title": "Class Statement | CB Connector SDK website",
    "keywords": "Class Statement Default implementation of Command . This class cannot be inherited. Inheritance System.Object Command Statement Implements ICommand Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command Assembly : CB.Connector.dll Syntax public sealed class Statement : Command, ICommand Properties DataHandler Gets or sets an IDataHandler object. Declaration public IDataHandler DataHandler { get; } Property Value Type Description IDataHandler An IDataHandler object. Methods Execute(IResultSetLoader, IExecutionContext) Defines the method to be called when the command is invoked. Declaration public override void Execute(IResultSetLoader loader, IExecutionContext context) Parameters Type Name Description IResultSetLoader loader The loader used to load a valid result expected by the CB Server. IExecutionContext context The contextual information passed to the plug-in at runtime. Overrides Command.Execute(IResultSetLoader, IExecutionContext) Remarks Executes the query and builds an IResultSetLoader . Init(IDataHandler) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override void Init(IDataHandler dataHandler) Parameters Type Name Description IDataHandler dataHandler An IDataHandler object. Overrides Command.Init(IDataHandler) Implements ICommand Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also Command"
  },
  "api/CB.Connector.Command.html": {
    "href": "api/CB.Connector.Command.html",
    "title": "Namespace CB.Connector.Command | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Command Classes Command Provides an abstract class for ICommand . Statement Default implementation of Command . This class cannot be inherited."
  },
  "api/CB.Connector.Collections.html": {
    "href": "api/CB.Connector.Collections.html",
    "title": "Namespace CB.Connector.Collections | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Collections Interfaces IElementCollection<T> Represents a generic collection of key/value pairs that can be individually accessed by index and by key. IIndexableCollection<TKey, TValue> Represents a generic collection of key/value pairs that can be individually accessed by index and by key. IRequestedElementCollection<T> Represents a generic collection of key/value pairs that can be individually accessed by index and by key. It collects elements that were requested by TryGetValue method (or added by Add method with requested flag)"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.AggregateArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.AggregateArguments.html",
    "title": "Class AggregateArguments | CB Connector SDK website",
    "keywords": "Class AggregateArguments Provides a base class that encapsulates information for Aggregate object. Inheritance System.Object DataHandlerArguments AggregateArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public sealed class AggregateArguments : DataHandlerArguments, IDataHandlerArguments Constructors AggregateArguments(ICollection<IColumnArgument>, ICollection<IColumnArgument>) Initializes a new instance of the AggregateArguments class. Declaration public AggregateArguments(ICollection<IColumnArgument> groupByColumns, ICollection<IColumnArgument> columns) Parameters Type Name Description System.Collections.Generic.ICollection < IColumnArgument > groupByColumns The collection of grouping columns. System.Collections.Generic.ICollection < IColumnArgument > columns The collection of aggregate columns. Properties Columns Gets the collection of column-reference whose values are calculated. Declaration public ICollection<IColumnArgument> Columns { get; } Property Value Type Description System.Collections.Generic.ICollection < IColumnArgument > GroupByColumns Gets the collection of columns that follow the group by clause. Declaration public ICollection<IColumnArgument> GroupByColumns { get; } Property Value Type Description System.Collections.Generic.ICollection < IColumnArgument > Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandlerArguments"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.AssignArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.AssignArguments.html",
    "title": "Class AssignArguments | CB Connector SDK website",
    "keywords": "Class AssignArguments Provides an abstract class that encapsulates information for UpdateSink object. Inheritance System.Object AssignArguments AssignArgumentsFromHandler DirectlyAssignArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public abstract class AssignArguments Constructors AssignArguments(IEnumerable<KeyValuePair<IColumnArgument, IArgument>>) Initializes a new instance of the AssignArguments class. Declaration protected AssignArguments(IEnumerable<KeyValuePair<IColumnArgument, IArgument>> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < IColumnArgument , IArgument >> args The enumerable of column/argument pair. Properties AssignedPairs Gets or sets the collection of column/argument pair that follows the set clause. Declaration public IEnumerable<KeyValuePair<IColumnArgument, IArgument>> AssignedPairs { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < IColumnArgument , IArgument >> Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding)"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.DeleteSinkArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.DeleteSinkArguments.html",
    "title": "Class DeleteSinkArguments | CB Connector SDK website",
    "keywords": "Class DeleteSinkArguments Provides a base class that encapsulates information for DeleteSink object. Inheritance System.Object DataHandlerArguments DeleteSinkArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public sealed class DeleteSinkArguments : DataHandlerArguments, IDataHandlerArguments Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandlerArguments"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.DirectlyAssignArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.DirectlyAssignArguments.html",
    "title": "Class DirectlyAssignArguments | CB Connector SDK website",
    "keywords": "Class DirectlyAssignArguments Provides a base class for AssignArguments . Inheritance System.Object AssignArguments DirectlyAssignArguments Inherited Members AssignArguments.AssignedPairs System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public sealed class DirectlyAssignArguments : AssignArguments Constructors DirectlyAssignArguments(IEnumerable<KeyValuePair<IColumnArgument, IArgument>>) Initializes a new instance of the DirectlyAssignArguments class. Declaration public DirectlyAssignArguments(IEnumerable<KeyValuePair<IColumnArgument, IArgument>> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < IColumnArgument , IArgument >> args The enumerable of column/argument pair. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also AssignArguments"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.JoinArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.JoinArguments.html",
    "title": "Class JoinArguments | CB Connector SDK website",
    "keywords": "Class JoinArguments Provides a base class that encapsulates information for Join object. Inheritance System.Object DataHandlerArguments JoinArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public sealed class JoinArguments : DataHandlerArguments, IDataHandlerArguments Properties Left Gets or sets the left data source. Declaration public DataSource Left { get; set; } Property Value Type Description DataSource OnCriteria Gets or sets the search criteria that follows the on clause. Declaration public IFilterCriteria OnCriteria { get; set; } Property Value Type Description IFilterCriteria Right Gets or sets the right data source. Declaration public DataSource Right { get; set; } Property Value Type Description DataSource Type Gets or sets the type of join operation. Declaration public JoinType Type { get; set; } Property Value Type Description JoinType Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandlerArguments"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.TableFunctionSourceArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.TableFunctionSourceArguments.html",
    "title": "Class TableFunctionSourceArguments | CB Connector SDK website",
    "keywords": "Class TableFunctionSourceArguments Provides a base class that encapsulates information for TableFunctionSource object. Inheritance System.Object DataHandlerArguments TableFunctionSourceArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public sealed class TableFunctionSourceArguments : DataHandlerArguments, IDataHandlerArguments Constructors TableFunctionSourceArguments(String, String, Set) Initializes a new instance of the TableFunctionSourceArguments class. Declaration public TableFunctionSourceArguments(string name, string alias, Set functionArguments) Parameters Type Name Description System.String name The name. System.String alias The alias. Set functionArguments The parameters for the function. Properties Alias Gets the alias name. Declaration public string Alias { get; } Property Value Type Description System.String Arguments Gets the parameters for the function. Declaration public Set Arguments { get; } Property Value Type Description Set Identifier Gets the identifier. Declaration public CbIdentifier Identifier { get; } Property Value Type Description CbIdentifier Metadata Gets the table-valued function that has its place on the model. Declaration public IFunction Metadata { get; } Property Value Type Description IFunction Name Gets the unique name. Declaration public string Name { get; } Property Value Type Description System.String Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandlerArguments"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.TableSourceArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.TableSourceArguments.html",
    "title": "Class TableSourceArguments | CB Connector SDK website",
    "keywords": "Class TableSourceArguments Provides a base class that encapsulates information for TableSource object. Inheritance System.Object DataHandlerArguments TableSourceArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public sealed class TableSourceArguments : DataHandlerArguments, IDataHandlerArguments Constructors TableSourceArguments(String, String, ITable, CbIdentifier) Initializes a new instance of the TableSourceArguments class. Declaration public TableSourceArguments(string name, string alias, ITable metaData = null, CbIdentifier identifier = null) Parameters Type Name Description System.String name The name. System.String alias The alias. ITable metaData The metadata. CbIdentifier identifier The identifier. Properties Alias Gets the alias name. Declaration public string Alias { get; } Property Value Type Description System.String Identifier Gets the identifier. Declaration public CbIdentifier Identifier { get; } Property Value Type Description CbIdentifier Metadata Gets the table that has its place on the model. Declaration public ITable Metadata { get; } Property Value Type Description ITable Name Gets the unique name. Declaration public string Name { get; } Property Value Type Description System.String Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandlerArguments"
  },
  "api/CB.Connector.Classes.html": {
    "href": "api/CB.Connector.Classes.html",
    "title": "Namespace CB.Connector.Classes | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Classes Classes BaseConnector<TProperty, TSession> Provides an abstract class for IConnector<TProperty, TSession> . DataHandlerFactory Provides an abstract class for IDataHandlerFactory . Session Provides an abstract class for ISession ."
  },
  "api/CB.Connector.Collections.Classes.html": {
    "href": "api/CB.Connector.Collections.Classes.html",
    "title": "Namespace CB.Connector.Collections.Classes | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Collections.Classes Classes ColumnArgumentCollection Provides class for lazy loadable collection of IColumnArguments ElementCollection<T> Provides the base class for a generic collection of key/value pairs that can be individually accessed by index and by key. Default implementation for Eager Loading . LoadableCollection<T> Provides the base class for a generic collection of key/value pairs that can be individually accessed by index and by key. Default implementation for Lazy Loading . RequestedElementCollection Provides the base class for a generic collection of key/value pairs that can be individually accessed by index and by key. It collects elements that were requested by TryGetValue method (or added by Add method with requested flag) RequestedElementCollection.RequestedElement<T> Represents an element that was requested. SubCollection<TRoot, T> Provides the base class for a generic collection of key/value pairs that can be individually accessed by index and by key."
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.OrderByArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.OrderByArguments.html",
    "title": "Class OrderByArguments | CB Connector SDK website",
    "keywords": "Class OrderByArguments Provides a base class that encapsulates information for OrderBy object. Inheritance System.Object DataHandlerArguments OrderByArguments Implements IDataHandlerArguments Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler.DataHandlerArguments Assembly : CB.Connector.dll Syntax public sealed class OrderByArguments : DataHandlerArguments, IDataHandlerArguments Constructors OrderByArguments(ICollection<OrderByArguments.ItemToOrder>) Initializes a new instance of the OrderByArguments class. Declaration public OrderByArguments(ICollection<OrderByArguments.ItemToOrder> items) Parameters Type Name Description System.Collections.Generic.ICollection < OrderByArguments.ItemToOrder > items The collection of items to order. Properties Items Gets the collection of items to order that follows the order by clause. Declaration public ICollection<OrderByArguments.ItemToOrder> Items { get; } Property Value Type Description System.Collections.Generic.ICollection < OrderByArguments.ItemToOrder > Methods ParseSortType(String) Parses the type of the sort order. Declaration public static OrderByArguments.SortType ParseSortType(string sort) Parameters Type Name Description System.String sort The type of the sort order as string. Returns Type Description OrderByArguments.SortType The type of the sort order. Implements IDataHandlerArguments Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandlerArguments"
  },
  "api/CB.Connector.Command.DataHandler.DataHandlerArguments.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandlerArguments.html",
    "title": "Namespace CB.Connector.Command.DataHandler.DataHandlerArguments | CB Connector SDK website",
    "keywords": "Namespace CB.Connector.Command.DataHandler.DataHandlerArguments Classes AggregateArguments Provides a base class that encapsulates information for Aggregate object. AssignArguments Provides an abstract class that encapsulates information for UpdateSink object. AssignArgumentsFromHandler Provides a base class for AssignArguments . DataHandlerArguments Provides a base class for IDataHandlerArguments . DeleteSinkArguments Provides a base class that encapsulates information for DeleteSink object. DirectlyAssignArguments Provides a base class for AssignArguments . DistinctArguments Provides a base class that encapsulates information for Distinct object. ExecuteSinkArguments Provides a base class that encapsulates information for ExecuteSink object. HavingArguments Provides a base class that encapsulates information for Having object. InsertSinkArguments Provides a base class that encapsulates information for InsertSink object. JoinArguments Provides a base class that encapsulates information for Join object. LimitArguments Provides a base class that encapsulates information for Limit object. OrderByArguments Provides a base class that encapsulates information for OrderBy object. SelectSinkArguments Provides a base class that encapsulates information for SelectSink object. SubQueryArguments Provides a base class that encapsulates information for SubQuery object. TableFunctionSourceArguments Provides a base class that encapsulates information for TableFunctionSource object. TableSourceArguments Provides a base class that encapsulates information for TableSource object. UpdateSinkArguments Provides a base class that encapsulates information for UpdateSink object. WhereArguments Provides a base class that encapsulates information for Where object. Structs OrderByArguments.ItemToOrder Represents an item to order. Enums JoinType Represents an enumeration that defines literals used to specify the type of join operation. OrderByArguments.SortType Represents an enumeration that defines literals used to specify the type of the sort order."
  },
  "index.html": {
    "href": "index.html",
    "title": "Overview | CB Connector SDK website",
    "keywords": "Overview What is Connect Bridge Platform? Connect Bridge (CB) is a powerful, yet easy to use integration platform that enables casual users to manage data stored in hundreds of data sources via the Structured Query Language (SQL). Supported data sources include a wide range of databases, servers, Microsoft Azure services and many other third-party online services. Connect Bridge Platform also provides a Connector SDK so that third parties can create their own custom connectors. Connect Bridge Platform is divided into three major layers : Client, Server and Plugin. What is Connect Bridge Connector SDK? We offer a wide variety of connectors, but sometimes you might want to call APIs, services, and systems that aren't available as prebuilt connectors. To support more tailored scenarios, you can build custom connectors . Connect Bridge Connector SDK helps you to create your own custom connectors and seamlessly plug them into Connect Bridge Platform. What are connectors? Simply put, a connector is a proxy or a wrapper around an API that enables users to seamlessly access data using Transact-SQL language. Examples of popular connectors include Office 365, Salesforce, Dropbox, Google services, and more. Get Started Add the CB.Connector.dll to your project or install the CB Connector SDK Tools for Visual Studio. Then watch videos, read tutorials, and advanced documentation to help you make the most of CB Connector SDK. Community Issue tracker To report bugs and require features, please use our GitHub Issue Tracker . Stack Overflow For more questions about CB Connector SDK, please tag questions with connect-bridge ."
  },
  "tutorials/topic1_5.html": {
    "href": "tutorials/topic1_5.html",
    "title": "Building your solution | CB Connector SDK website",
    "keywords": "Building your solution Do the following: Select Build > Rebuild Solution . The solution will be built."
  },
  "tutorials/topic3.html": {
    "href": "tutorials/topic3.html",
    "title": "How To | CB Connector SDK website",
    "keywords": "How To To get you up to speed with CB Connector SQK, we've listed some of the most common questions on this page. How To: Debug your solution Attach to running processes with the debugger To attach to a process on your local computer: Open Visual Studio as Administrator. In Visual Studio, select Debug > Attach to Process to open the Attach to Process dialog box. Connection type should be set to Default . Connection target should be your local machine name. In the Available processes list, find and select MG.Server.exe to attach to. Select Attach . Review the build and debug properties In Solution Explorer , select the project. Select the Properties icon, press Alt+Enter , or right-click and choose Properties to open the Properties window . In the Configuration list, choose Debug . Under Start action , select Start external program , and add the fully qualified path and name of the service. Add HostType=Application in the Command line arguments , Use File > Save Selected Items or Ctrl+S to save changes. Set breakpoints in the project. Right-click the project and choose Set as Startup Project . Make sure the Solutions Configuration field is set to Debug . Caution If debugging does not hit your breakpoints, make sure that your DLL output (by default, the <project>/Debug folder) is the location that the calling service is calling. How to: Design Your Meta Model Do the following: Decide what objects you want to include in your Meta Model. The first step in designing your Meta Model is deciding which aspects of your specific data source are important enough to include in the model. When you have a reasonably complete set of objects, move on to the next step: deciding how these objects relate to each other. Determine which of these objects should be tables and which should be columns within those tables. No rules exist about what to identify as tables and which of the attributes in the system belong to which table. When implementing the Entity Relationship Model (ERM) in a relational database, you should take a look at the following table. ER Model Relational Model Regular Entity Create a relation (table) with primary key and non-key attributes (columns). Weak Entity Create a relation with a composite primary key (which includes the primary key of the entity on which this weak entity depends) and non-key attributes. One-to-one (1:1) relationship Place the primary key of either entity in the relation for the other entity or do this for both entities. One-to-many (1:M) relationship Place the primary key of the entity on the one side of the relationship as foreign key in the relation for the entity on the many side. Many-to-many (M:N or M:M) relationship or associative entity Create a relation with a composite primary key using the primary keys of the related entities, plus any non-key attributes of the relationship or associate entity. Many-to-many (M:N or M:M) relationship or associative entity with additional key(s) Create a relation with a composite primary key using the primary keys of the related entities and additional primary key attributes associated with the relationship or associative entity, plus any non-key attributes of the relationship or associative entity. Many-to-many (M:N or M:M) relationship or associative entity with its own key Create a relation with the primary key associated with the relationship or associative entity, plus any non-key attributes of the relationship or associative entity and the primary keys of the related entities (as foreign key attributes). Supertypes and Subtypes Create a relation for the supertype, which contains the primary key and all non-key attributes in common with all subtypes, plus create a separate relation for each subclass with the same primary key (with the same or local name) but with only the non-key attributes related to that subclass. Define tables according to your determination of how you need to organize the objects. How to: View CB Server Error Log File View the CB Server error log to ensure that Connect Bridge processes have completed successfully. This can be helpful to detect (in order of importance) error messages, warning messages, and informational messages. By default, the error log is located at Program Files\\Connecting Software\\Connect Bridge\\MgServerService\\logOutputfile.txt . A new error log is created each time an instance of CB Server is started. You can specify what kind of messages should be logged into the CB Server error log file. To monitor the content of the CB Server error log file from Windows PowerShell in real time, do the following: Get-content \"C:\\\\Program Files\\Connecting Software\\Connect Bridge\\MgServerService\\logOutputfile.txt\" -Wait"
  },
  "api/CB.Connector.Command.DataHandler.Where.html": {
    "href": "api/CB.Connector.Command.DataHandler.Where.html",
    "title": "Class Where | CB Connector SDK website",
    "keywords": "Class Where Provides an abstract class for defining where clause. Inheritance System.Object DataHandler DataFilter Where Implements IDataHandler System.IDisposable Inherited Members DataHandler.Previous DataHandler.ResultColumns DataHandler.GetAllColumns(String) DataHandler.Elements DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class Where : DataFilter, IDataHandler, IDisposable Remarks The responsibility of where clause is to restrict the selection of rows based on a search criterion. Properties Arguments Represents an WhereArguments object defined for the Where object. Declaration public WhereArguments Arguments { get; } Property Value Type Description WhereArguments An WhereArguments object that represents the data handler’s state. Methods Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override sealed bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Overrides DataHandler.Init(IDataHandlerArguments) Implements IDataHandler System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataFilter"
  },
  "api/CB.Connector.Command.DataHandler.UpdateSink.html": {
    "href": "api/CB.Connector.Command.DataHandler.UpdateSink.html",
    "title": "Class UpdateSink | CB Connector SDK website",
    "keywords": "Class UpdateSink Provides an abstract class for defining update statement. Inheritance System.Object DataHandler DataSink UpdateSink Implements IDataHandler System.IDisposable Inherited Members DataHandler.Previous DataHandler.ResultColumns DataHandler.GetAllColumns(String) DataHandler.Elements DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class UpdateSink : DataSink, IDataHandler, IDisposable Remarks The responsibility of update statement is to modify existing data in the data source. Properties Arguments Represents an UpdateSinkArguments object defined for the UpdateSink object. Declaration public UpdateSinkArguments Arguments { get; } Property Value Type Description UpdateSinkArguments An UpdateSinkArguments object that represents the data handler’s state. Methods Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override sealed bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Overrides DataHandler.Init(IDataHandlerArguments) Implements IDataHandler System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataSink"
  },
  "api/CB.Connector.Command.DataHandler.TableSource.html": {
    "href": "api/CB.Connector.Command.DataHandler.TableSource.html",
    "title": "Class TableSource | CB Connector SDK website",
    "keywords": "Class TableSource Provides an abstract class for defining reference table(s) in a parsed statement. Inheritance System.Object DataHandler DataSource TableSource Implements IDataHandler System.IDisposable INamedElement IElement Inherited Members DataHandler.Previous DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class TableSource : DataSource, IDataHandler, IDisposable, INamedElement, IElement Properties Arguments Represents an TableSourceArguments object defined for the TableSource object. Declaration public TableSourceArguments Arguments { get; } Property Value Type Description TableSourceArguments An TableSourceArguments object that represents the data handler’s state. Description Gets or sets the description defined for IElement . Declaration public override IDescriptor Description { get; set; } Property Value Type Description IDescriptor The description. Overrides DataSource.Description Elements Gets the collection of elements defined in the metadata. Declaration public override IElementCollection<IColumnArgument> Elements { get; } Property Value Type Description IElementCollection < IColumnArgument > The collection of elements defined in the metadata. Overrides DataHandler.Elements Name Gets the name of the named element. Declaration public override string Name { get; } Property Value Type Description System.String The name of the named element. Overrides DataSource.Name Remarks Must not exceed 128 characters OriginalName Gets or sets the original name of the source element. Declaration public override string OriginalName { get; } Property Value Type Description System.String The full name of the source element. Returns {account_name.schema_name.element_name}. Overrides DataSource.OriginalName Owner Gets or sets the owner of the named element. Declaration public override INamedElement Owner { get; set; } Property Value Type Description INamedElement A System.String value that specifies the owner of the named element. Overrides DataSource.Owner QualifiedName Gets the name that allows the named element to be identified within a hierarchy of nested namespaces. Declaration public override string QualifiedName { get; } Property Value Type Description System.String The qualified name. Overrides DataSource.QualifiedName Remarks It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the named element itself. ResultColumns Gets the collection of columns that belong to the result set. Declaration public override ICollection<IColumnArgument> ResultColumns { get; } Property Value Type Description System.Collections.Generic.ICollection < IColumnArgument > The collection of columns that belong to the result set. Overrides DataHandler.ResultColumns Methods GetAllColumns(String) Gets the collection of columns that are used by next handlers. Declaration public override ICollection<IColumnArgument> GetAllColumns(string nameFilter) Parameters Type Name Description System.String nameFilter Returns Type Description System.Collections.Generic.ICollection < IColumnArgument > The collection of columns that are used by next handlers. Overrides DataHandler.GetAllColumns(String) Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Overrides DataHandler.Init(IDataHandlerArguments) Implements IDataHandler System.IDisposable INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also DataSource"
  },
  "api/CB.Connector.Command.DataHandler.DataHandler.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataHandler.html",
    "title": "Class DataHandler | CB Connector SDK website",
    "keywords": "Class DataHandler Provides an abstract class for IDataHandler . Inheritance System.Object DataHandler DataFilter DataSink DataSource Implements IDataHandler System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class DataHandler : IDataHandler, IDisposable Properties Elements Gets the collection of elements defined in the metadata. Declaration public virtual IElementCollection<IColumnArgument> Elements { get; } Property Value Type Description IElementCollection < IColumnArgument > The collection of elements defined in the metadata. Previous Gets the previous handler in the pipeline. Declaration public IDataHandler Previous { get; } Property Value Type Description IDataHandler A reference to the previous handler in the pipeline, or null if the current handler is the first of the pipeline. ResultColumns Gets the collection of columns that belong to the result set. Declaration public virtual ICollection<IColumnArgument> ResultColumns { get; } Property Value Type Description System.Collections.Generic.ICollection < IColumnArgument > The collection of columns that belong to the result set. Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Execute(IResultSetLoader, IExecutionContext) Defines the method to be called when the command is invoked. Declaration public abstract void Execute(IResultSetLoader loader, IExecutionContext context) Parameters Type Name Description IResultSetLoader loader The loader used to load a valid result expected by the CB Server. IExecutionContext context The contextual information populated by the server before execution. Remarks Executes the query and builds an IResultSetLoader . GetAllColumns(String) Gets the collection of columns that are used by next handlers. Declaration public virtual ICollection<IColumnArgument> GetAllColumns(string nameFilter) Parameters Type Name Description System.String nameFilter Returns Type Description System.Collections.Generic.ICollection < IColumnArgument > The collection of columns that are used by next handlers. Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public virtual bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . OnInit() Called on Init() Method. Declaration protected abstract bool OnInit() Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Remarks This method is used to validate the initialization. Register(IDataHandler) Registers the previous handler in the pipeline. Declaration public IDataHandler Register(IDataHandler previous) Parameters Type Name Description IDataHandler previous An IDataHandler object. Returns Type Description IDataHandler Returns this instance. Implements IDataHandler System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also IDataHandler"
  },
  "api/CB.Connector.Command.DataHandler.DataFilter.html": {
    "href": "api/CB.Connector.Command.DataHandler.DataFilter.html",
    "title": "Class DataFilter | CB Connector SDK website",
    "keywords": "Class DataFilter Represents the data filter that encapsulates a processing step (algorithm). Inheritance System.Object DataHandler DataFilter Distinct Having Limit OrderBy Where Implements IDataHandler System.IDisposable Inherited Members DataHandler.Previous DataHandler.ResultColumns DataHandler.GetAllColumns(String) DataHandler.Elements DataHandler.Init(IDataHandlerArguments) DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class DataFilter : DataHandler, IDataHandler, IDisposable Remarks The responsibilities of a filter element are: Get input data; Perform one or more operations on its input data; Supply output data. The basic activities of a filter element, often combined in a single filter, are as follows: Enrich input data; Refine input data (e.g. filter out “uninteresting” input, sort input); Transform input data (e.g. perform calculation). Implements IDataHandler System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataHandler"
  },
  "api/CB.Connector.Command.DataHandler.ExecuteSink.html": {
    "href": "api/CB.Connector.Command.DataHandler.ExecuteSink.html",
    "title": "Class ExecuteSink | CB Connector SDK website",
    "keywords": "Class ExecuteSink Provides an abstract class for defining execute statement. Inheritance System.Object DataHandler DataSink ExecuteSink Implements IDataHandler System.IDisposable Inherited Members DataHandler.Previous DataHandler.GetAllColumns(String) DataHandler.Elements DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class ExecuteSink : DataSink, IDataHandler, IDisposable Remarks The responsibility of execute statement is to perform an action and return a void, single or table value. Properties Arguments Represents an ExecuteSinkArguments object defined for the ExecuteSink object. Declaration public ExecuteSinkArguments Arguments { get; } Property Value Type Description ExecuteSinkArguments An ExecuteSinkArguments object that represents the data handler’s state. ResultColumns Gets the collection of columns that belong to the result set. Declaration public override ICollection<IColumnArgument> ResultColumns { get; } Property Value Type Description System.Collections.Generic.ICollection < IColumnArgument > The collection of columns that belong to the result set. Overrides DataHandler.ResultColumns Methods Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override sealed bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Overrides DataHandler.Init(IDataHandlerArguments) Implements IDataHandler System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataSink"
  },
  "api/CB.Connector.Command.DataHandler.Distinct.html": {
    "href": "api/CB.Connector.Command.DataHandler.Distinct.html",
    "title": "Class Distinct | CB Connector SDK website",
    "keywords": "Class Distinct Provides an abstract class for defining distinct clause. Inheritance System.Object DataHandler DataFilter Distinct Implements IDataHandler System.IDisposable Inherited Members DataHandler.Previous DataHandler.ResultColumns DataHandler.GetAllColumns(String) DataHandler.Elements DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class Distinct : DataFilter, IDataHandler, IDisposable Remarks The responsibility of distinct clause is to confine data to unique values. Properties Arguments Represents an DistinctArguments object defined for the Distinct object. Declaration public DistinctArguments Arguments { get; } Property Value Type Description DistinctArguments An DistinctArguments object that represents the data handler’s state. Methods Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override sealed bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Overrides DataHandler.Init(IDataHandlerArguments) Implements IDataHandler System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataFilter"
  },
  "api/CB.Connector.Command.DataHandler.Interfaces.IDataHandler.html": {
    "href": "api/CB.Connector.Command.DataHandler.Interfaces.IDataHandler.html",
    "title": "Interface IDataHandler | CB Connector SDK website",
    "keywords": "Interface IDataHandler Provides a consistent interface for defining a parsed statement; that is, the parts from which it is constructed and how those parts are arranged. It represents commands that can operate on the data within a data source. Inherited Members System.IDisposable.Dispose() Namespace : CB.Connector.Command.DataHandler.Interfaces Assembly : CB.Connector.dll Syntax public interface IDataHandler : IDisposable Properties Elements Gets the collection of elements defined in the metadata. Declaration IElementCollection<IColumnArgument> Elements { get; } Property Value Type Description IElementCollection < IColumnArgument > The collection of elements defined in the metadata. Previous Gets the previous handler in the pipeline. Declaration IDataHandler Previous { get; } Property Value Type Description IDataHandler A reference to the previous handler in the pipeline, or null if the current handler is the first of the pipeline. ResultColumns Gets the collection of columns that belong to the result set. Declaration ICollection<IColumnArgument> ResultColumns { get; } Property Value Type Description System.Collections.Generic.ICollection < IColumnArgument > The collection of columns that belong to the result set. Methods Execute(IResultSetLoader, IExecutionContext) Defines the method to be called when the command is invoked. Declaration void Execute(IResultSetLoader loader, IExecutionContext context) Parameters Type Name Description IResultSetLoader loader The loader used to load a valid result expected by the CB Server. IExecutionContext context The contextual information populated by the server before execution. Remarks Executes the query and builds an IResultSetLoader . GetAllColumns(String) Gets the collection of columns that are used by next handlers. Declaration ICollection<IColumnArgument> GetAllColumns(string nameFilter) Parameters Type Name Description System.String nameFilter Returns Type Description System.Collections.Generic.ICollection < IColumnArgument > The collection of columns that are used by next handlers. Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Register(IDataHandler) Registers the previous handler in the pipeline. Declaration IDataHandler Register(IDataHandler previous) Parameters Type Name Description IDataHandler previous An IDataHandler object. Returns Type Description IDataHandler Returns this instance. Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also System.IDisposable"
  },
  "api/CB.Connector.Command.DataHandler.SubQuery.html": {
    "href": "api/CB.Connector.Command.DataHandler.SubQuery.html",
    "title": "Class SubQuery | CB Connector SDK website",
    "keywords": "Class SubQuery Provides an abstract class for defining sub-query (regular query placed inside parenthesis). Inheritance System.Object DataHandler DataSource SubQuery Implements IDataHandler System.IDisposable INamedElement IElement Inherited Members DataSource.Description DataSource.Name DataSource.QualifiedName DataSource.Owner DataSource.OriginalName DataHandler.Previous DataHandler.ResultColumns DataHandler.GetAllColumns(String) DataHandler.Elements DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class SubQuery : DataSource, IDataHandler, IDisposable, INamedElement, IElement Remarks The responsibility of sub-query is often to retrieve data from the data source. Properties Arguments Represents an SubQueryArguments object defined for the SubQuery object. Declaration public SubQueryArguments Arguments { get; } Property Value Type Description SubQueryArguments An SubQueryArguments object that represents the data handler’s state. Methods Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override sealed bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Overrides DataHandler.Init(IDataHandlerArguments) Implements IDataHandler System.IDisposable INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also DataSource"
  },
  "api/CB.Connector.Command.DataHandler.SelectSink.html": {
    "href": "api/CB.Connector.Command.DataHandler.SelectSink.html",
    "title": "Class SelectSink | CB Connector SDK website",
    "keywords": "Class SelectSink Provides an abstract class for defining select statement. Inheritance System.Object DataHandler DataSink BaseDataSink SelectSink Implements IDataHandler System.IDisposable Inherited Members BaseDataSink.Elements BaseDataSink.ResultColumns BaseDataSink.GetAllColumns(String) DataHandler.Previous DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class SelectSink : BaseDataSink, IDataHandler, IDisposable Remarks The responsibility of select statement is to retrieve data from the data source. Properties Arguments Represents an SelectSinkArguments object defined for the SelectSink object. Declaration public SelectSinkArguments Arguments { get; } Property Value Type Description SelectSinkArguments An SelectSinkArguments object that represents the data handler’s state. Methods Init(IDataHandlerArguments) Initializes an object’s data at the time the server creates it without explicitly using a constructor for the object. Declaration public override sealed bool Init(IDataHandlerArguments args) Parameters Type Name Description IDataHandlerArguments args An IDataHandlerArguments object. Returns Type Description System.Boolean true if the IDataHandler was successfully initialized; otherwise, false . Overrides DataHandler.Init(IDataHandlerArguments) Implements IDataHandler System.IDisposable Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) See Also DataSink"
  },
  "api/CB.Connector.Command.DataHandler.RightJoin.html": {
    "href": "api/CB.Connector.Command.DataHandler.RightJoin.html",
    "title": "Class RightJoin | CB Connector SDK website",
    "keywords": "Class RightJoin Provides an abstract class for defining right join clause. Inheritance System.Object DataHandler DataSource Join RightJoin Implements IDataHandler System.IDisposable INamedElement IElement Inherited Members Join.Arguments Join.Init(IDataHandlerArguments) Join.Elements Join.ResultColumns Join.GetAllColumns(String) DataSource.Description DataSource.Name DataSource.QualifiedName DataSource.Owner DataSource.OriginalName DataHandler.Previous DataHandler.Register(IDataHandler) DataHandler.Execute(IResultSetLoader, IExecutionContext) DataHandler.OnInit() DataHandler.Dispose(Boolean) DataHandler.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CB.Connector.Command.DataHandler Assembly : CB.Connector.dll Syntax public abstract class RightJoin : Join, IDataHandler, IDisposable, INamedElement, IElement Remarks The responsibility of right join clause is to return all records from the right table, and the matched records from the left table. Implements IDataHandler System.IDisposable INamedElement IElement Extension Methods ConnectorPropertiesExtensions.TryParse(Object, Type, out Object) ConnectorPropertiesExtensions.Parse(Object, Type) ConnectorPropertiesExtensions.Decrypt(Object, String) ConnectorPropertiesExtensions.Encrypt(Object, String) ConnectorPropertiesExtensions.IsEncrypted(Object, String, Encoding) NamedElement.GetQualifiedName(INamedElement) NamedElement.GetDepth(INamedElement) See Also Join"
  }
}